
Paperino_3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000020ac  00002140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  0080012a  0080012a  0000216a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000216a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003216  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d7  00000000  00000000  00005732  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bdb  00000000  00000000  00006b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  000086e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001052  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fb6  00000000  00000000  0000a14a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000c100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_9>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__vector_20>
      54:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__vector_21>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__vector_25>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__vector_31>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__vector_35>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 00       	.word	0x003f	; ????

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	da e0       	ldi	r29, 0x0A	; 10
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	ec ea       	ldi	r30, 0xAC	; 172
      ee:	f0 e2       	ldi	r31, 0x20	; 32
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	aa 32       	cpi	r26, 0x2A	; 42
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	aa e2       	ldi	r26, 0x2A	; 42
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	ab 38       	cpi	r26, 0x8B	; 139
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 bd 09 	call	0x137a	; 0x137a <main>
     110:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <selected_value>:
#include "IMU.h"
#include "USART.h"
#include "Timer.h"

void selected_value(uint8_t choise){
	switch(choise){
     118:	8b 36       	cpi	r24, 0x6B	; 107
     11a:	09 f4       	brne	.+2      	; 0x11e <selected_value+0x6>
     11c:	df c0       	rjmp	.+446    	; 0x2dc <selected_value+0x1c4>
     11e:	40 f5       	brcc	.+80     	; 0x170 <selected_value+0x58>
     120:	85 36       	cpi	r24, 0x65	; 101
     122:	09 f4       	brne	.+2      	; 0x126 <selected_value+0xe>
     124:	91 c0       	rjmp	.+290    	; 0x248 <selected_value+0x130>
     126:	90 f4       	brcc	.+36     	; 0x14c <selected_value+0x34>
     128:	82 36       	cpi	r24, 0x62	; 98
     12a:	09 f4       	brne	.+2      	; 0x12e <selected_value+0x16>
     12c:	5a c0       	rjmp	.+180    	; 0x1e2 <selected_value+0xca>
     12e:	38 f4       	brcc	.+14     	; 0x13e <selected_value+0x26>
     130:	88 23       	and	r24, r24
     132:	09 f4       	brne	.+2      	; 0x136 <selected_value+0x1e>
     134:	1d c1       	rjmp	.+570    	; 0x370 <selected_value+0x258>
     136:	81 36       	cpi	r24, 0x61	; 97
     138:	09 f4       	brne	.+2      	; 0x13c <selected_value+0x24>
     13a:	42 c0       	rjmp	.+132    	; 0x1c0 <selected_value+0xa8>
     13c:	1d c1       	rjmp	.+570    	; 0x378 <selected_value+0x260>
     13e:	83 36       	cpi	r24, 0x63	; 99
     140:	09 f4       	brne	.+2      	; 0x144 <selected_value+0x2c>
     142:	60 c0       	rjmp	.+192    	; 0x204 <selected_value+0xec>
     144:	84 36       	cpi	r24, 0x64	; 100
     146:	09 f4       	brne	.+2      	; 0x14a <selected_value+0x32>
     148:	6e c0       	rjmp	.+220    	; 0x226 <selected_value+0x10e>
     14a:	16 c1       	rjmp	.+556    	; 0x378 <selected_value+0x260>
     14c:	88 36       	cpi	r24, 0x68	; 104
     14e:	09 f4       	brne	.+2      	; 0x152 <selected_value+0x3a>
     150:	a3 c0       	rjmp	.+326    	; 0x298 <selected_value+0x180>
     152:	38 f4       	brcc	.+14     	; 0x162 <selected_value+0x4a>
     154:	86 36       	cpi	r24, 0x66	; 102
     156:	09 f4       	brne	.+2      	; 0x15a <selected_value+0x42>
     158:	88 c0       	rjmp	.+272    	; 0x26a <selected_value+0x152>
     15a:	87 36       	cpi	r24, 0x67	; 103
     15c:	09 f4       	brne	.+2      	; 0x160 <selected_value+0x48>
     15e:	96 c0       	rjmp	.+300    	; 0x28c <selected_value+0x174>
     160:	0b c1       	rjmp	.+534    	; 0x378 <selected_value+0x260>
     162:	89 36       	cpi	r24, 0x69	; 105
     164:	09 f4       	brne	.+2      	; 0x168 <selected_value+0x50>
     166:	9e c0       	rjmp	.+316    	; 0x2a4 <selected_value+0x18c>
     168:	8a 36       	cpi	r24, 0x6A	; 106
     16a:	09 f4       	brne	.+2      	; 0x16e <selected_value+0x56>
     16c:	a9 c0       	rjmp	.+338    	; 0x2c0 <selected_value+0x1a8>
     16e:	04 c1       	rjmp	.+520    	; 0x378 <selected_value+0x260>
     170:	81 37       	cpi	r24, 0x71	; 113
     172:	09 f4       	brne	.+2      	; 0x176 <selected_value+0x5e>
     174:	e5 c0       	rjmp	.+458    	; 0x340 <selected_value+0x228>
     176:	90 f4       	brcc	.+36     	; 0x19c <selected_value+0x84>
     178:	8e 36       	cpi	r24, 0x6E	; 110
     17a:	09 f4       	brne	.+2      	; 0x17e <selected_value+0x66>
     17c:	d0 c0       	rjmp	.+416    	; 0x31e <selected_value+0x206>
     17e:	38 f4       	brcc	.+14     	; 0x18e <selected_value+0x76>
     180:	8c 36       	cpi	r24, 0x6C	; 108
     182:	09 f4       	brne	.+2      	; 0x186 <selected_value+0x6e>
     184:	b9 c0       	rjmp	.+370    	; 0x2f8 <selected_value+0x1e0>
     186:	8d 36       	cpi	r24, 0x6D	; 109
     188:	09 f4       	brne	.+2      	; 0x18c <selected_value+0x74>
     18a:	c4 c0       	rjmp	.+392    	; 0x314 <selected_value+0x1fc>
     18c:	f5 c0       	rjmp	.+490    	; 0x378 <selected_value+0x260>
     18e:	8f 36       	cpi	r24, 0x6F	; 111
     190:	09 f4       	brne	.+2      	; 0x194 <selected_value+0x7c>
     192:	ca c0       	rjmp	.+404    	; 0x328 <selected_value+0x210>
     194:	80 37       	cpi	r24, 0x70	; 112
     196:	09 f4       	brne	.+2      	; 0x19a <selected_value+0x82>
     198:	ce c0       	rjmp	.+412    	; 0x336 <selected_value+0x21e>
     19a:	ee c0       	rjmp	.+476    	; 0x378 <selected_value+0x260>
     19c:	84 37       	cpi	r24, 0x74	; 116
     19e:	09 f4       	brne	.+2      	; 0x1a2 <selected_value+0x8a>
     1a0:	de c0       	rjmp	.+444    	; 0x35e <selected_value+0x246>
     1a2:	38 f4       	brcc	.+14     	; 0x1b2 <selected_value+0x9a>
     1a4:	82 37       	cpi	r24, 0x72	; 114
     1a6:	09 f4       	brne	.+2      	; 0x1aa <selected_value+0x92>
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <selected_value+0x232>
     1aa:	83 37       	cpi	r24, 0x73	; 115
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <selected_value+0x98>
     1ae:	d2 c0       	rjmp	.+420    	; 0x354 <selected_value+0x23c>
     1b0:	e3 c0       	rjmp	.+454    	; 0x378 <selected_value+0x260>
     1b2:	85 37       	cpi	r24, 0x75	; 117
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <selected_value+0xa0>
     1b6:	e3 c0       	rjmp	.+454    	; 0x37e <selected_value+0x266>
     1b8:	8f 3f       	cpi	r24, 0xFF	; 255
     1ba:	09 f4       	brne	.+2      	; 0x1be <selected_value+0xa6>
     1bc:	d5 c0       	rjmp	.+426    	; 0x368 <selected_value+0x250>
     1be:	dc c0       	rjmp	.+440    	; 0x378 <selected_value+0x260>
		case ACCX:
		computed_acceleration(0);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <computed_acceleration>
		USART_Transmit(accx);
     1c6:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <accx>
     1ca:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <accx+0x1>
     1ce:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <accx+0x2>
     1d2:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <accx+0x3>
     1d6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     1da:	86 2f       	mov	r24, r22
     1dc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     1e0:	08 95       	ret
		case ACCY:
		computed_acceleration(0);
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <computed_acceleration>
		USART_Transmit(accy);
     1e8:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <accy>
     1ec:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <accy+0x1>
     1f0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <accy+0x2>
     1f4:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <accy+0x3>
     1f8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     1fc:	86 2f       	mov	r24, r22
     1fe:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     202:	08 95       	ret
		case ACCZ:
		computed_acceleration(0);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <computed_acceleration>
		USART_Transmit(accz);
     20a:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <accz>
     20e:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <accz+0x1>
     212:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <accz+0x2>
     216:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <accz+0x3>
     21a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     21e:	86 2f       	mov	r24, r22
     220:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     224:	08 95       	ret
		case GYROX:
		computed_gyroscope(0);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 8c 06 	call	0xd18	; 0xd18 <computed_gyroscope>
		USART_Transmit(gyrox);
     22c:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <gyrox>
     230:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <gyrox+0x1>
     234:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <gyrox+0x2>
     238:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <gyrox+0x3>
     23c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     240:	86 2f       	mov	r24, r22
     242:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     246:	08 95       	ret
		case GYROY:
		computed_gyroscope(0);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 8c 06 	call	0xd18	; 0xd18 <computed_gyroscope>
		USART_Transmit(gyroy);
     24e:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <gyroy>
     252:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <gyroy+0x1>
     256:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gyroy+0x2>
     25a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <gyroy+0x3>
     25e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     262:	86 2f       	mov	r24, r22
     264:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     268:	08 95       	ret
		case GYROZ:
		computed_gyroscope(0);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 8c 06 	call	0xd18	; 0xd18 <computed_gyroscope>
		USART_Transmit(gyroz);
     270:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <gyroz>
     274:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <gyroz+0x1>
     278:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <gyroz+0x2>
     27c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <gyroz+0x3>
     280:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     284:	86 2f       	mov	r24, r22
     286:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     28a:	08 95       	ret
		case TEMP:
		USART_Transmit(temperature(0));
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 cc 05 	call	0xb98	; 0xb98 <temperature>
     292:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     296:	08 95       	ret
		case WHOIAM:
		USART_Transmit(IMU_who_i_am(0));
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 ba 05 	call	0xb74	; 0xb74 <IMU_who_i_am>
     29e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     2a2:	08 95       	ret
		case ANGLEACCX:
		USART_Transmit(Angle_X_Acc);
     2a4:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <Angle_X_Acc>
     2a8:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <Angle_X_Acc+0x1>
     2ac:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <Angle_X_Acc+0x2>
     2b0:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <Angle_X_Acc+0x3>
     2b4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     2b8:	86 2f       	mov	r24, r22
     2ba:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     2be:	08 95       	ret
		case ANGLEACCY:
		USART_Transmit(Angle_Y_Acc);
     2c0:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <Angle_Y_Acc>
     2c4:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <Angle_Y_Acc+0x1>
     2c8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <Angle_Y_Acc+0x2>
     2cc:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <Angle_Y_Acc+0x3>
     2d0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     2d4:	86 2f       	mov	r24, r22
     2d6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     2da:	08 95       	ret
		case ANGLEGYROX:
		USART_Transmit(Angle_X_Gyro);
     2dc:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Angle_X_Gyro>
     2e0:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <Angle_X_Gyro+0x1>
     2e4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Angle_X_Gyro+0x2>
     2e8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <Angle_X_Gyro+0x3>
     2ec:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     2f0:	86 2f       	mov	r24, r22
     2f2:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     2f6:	08 95       	ret
		case ANGLEGYROY:
		USART_Transmit(Angle_Y_Gyro);
     2f8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Angle_Y_Gyro>
     2fc:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <Angle_Y_Gyro+0x1>
     300:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Angle_Y_Gyro+0x2>
     304:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Angle_Y_Gyro+0x3>
     308:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     30c:	86 2f       	mov	r24, r22
     30e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     312:	08 95       	ret
		case ANGLEX:
		USART_Transmit(AngleX);
     314:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <AngleX>
     318:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     31c:	08 95       	ret
		case ANGLEY:
		USART_Transmit(AngleY);
     31e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <AngleY>
     322:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     326:	08 95       	ret
		case TIME:
		USART_Transmit((uint8_t)system_tick_MG);
     328:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <system_tick_MG>
     32c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <system_tick_MG+0x1>
     330:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     334:	08 95       	ret
		case THROTTLE:
		USART_Transmit(throttle);
     336:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <throttle>
     33a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     33e:	08 95       	ret
		case PITCH:
		USART_Transmit(pitch);
     340:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <pitch>
     344:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     348:	08 95       	ret
		case ROLL:
		USART_Transmit(roll);
     34a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <roll>
     34e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     352:	08 95       	ret
		case YAW:
		USART_Transmit(yaw);
     354:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <yaw>
     358:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     35c:	08 95       	ret
		case AUX1:
		USART_Transmit(aux1);
     35e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <aux1>
     362:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     366:	08 95       	ret
		case AUX2:
		break;
		case 255:
		USART_Transmit('p');
     368:	80 e7       	ldi	r24, 0x70	; 112
     36a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     36e:	08 95       	ret
		case 0:
		USART_Transmit('q');
     370:	81 e7       	ldi	r24, 0x71	; 113
     372:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		break;
     376:	08 95       	ret
		default:
		USART_Transmit('e');
     378:	85 e6       	ldi	r24, 0x65	; 101
     37a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     37e:	08 95       	ret

00000380 <TWI_init>:
		
	}
	
	TWI_stop();
	return 0;
}
     380:	8c e0       	ldi	r24, 0x0C	; 12
     382:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     386:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     38a:	08 95       	ret

0000038c <TWI_start>:
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	84 ea       	ldi	r24, 0xA4	; 164
     392:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     396:	ec eb       	ldi	r30, 0xBC	; 188
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	88 23       	and	r24, r24
     39e:	ec f7       	brge	.-6      	; 0x39a <TWI_start+0xe>
     3a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3a4:	88 7f       	andi	r24, 0xF8	; 248
     3a6:	88 30       	cpi	r24, 0x08	; 8
     3a8:	e1 f0       	breq	.+56     	; 0x3e2 <TWI_start+0x56>
     3aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3ae:	88 7f       	andi	r24, 0xF8	; 248
     3b0:	80 31       	cpi	r24, 0x10	; 16
     3b2:	c9 f0       	breq	.+50     	; 0x3e6 <TWI_start+0x5a>
     3b4:	68 e0       	ldi	r22, 0x08	; 8
     3b6:	87 e1       	ldi	r24, 0x17	; 23
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     3be:	67 e0       	ldi	r22, 0x07	; 7
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     3c8:	c9 eb       	ldi	r28, 0xB9	; 185
     3ca:	d0 e0       	ldi	r29, 0x00	; 0
     3cc:	88 81       	ld	r24, Y
     3ce:	88 7f       	andi	r24, 0xF8	; 248
     3d0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     3d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3d8:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     3dc:	88 81       	ld	r24, Y
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <TWI_start+0x5c>
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <TWI_start+0x5c>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <TWI_address>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	80 6d       	ori	r24, 0xD0	; 208
     3f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3f8:	84 e8       	ldi	r24, 0x84	; 132
     3fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3fe:	ec eb       	ldi	r30, 0xBC	; 188
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	88 23       	and	r24, r24
     406:	ec f7       	brge	.-6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     408:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     40c:	88 7f       	andi	r24, 0xF8	; 248
     40e:	80 34       	cpi	r24, 0x40	; 64
     410:	e1 f0       	breq	.+56     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     412:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     416:	88 7f       	andi	r24, 0xF8	; 248
     418:	88 31       	cpi	r24, 0x18	; 24
     41a:	c9 f0       	breq	.+50     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     41c:	68 e0       	ldi	r22, 0x08	; 8
     41e:	87 e1       	ldi	r24, 0x17	; 23
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     426:	66 e0       	ldi	r22, 0x06	; 6
     428:	8a e0       	ldi	r24, 0x0A	; 10
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     430:	c9 eb       	ldi	r28, 0xB9	; 185
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	88 81       	ld	r24, Y
     436:	88 7f       	andi	r24, 0xF8	; 248
     438:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     43c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     440:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     444:	88 81       	ld	r24, Y
     446:	88 7f       	andi	r24, 0xF8	; 248
     448:	03 c0       	rjmp	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	01 c0       	rjmp	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <TWI_send>:
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     45e:	84 e8       	ldi	r24, 0x84	; 132
     460:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     464:	ec eb       	ldi	r30, 0xBC	; 188
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	88 23       	and	r24, r24
     46c:	ec f7       	brge	.-6      	; 0x468 <TWI_send+0x12>
     46e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	88 32       	cpi	r24, 0x28	; 40
     476:	b9 f0       	breq	.+46     	; 0x4a6 <TWI_send+0x50>
     478:	68 e0       	ldi	r22, 0x08	; 8
     47a:	87 e1       	ldi	r24, 0x17	; 23
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     482:	66 e0       	ldi	r22, 0x06	; 6
     484:	8a e0       	ldi	r24, 0x0A	; 10
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     48c:	c9 eb       	ldi	r28, 0xB9	; 185
     48e:	d0 e0       	ldi	r29, 0x00	; 0
     490:	88 81       	ld	r24, Y
     492:	88 7f       	andi	r24, 0xF8	; 248
     494:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     498:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     49c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     4a0:	88 81       	ld	r24, Y
     4a2:	88 7f       	andi	r24, 0xF8	; 248
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <TWI_send+0x52>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <TWI_receive_ack>:
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	84 ec       	ldi	r24, 0xC4	; 196
     4b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4b8:	ec eb       	ldi	r30, 0xBC	; 188
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	88 23       	and	r24, r24
     4c0:	ec f7       	brge	.-6      	; 0x4bc <TWI_receive_ack+0xe>
     4c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4c6:	88 7f       	andi	r24, 0xF8	; 248
     4c8:	80 35       	cpi	r24, 0x50	; 80
     4ca:	19 f4       	brne	.+6      	; 0x4d2 <TWI_receive_ack+0x24>
     4cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     4d0:	16 c0       	rjmp	.+44     	; 0x4fe <TWI_receive_ack+0x50>
     4d2:	68 e0       	ldi	r22, 0x08	; 8
     4d4:	87 e1       	ldi	r24, 0x17	; 23
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     4dc:	69 e0       	ldi	r22, 0x09	; 9
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     4e6:	c9 eb       	ldi	r28, 0xB9	; 185
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
     4ea:	88 81       	ld	r24, Y
     4ec:	88 7f       	andi	r24, 0xF8	; 248
     4ee:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     4f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4f6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     4fa:	88 81       	ld	r24, Y
     4fc:	88 7f       	andi	r24, 0xF8	; 248
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <TWI_receive_nack>:
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	84 e8       	ldi	r24, 0x84	; 132
     50a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     50e:	ec eb       	ldi	r30, 0xBC	; 188
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	88 23       	and	r24, r24
     516:	ec f7       	brge	.-6      	; 0x512 <TWI_receive_nack+0xe>
     518:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     51c:	88 7f       	andi	r24, 0xF8	; 248
     51e:	88 35       	cpi	r24, 0x58	; 88
     520:	19 f4       	brne	.+6      	; 0x528 <TWI_receive_nack+0x24>
     522:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     526:	16 c0       	rjmp	.+44     	; 0x554 <TWI_receive_nack+0x50>
     528:	68 e0       	ldi	r22, 0x08	; 8
     52a:	87 e1       	ldi	r24, 0x17	; 23
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     532:	69 e0       	ldi	r22, 0x09	; 9
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <USART_String>
     53c:	c9 eb       	ldi	r28, 0xB9	; 185
     53e:	d0 e0       	ldi	r29, 0x00	; 0
     540:	88 81       	ld	r24, Y
     542:	88 7f       	andi	r24, 0xF8	; 248
     544:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     548:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     54c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
     550:	88 81       	ld	r24, Y
     552:	88 7f       	andi	r24, 0xF8	; 248
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <TWI_stop>:
     55a:	84 e9       	ldi	r24, 0x94	; 148
     55c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     560:	08 95       	ret

00000562 <TWI_send_16bit>:
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	c8 2f       	mov	r28, r24
     568:	d6 2f       	mov	r29, r22
     56a:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     574:	88 23       	and	r24, r24
     576:	21 f0       	breq	.+8      	; 0x580 <TWI_send_16bit+0x1e>
     578:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     57c:	88 7f       	andi	r24, 0xF8	; 248
     57e:	15 c0       	rjmp	.+42     	; 0x5aa <TWI_send_16bit+0x48>
     580:	8c 2f       	mov	r24, r28
     582:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     586:	88 23       	and	r24, r24
     588:	21 f0       	breq	.+8      	; 0x592 <TWI_send_16bit+0x30>
     58a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     58e:	88 7f       	andi	r24, 0xF8	; 248
     590:	0c c0       	rjmp	.+24     	; 0x5aa <TWI_send_16bit+0x48>
     592:	8d 2f       	mov	r24, r29
     594:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     598:	88 23       	and	r24, r24
     59a:	21 f0       	breq	.+8      	; 0x5a4 <TWI_send_16bit+0x42>
     59c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a0:	88 7f       	andi	r24, 0xF8	; 248
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <TWI_send_16bit+0x48>
     5a4:	94 e9       	ldi	r25, 0x94	; 148
     5a6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <TWI_receive_8bit>:


uint8_t TWI_receive_8bit(uint8_t registro){
     5b0:	cf 93       	push	r28
     5b2:	c8 2f       	mov	r28, r24
	if (TWI_start()!= 0){ //masking for prescaler bits|
     5b4:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     5b8:	88 23       	and	r24, r24
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <TWI_receive_8bit+0x14>
		return TWSR & 0xF8;
     5bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5c0:	88 7f       	andi	r24, 0xF8	; 248
     5c2:	28 c0       	rjmp	.+80     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_address(0) != 0){
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     5ca:	88 23       	and	r24, r24
     5cc:	21 f0       	breq	.+8      	; 0x5d6 <TWI_receive_8bit+0x26>
		return TWSR & 0xF8;
     5ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5d2:	88 7f       	andi	r24, 0xF8	; 248
     5d4:	1f c0       	rjmp	.+62     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_send(registro) != 0){
     5d6:	8c 2f       	mov	r24, r28
     5d8:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     5dc:	88 23       	and	r24, r24
     5de:	21 f0       	breq	.+8      	; 0x5e8 <TWI_receive_8bit+0x38>
		return TWSR & 0xF8;
     5e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5e4:	88 7f       	andi	r24, 0xF8	; 248
     5e6:	16 c0       	rjmp	.+44     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	
	if (TWI_start()!= 0){
     5e8:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     5ec:	88 23       	and	r24, r24
     5ee:	21 f0       	breq	.+8      	; 0x5f8 <TWI_receive_8bit+0x48>
		return TWSR & 0xF8;
     5f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5f4:	88 7f       	andi	r24, 0xF8	; 248
     5f6:	0e c0       	rjmp	.+28     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_address(1) != 0){
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     5fe:	88 23       	and	r24, r24
     600:	21 f0       	breq	.+8      	; 0x60a <TWI_receive_8bit+0x5a>
		return TWSR & 0xF8;
     602:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     606:	88 7f       	andi	r24, 0xF8	; 248
     608:	05 c0       	rjmp	.+10     	; 0x614 <TWI_receive_8bit+0x64>
	}

	uint8_t data = 0;
	data = TWI_receive_nack();
     60a:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
		return TWSR & 0xF8;
	}
}

void TWI_stop(){
	TWCR =	(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     60e:	94 e9       	ldi	r25, 0x94	; 148
     610:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	uint8_t data = 0;
	data = TWI_receive_nack();
	TWI_stop();
	return data;
}
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <TWI_receive_16bit>:

uint16_t TWI_receive_16bit(uint8_t registro){
     618:	cf 93       	push	r28
     61a:	c8 2f       	mov	r28, r24
	if (TWI_start()!= 0){
     61c:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     620:	88 23       	and	r24, r24
     622:	29 f0       	breq	.+10     	; 0x62e <TWI_receive_16bit+0x16>
		return TWSR & 0xF8;
     624:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     628:	88 7f       	andi	r24, 0xF8	; 248
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	2f c0       	rjmp	.+94     	; 0x68c <TWI_receive_16bit+0x74>
	}
	
	if (TWI_address(0) != 0){
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     634:	88 23       	and	r24, r24
     636:	29 f0       	breq	.+10     	; 0x642 <TWI_receive_16bit+0x2a>
		return TWSR & 0xF8;
     638:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     63c:	88 7f       	andi	r24, 0xF8	; 248
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	25 c0       	rjmp	.+74     	; 0x68c <TWI_receive_16bit+0x74>
	}

	if (TWI_send(registro) != 0){
     642:	8c 2f       	mov	r24, r28
     644:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     648:	88 23       	and	r24, r24
     64a:	29 f0       	breq	.+10     	; 0x656 <TWI_receive_16bit+0x3e>
		return TWSR & 0xF8;
     64c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     650:	88 7f       	andi	r24, 0xF8	; 248
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	1b c0       	rjmp	.+54     	; 0x68c <TWI_receive_16bit+0x74>
	}

	if (TWI_start()!= 0){
     656:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     65a:	88 23       	and	r24, r24
     65c:	29 f0       	breq	.+10     	; 0x668 <TWI_receive_16bit+0x50>
		return TWSR & 0xF8;
     65e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     662:	88 7f       	andi	r24, 0xF8	; 248
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	12 c0       	rjmp	.+36     	; 0x68c <TWI_receive_16bit+0x74>
	}
	
	if (TWI_address(1) != 0){
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     66e:	88 23       	and	r24, r24
     670:	29 f0       	breq	.+10     	; 0x67c <TWI_receive_16bit+0x64>
		return TWSR & 0xF8;
     672:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     676:	88 7f       	andi	r24, 0xF8	; 248
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	08 c0       	rjmp	.+16     	; 0x68c <TWI_receive_16bit+0x74>
	}


	uint16_t data = 0;
	data = TWI_receive_ack()<<8;
     67c:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
	data = TWI_receive_nack();
     680:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
		return TWSR & 0xF8;
	}
}

void TWI_stop(){
	TWCR =	(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     684:	94 e9       	ldi	r25, 0x94	; 148
     686:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	uint16_t data = 0;
	data = TWI_receive_ack()<<8;
	data = TWI_receive_nack();
	TWI_stop();
	return data;
     68a:	90 e0       	ldi	r25, 0x00	; 0
}
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <select_sensitivity_gyro>:
	
	return register_value;
}

uint8_t select_sensitivity_gyro(uint8_t sensitivity){
	switch (sensitivity){
     690:	82 30       	cpi	r24, 0x02	; 2
     692:	c1 f0       	breq	.+48     	; 0x6c4 <select_sensitivity_gyro+0x34>
     694:	18 f4       	brcc	.+6      	; 0x69c <select_sensitivity_gyro+0xc>
     696:	81 30       	cpi	r24, 0x01	; 1
     698:	31 f0       	breq	.+12     	; 0x6a6 <select_sensitivity_gyro+0x16>
     69a:	44 c0       	rjmp	.+136    	; 0x724 <select_sensitivity_gyro+0x94>
     69c:	83 30       	cpi	r24, 0x03	; 3
     69e:	11 f1       	breq	.+68     	; 0x6e4 <select_sensitivity_gyro+0x54>
     6a0:	84 30       	cpi	r24, 0x04	; 4
     6a2:	81 f1       	breq	.+96     	; 0x704 <select_sensitivity_gyro+0x74>
     6a4:	3f c0       	rjmp	.+126    	; 0x724 <select_sensitivity_gyro+0x94>
		//Full scale: 250 deg/s
		case 1: sensitivity_gyro = 131.0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	a3 e0       	ldi	r26, 0x03	; 3
     6ac:	b3 e4       	ldi	r27, 0x43	; 67
     6ae:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <sensitivity_gyro>
     6b2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <sensitivity_gyro+0x1>
     6b6:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <sensitivity_gyro+0x2>
     6ba:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <sensitivity_gyro+0x3>
				sensitivity_gyro_register = 0;
     6be:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <sensitivity_gyro_register>
				break;
     6c2:	40 c0       	rjmp	.+128    	; 0x744 <select_sensitivity_gyro+0xb4>
		//Full scale: 500 deg/s
		case 2: sensitivity_gyro = 65.5;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	a3 e8       	ldi	r26, 0x83	; 131
     6ca:	b2 e4       	ldi	r27, 0x42	; 66
     6cc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <sensitivity_gyro>
     6d0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <sensitivity_gyro+0x1>
     6d4:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <sensitivity_gyro+0x2>
     6d8:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <sensitivity_gyro+0x3>
				sensitivity_gyro_register = 0b00001000;
     6dc:	88 e0       	ldi	r24, 0x08	; 8
     6de:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <sensitivity_gyro_register>
				break;
     6e2:	30 c0       	rjmp	.+96     	; 0x744 <select_sensitivity_gyro+0xb4>
		//Full scale: 1000 deg/s
		case 3: sensitivity_gyro = 32.8;
     6e4:	83 e3       	ldi	r24, 0x33	; 51
     6e6:	93 e3       	ldi	r25, 0x33	; 51
     6e8:	a3 e0       	ldi	r26, 0x03	; 3
     6ea:	b2 e4       	ldi	r27, 0x42	; 66
     6ec:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <sensitivity_gyro>
     6f0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <sensitivity_gyro+0x1>
     6f4:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <sensitivity_gyro+0x2>
     6f8:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <sensitivity_gyro+0x3>
				sensitivity_gyro_register = 0b00010000;
     6fc:	80 e1       	ldi	r24, 0x10	; 16
     6fe:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <sensitivity_gyro_register>
				break;
     702:	20 c0       	rjmp	.+64     	; 0x744 <select_sensitivity_gyro+0xb4>
		//Full scale: 2000 deg/s
		case 4: sensitivity_gyro = 16.4;
     704:	83 e3       	ldi	r24, 0x33	; 51
     706:	93 e3       	ldi	r25, 0x33	; 51
     708:	a3 e8       	ldi	r26, 0x83	; 131
     70a:	b1 e4       	ldi	r27, 0x41	; 65
     70c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <sensitivity_gyro>
     710:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <sensitivity_gyro+0x1>
     714:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <sensitivity_gyro+0x2>
     718:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <sensitivity_gyro+0x3>
				sensitivity_gyro_register = 0b00011000;
     71c:	88 e1       	ldi	r24, 0x18	; 24
     71e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <sensitivity_gyro_register>
				break;
     722:	10 c0       	rjmp	.+32     	; 0x744 <select_sensitivity_gyro+0xb4>
		default:
				USART_Transmit(sensitivity_gyro);
     724:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <sensitivity_gyro>
     728:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <sensitivity_gyro+0x1>
     72c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <sensitivity_gyro+0x2>
     730:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <sensitivity_gyro+0x3>
     734:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     738:	86 2f       	mov	r24, r22
     73a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
				USART_Transmit('\n');
     73e:	8a e0       	ldi	r24, 0x0A	; 10
     740:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	}
	return (uint8_t) sensitivity_gyro;
     744:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <sensitivity_gyro>
     748:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <sensitivity_gyro+0x1>
     74c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <sensitivity_gyro+0x2>
     750:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <sensitivity_gyro+0x3>
     754:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     758:	86 2f       	mov	r24, r22
}
     75a:	08 95       	ret

0000075c <select_sensitivity_acc>:

uint8_t select_sensitivity_acc(uint8_t sensitivity){
	switch (sensitivity){
     75c:	82 30       	cpi	r24, 0x02	; 2
     75e:	91 f0       	breq	.+36     	; 0x784 <select_sensitivity_acc+0x28>
     760:	18 f4       	brcc	.+6      	; 0x768 <select_sensitivity_acc+0xc>
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	31 f0       	breq	.+12     	; 0x772 <select_sensitivity_acc+0x16>
     766:	2c c0       	rjmp	.+88     	; 0x7c0 <select_sensitivity_acc+0x64>
     768:	83 30       	cpi	r24, 0x03	; 3
     76a:	b1 f0       	breq	.+44     	; 0x798 <select_sensitivity_acc+0x3c>
     76c:	84 30       	cpi	r24, 0x04	; 4
     76e:	f1 f0       	breq	.+60     	; 0x7ac <select_sensitivity_acc+0x50>
     770:	27 c0       	rjmp	.+78     	; 0x7c0 <select_sensitivity_acc+0x64>
		//Full scale: 2 g
		case 1: sensitivity_acc = 16384;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e4       	ldi	r25, 0x40	; 64
     776:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <sensitivity_acc+0x1>
     77a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sensitivity_acc>
				sensitivity_acc_register = 0;
     77e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <sensitivity_acc_register>
				break;
     782:	25 c0       	rjmp	.+74     	; 0x7ce <select_sensitivity_acc+0x72>
		//Full scale: 4 g
		case 2: sensitivity_acc = 8192;
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e2       	ldi	r25, 0x20	; 32
     788:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <sensitivity_acc+0x1>
     78c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sensitivity_acc>
				sensitivity_acc_register = 0b00001000;
     790:	88 e0       	ldi	r24, 0x08	; 8
     792:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <sensitivity_acc_register>
				break;
     796:	1b c0       	rjmp	.+54     	; 0x7ce <select_sensitivity_acc+0x72>
		//Full scale: 8 g
		case 3: sensitivity_acc = 4096;
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e1       	ldi	r25, 0x10	; 16
     79c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <sensitivity_acc+0x1>
     7a0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sensitivity_acc>
				sensitivity_acc_register = 0b00010000;
     7a4:	80 e1       	ldi	r24, 0x10	; 16
     7a6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <sensitivity_acc_register>
				break;
     7aa:	11 c0       	rjmp	.+34     	; 0x7ce <select_sensitivity_acc+0x72>
		//Full scale: 16 g
		case 4: sensitivity_acc = 2048;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	98 e0       	ldi	r25, 0x08	; 8
     7b0:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <sensitivity_acc+0x1>
     7b4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sensitivity_acc>
				sensitivity_acc_register = 0b00011000;
     7b8:	88 e1       	ldi	r24, 0x18	; 24
     7ba:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <sensitivity_acc_register>
				break;
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <select_sensitivity_acc+0x72>
		default:
				USART_Transmit(sensitivity_acc);
     7c0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sensitivity_acc>
     7c4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
				USART_Transmit('\n');
     7c8:	8a e0       	ldi	r24, 0x0A	; 10
     7ca:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	}
	return (uint8_t) sensitivity_acc;
}
     7ce:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sensitivity_acc>
     7d2:	08 95       	ret

000007d4 <read_acceleration>:

int8_t read_acceleration(uint8_t calibrate_acc){
     7d4:	cf 93       	push	r28
     7d6:	c8 2f       	mov	r28, r24
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     7d8:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     7dc:	81 11       	cpse	r24, r1
     7de:	95 c0       	rjmp	.+298    	; 0x90a <read_acceleration+0x136>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     7e0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     7e4:	81 11       	cpse	r24, r1
     7e6:	93 c0       	rjmp	.+294    	; 0x90e <read_acceleration+0x13a>
		return -1;
	}

	if (TWI_send(0x3B) != 0){
     7e8:	8b e3       	ldi	r24, 0x3B	; 59
     7ea:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     7ee:	81 11       	cpse	r24, r1
     7f0:	90 c0       	rjmp	.+288    	; 0x912 <read_acceleration+0x13e>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     7f2:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     7f6:	81 11       	cpse	r24, r1
     7f8:	8e c0       	rjmp	.+284    	; 0x916 <read_acceleration+0x142>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     800:	81 11       	cpse	r24, r1
     802:	8b c0       	rjmp	.+278    	; 0x91a <read_acceleration+0x146>
	acceleration.acceleration_y = TWI_receive_ack() << 8;
	acceleration.acceleration_y = acceleration.acceleration_y | TWI_receive_ack();
	acceleration.acceleration_z = TWI_receive_ack() << 8;
	acceleration.acceleration_z = acceleration.acceleration_z | TWI_receive_nack();*/

	acceleration_x = TWI_receive_ack() << 8;
     804:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	98 2f       	mov	r25, r24
     80c:	88 27       	eor	r24, r24
     80e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <acceleration_x+0x1>
     812:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <acceleration_x>
	acceleration_x = acceleration_x | TWI_receive_ack();
     816:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     81a:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <acceleration_x>
     81e:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <acceleration_x+0x1>
     822:	28 2b       	or	r18, r24
     824:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <acceleration_x+0x1>
     828:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <acceleration_x>
	acceleration_y = TWI_receive_ack() << 8;
     82c:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	98 2f       	mov	r25, r24
     834:	88 27       	eor	r24, r24
     836:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <acceleration_y+0x1>
     83a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <acceleration_y>
	acceleration_y = acceleration_y | TWI_receive_ack();
     83e:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     842:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <acceleration_y>
     846:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <acceleration_y+0x1>
     84a:	28 2b       	or	r18, r24
     84c:	30 93 62 01 	sts	0x0162, r19	; 0x800162 <acceleration_y+0x1>
     850:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <acceleration_y>
	acceleration_z = TWI_receive_ack() << 8;
     854:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	98 2f       	mov	r25, r24
     85c:	88 27       	eor	r24, r24
     85e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <acceleration_z+0x1>
     862:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <acceleration_z>
	acceleration_z = acceleration_z | TWI_receive_nack();
     866:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
     86a:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <acceleration_z>
     86e:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <acceleration_z+0x1>
     872:	28 2b       	or	r18, r24
     874:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <acceleration_z+0x1>
     878:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <acceleration_z>
	TWI_stop();
     87c:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_stop>
	
	if (calibrate_acc == 1)
     880:	c1 30       	cpi	r28, 0x01	; 1
     882:	09 f0       	breq	.+2      	; 0x886 <read_acceleration+0xb2>
     884:	4c c0       	rjmp	.+152    	; 0x91e <read_acceleration+0x14a>
	{

		acceleration_x = acceleration_x - x_offset_acc;
     886:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <acceleration_x>
     88a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <acceleration_x+0x1>
     88e:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <x_offset_acc>
     892:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <x_offset_acc+0x1>
     896:	82 1b       	sub	r24, r18
     898:	93 0b       	sbc	r25, r19
     89a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <acceleration_x+0x1>
     89e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <acceleration_x>
		
		acceleration_y = acceleration_y - y_offset_acc;
     8a2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <acceleration_y>
     8a6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <acceleration_y+0x1>
     8aa:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <y_offset_acc>
     8ae:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <y_offset_acc+0x1>
     8b2:	82 1b       	sub	r24, r18
     8b4:	93 0b       	sbc	r25, r19
     8b6:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <acceleration_y+0x1>
     8ba:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <acceleration_y>

		
		if (acceleration_z > z_offset_acc)
     8be:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <acceleration_z>
     8c2:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <acceleration_z+0x1>
     8c6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     8ca:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     8ce:	82 17       	cp	r24, r18
     8d0:	93 07       	cpc	r25, r19
     8d2:	6c f4       	brge	.+26     	; 0x8ee <read_acceleration+0x11a>
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
     8d4:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <acceleration_z>
     8d8:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <acceleration_z+0x1>
     8dc:	30 52       	subi	r19, 0x20	; 32
     8de:	82 0f       	add	r24, r18
     8e0:	93 1f       	adc	r25, r19
     8e2:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <acceleration_z+0x1>
     8e6:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <acceleration_z>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	19 c0       	rjmp	.+50     	; 0x920 <read_acceleration+0x14c>
		
		if (acceleration_z > z_offset_acc)
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
			}else{
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
     8ee:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <acceleration_z>
     8f2:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <acceleration_z+0x1>
     8f6:	30 5e       	subi	r19, 0xE0	; 224
     8f8:	a9 01       	movw	r20, r18
     8fa:	48 1b       	sub	r20, r24
     8fc:	59 0b       	sbc	r21, r25
     8fe:	50 93 73 01 	sts	0x0173, r21	; 0x800173 <acceleration_z+0x1>
     902:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <acceleration_z>
		}
		
	}
	
	return 0;
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	0b c0       	rjmp	.+22     	; 0x920 <read_acceleration+0x14c>
}

int8_t read_acceleration(uint8_t calibrate_acc){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	09 c0       	rjmp	.+18     	; 0x920 <read_acceleration+0x14c>
	}
	
	if (TWI_address(0) != 0){
		return -1;
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	07 c0       	rjmp	.+14     	; 0x920 <read_acceleration+0x14c>
	}

	if (TWI_send(0x3B) != 0){
		return -1;
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	05 c0       	rjmp	.+10     	; 0x920 <read_acceleration+0x14c>
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	03 c0       	rjmp	.+6      	; 0x920 <read_acceleration+0x14c>
	}
	
	if (TWI_address(1) != 0){
		return -1;
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	01 c0       	rjmp	.+2      	; 0x920 <read_acceleration+0x14c>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     91e:	80 e0       	ldi	r24, 0x00	; 0
}
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <read_gyroscope>:

int8_t read_gyroscope(uint8_t calibrate_gyro){
     924:	cf 93       	push	r28
     926:	c8 2f       	mov	r28, r24
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     928:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     92c:	81 11       	cpse	r24, r1
     92e:	7e c0       	rjmp	.+252    	; 0xa2c <read_gyroscope+0x108>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     930:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     934:	81 11       	cpse	r24, r1
     936:	7c c0       	rjmp	.+248    	; 0xa30 <read_gyroscope+0x10c>
		return -1;
	}

	if (TWI_send(0x43) != 0){
     938:	83 e4       	ldi	r24, 0x43	; 67
     93a:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     93e:	81 11       	cpse	r24, r1
     940:	79 c0       	rjmp	.+242    	; 0xa34 <read_gyroscope+0x110>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     942:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     946:	81 11       	cpse	r24, r1
     948:	77 c0       	rjmp	.+238    	; 0xa38 <read_gyroscope+0x114>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     950:	81 11       	cpse	r24, r1
     952:	74 c0       	rjmp	.+232    	; 0xa3c <read_gyroscope+0x118>
	gyroscope.gyroscope_y = TWI_receive_ack() << 8;
	gyroscope.gyroscope_y = gyroscope.gyroscope_y | TWI_receive_ack();
	gyroscope.gyroscope_z = TWI_receive_ack() << 8;
	gyroscope.gyroscope_z = gyroscope.gyroscope_z | TWI_receive_nack();*/

	gyroscope_x = TWI_receive_ack() << 8;
     954:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	98 2f       	mov	r25, r24
     95c:	88 27       	eor	r24, r24
     95e:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <gyroscope_x+0x1>
     962:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <gyroscope_x>
	gyroscope_x = gyroscope_x | TWI_receive_ack();
     966:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     96a:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <gyroscope_x>
     96e:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <gyroscope_x+0x1>
     972:	28 2b       	or	r18, r24
     974:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <gyroscope_x+0x1>
     978:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <gyroscope_x>
	gyroscope_y = TWI_receive_ack() << 8;
     97c:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	98 2f       	mov	r25, r24
     984:	88 27       	eor	r24, r24
     986:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <gyroscope_y+0x1>
     98a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <gyroscope_y>
	gyroscope_y = gyroscope_y | TWI_receive_ack();
     98e:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     992:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <gyroscope_y>
     996:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <gyroscope_y+0x1>
     99a:	28 2b       	or	r18, r24
     99c:	30 93 60 01 	sts	0x0160, r19	; 0x800160 <gyroscope_y+0x1>
     9a0:	20 93 5f 01 	sts	0x015F, r18	; 0x80015f <gyroscope_y>
	gyroscope_z = TWI_receive_ack() << 8;
     9a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	98 2f       	mov	r25, r24
     9ac:	88 27       	eor	r24, r24
     9ae:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <gyroscope_z+0x1>
     9b2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <gyroscope_z>
	gyroscope_z = gyroscope_z | TWI_receive_nack();
     9b6:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
     9ba:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <gyroscope_z>
     9be:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <gyroscope_z+0x1>
     9c2:	28 2b       	or	r18, r24
     9c4:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <gyroscope_z+0x1>
     9c8:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <gyroscope_z>
	
		if (calibrate_gyro == 1)
     9cc:	c1 30       	cpi	r28, 0x01	; 1
     9ce:	51 f5       	brne	.+84     	; 0xa24 <read_gyroscope+0x100>
		{
			gyroscope_x = gyroscope_x - x_offset_gyro;
     9d0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <gyroscope_x>
     9d4:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <gyroscope_x+0x1>
     9d8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <x_offset_gyro>
     9dc:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <x_offset_gyro+0x1>
     9e0:	82 1b       	sub	r24, r18
     9e2:	93 0b       	sbc	r25, r19
     9e4:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <gyroscope_x+0x1>
     9e8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <gyroscope_x>
			gyroscope_y = gyroscope_y - y_offset_gyro;
     9ec:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <gyroscope_y>
     9f0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <gyroscope_y+0x1>
     9f4:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <y_offset_gyro>
     9f8:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <y_offset_gyro+0x1>
     9fc:	82 1b       	sub	r24, r18
     9fe:	93 0b       	sbc	r25, r19
     a00:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <gyroscope_y+0x1>
     a04:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <gyroscope_y>
			gyroscope_z = gyroscope_z - z_offset_gyro;	
     a08:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <gyroscope_z>
     a0c:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyroscope_z+0x1>
     a10:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <z_offset_gyro>
     a14:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <z_offset_gyro+0x1>
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <gyroscope_z+0x1>
     a20:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <gyroscope_z>
		}

	
	TWI_stop();
     a24:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_stop>
	
	return 0;
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <read_gyroscope+0x11a>
}

int8_t read_gyroscope(uint8_t calibrate_gyro){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	07 c0       	rjmp	.+14     	; 0xa3e <read_gyroscope+0x11a>
	}
	
	if (TWI_address(0) != 0){
		return -1;
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <read_gyroscope+0x11a>
	}

	if (TWI_send(0x43) != 0){
		return -1;
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <read_gyroscope+0x11a>
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <read_gyroscope+0x11a>
	}
	
	if (TWI_address(1) != 0){
		return -1;
     a3c:	8f ef       	ldi	r24, 0xFF	; 255

	
	TWI_stop();
	
	return 0;
}
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <IMU_Init>:
int16_t z_offset_acc = 0;

int8_t IMU_Init(){
	uint8_t register_value;
	
	select_sensitivity_gyro(2);
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	0e 94 48 03 	call	0x690	; 0x690 <select_sensitivity_gyro>
	select_sensitivity_acc(2);
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	0e 94 ae 03 	call	0x75c	; 0x75c <select_sensitivity_acc>
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
     a4e:	62 e0       	ldi	r22, 0x02	; 2
     a50:	8a e1       	ldi	r24, 0x1A	; 26
     a52:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a56:	81 11       	cpse	r24, r1
     a58:	79 c0       	rjmp	.+242    	; 0xb4c <__stack+0x4d>
	{
		return -1;
	}
	register_value = sensitivity_gyro_register; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
     a5a:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <sensitivity_gyro_register>
     a5e:	8b e1       	ldi	r24, 0x1B	; 27
     a60:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a64:	81 11       	cpse	r24, r1
     a66:	74 c0       	rjmp	.+232    	; 0xb50 <__stack+0x51>
	{
		return -1;
	}
	register_value = sensitivity_acc_register; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
     a68:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <sensitivity_acc_register>
     a6c:	8c e1       	ldi	r24, 0x1C	; 28
     a6e:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a72:	81 11       	cpse	r24, r1
     a74:	6f c0       	rjmp	.+222    	; 0xb54 <__stack+0x55>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	83 e2       	ldi	r24, 0x23	; 35
     a7a:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a7e:	81 11       	cpse	r24, r1
     a80:	6b c0       	rjmp	.+214    	; 0xb58 <__stack+0x59>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	84 e2       	ldi	r24, 0x24	; 36
     a86:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a8a:	81 11       	cpse	r24, r1
     a8c:	67 c0       	rjmp	.+206    	; 0xb5c <__stack+0x5d>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	87 e3       	ldi	r24, 0x37	; 55
     a92:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a96:	81 11       	cpse	r24, r1
     a98:	63 c0       	rjmp	.+198    	; 0xb60 <__stack+0x61>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	88 e3       	ldi	r24, 0x38	; 56
     a9e:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     aa2:	81 11       	cpse	r24, r1
     aa4:	5f c0       	rjmp	.+190    	; 0xb64 <__stack+0x65>
	{
		return -1;
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	8a e6       	ldi	r24, 0x6A	; 106
     aaa:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     aae:	81 11       	cpse	r24, r1
     ab0:	5b c0       	rjmp	.+182    	; 0xb68 <__stack+0x69>
	{
		return -1;
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	8b e6       	ldi	r24, 0x6B	; 107
     ab6:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     aba:	81 11       	cpse	r24, r1
     abc:	57 c0       	rjmp	.+174    	; 0xb6c <__stack+0x6d>
	{
		return -1;
	}
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
     abe:	85 e7       	ldi	r24, 0x75	; 117
     ac0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_receive_8bit>
	
	if (register_value != 0x68)
     ac4:	88 36       	cpi	r24, 0x68	; 104
     ac6:	09 f0       	breq	.+2      	; 0xaca <IMU_Init+0x88>
     ac8:	53 c0       	rjmp	.+166    	; 0xb70 <__stack+0x71>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aca:	2f ef       	ldi	r18, 0xFF	; 255
     acc:	83 ec       	ldi	r24, 0xC3	; 195
     ace:	99 e0       	ldi	r25, 0x09	; 9
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	80 40       	sbci	r24, 0x00	; 0
     ad4:	90 40       	sbci	r25, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <IMU_Init+0x8e>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <IMU_Init+0x98>
     ada:	00 00       	nop
		return -2;
	}
	
	_delay_ms(200);
	
	read_acceleration(0);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <read_acceleration>
	x_offset_acc = acceleration_x;
     ae2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <acceleration_x>
     ae6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <acceleration_x+0x1>
     aea:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <x_offset_acc+0x1>
     aee:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <x_offset_acc>
	y_offset_acc = acceleration_y;
     af2:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <acceleration_y>
     af6:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <acceleration_y+0x1>
     afa:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <y_offset_acc+0x1>
     afe:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <y_offset_acc>
	z_offset_acc = acceleration_z;
     b02:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <acceleration_z>
     b06:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <acceleration_z+0x1>
     b0a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
     b0e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	
	read_gyroscope(0);
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	0e 94 92 04 	call	0x924	; 0x924 <read_gyroscope>
	x_offset_gyro = gyroscope_x;
     b18:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <gyroscope_x>
     b1c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <gyroscope_x+0x1>
     b20:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <x_offset_gyro+0x1>
     b24:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <x_offset_gyro>
	y_offset_gyro = gyroscope_y;
     b28:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <gyroscope_y>
     b2c:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <gyroscope_y+0x1>
     b30:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <y_offset_gyro+0x1>
     b34:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <y_offset_gyro>
	z_offset_gyro = gyroscope_z;
     b38:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <gyroscope_z>
     b3c:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <gyroscope_z+0x1>
     b40:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <z_offset_gyro+0x1>
     b44:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <z_offset_gyro>
	
	return register_value;
     b48:	88 e6       	ldi	r24, 0x68	; 104
     b4a:	08 95       	ret
	select_sensitivity_acc(2);
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
	{
		return -1;
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	08 95       	ret
	}
	register_value = sensitivity_gyro_register; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
	{
		return -1;
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	08 95       	ret
	}
	register_value = sensitivity_acc_register; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
	{
		return -1;
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	08 95       	ret
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
	{
		return -1;
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	08 95       	ret
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
	{
		return -1;
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
	{
		return -1;
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
	{
		return -1;
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	08 95       	ret
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
	{
		return -1;
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	08 95       	ret
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
	{
		return -1;
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	08 95       	ret
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
	
	if (register_value != 0x68)
	{
		return -2;
     b70:	8e ef       	ldi	r24, 0xFE	; 254
	x_offset_gyro = gyroscope_x;
	y_offset_gyro = gyroscope_y;
	z_offset_gyro = gyroscope_z;
	
	return register_value;
}
     b72:	08 95       	ret

00000b74 <IMU_who_i_am>:
	TWI_stop();
	
	return 0;
}

uint8_t IMU_who_i_am(uint8_t print){
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	d8 2f       	mov	r29, r24
	uint8_t whoiam = TWI_receive_8bit(0x75);
     b7a:	85 e7       	ldi	r24, 0x75	; 117
     b7c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_receive_8bit>
     b80:	c8 2f       	mov	r28, r24
	
	if (print == 1)
     b82:	d1 30       	cpi	r29, 0x01	; 1
     b84:	29 f4       	brne	.+10     	; 0xb90 <IMU_who_i_am+0x1c>
	{
		USART_Transmit(whoiam);
     b86:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit('\n');
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	}
	
	return whoiam;
}
     b90:	8c 2f       	mov	r24, r28
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <temperature>:

int8_t temperature(uint8_t print){
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	d8 2f       	mov	r29, r24
	int8_t temperature_read = (((float) TWI_receive_16bit(0x3b))/340 + 36.53);
     b9e:	8b e3       	ldi	r24, 0x3B	; 59
     ba0:	0e 94 0c 03 	call	0x618	; 0x618 <TWI_receive_16bit>
     ba4:	bc 01       	movw	r22, r24
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a ea       	ldi	r20, 0xAA	; 170
     bb4:	53 e4       	ldi	r21, 0x43	; 67
     bb6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     bba:	28 eb       	ldi	r18, 0xB8	; 184
     bbc:	3e e1       	ldi	r19, 0x1E	; 30
     bbe:	42 e1       	ldi	r20, 0x12	; 18
     bc0:	52 e4       	ldi	r21, 0x42	; 66
     bc2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     bc6:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__fixsfsi>
     bca:	c6 2f       	mov	r28, r22
	
	if (print == 1)
     bcc:	d1 30       	cpi	r29, 0x01	; 1
     bce:	31 f4       	brne	.+12     	; 0xbdc <temperature+0x44>
	{
		USART_Transmit(temperature_read);
     bd0:	86 2f       	mov	r24, r22
     bd2:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit('\n');
     bd6:	8a e0       	ldi	r24, 0x0A	; 10
     bd8:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	}
	
	return temperature_read;
}
     bdc:	8c 2f       	mov	r24, r28
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <computed_acceleration>:

void computed_acceleration(uint8_t print){
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	c8 2f       	mov	r28, r24
	accx = ((float) acceleration_x / (float)sensitivity_acc) * 98.1;
     bf4:	00 91 74 01 	lds	r16, 0x0174	; 0x800174 <acceleration_x>
     bf8:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <acceleration_x+0x1>
     bfc:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <sensitivity_acc>
     c00:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <sensitivity_acc+0x1>
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
     c0c:	6b 01       	movw	r12, r22
     c0e:	7c 01       	movw	r14, r24
     c10:	b8 01       	movw	r22, r16
     c12:	11 0f       	add	r17, r17
     c14:	88 0b       	sbc	r24, r24
     c16:	99 0b       	sbc	r25, r25
     c18:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__floatsisf>
     c1c:	a7 01       	movw	r20, r14
     c1e:	96 01       	movw	r18, r12
     c20:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     c24:	23 e3       	ldi	r18, 0x33	; 51
     c26:	33 e3       	ldi	r19, 0x33	; 51
     c28:	44 ec       	ldi	r20, 0xC4	; 196
     c2a:	52 e4       	ldi	r21, 0x42	; 66
     c2c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     c30:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <accx>
     c34:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <accx+0x1>
     c38:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <accx+0x2>
     c3c:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <accx+0x3>
	accy = ((float) acceleration_y / (float)sensitivity_acc) * 98.1;
     c40:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <acceleration_y>
     c44:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <acceleration_y+0x1>
     c48:	07 2e       	mov	r0, r23
     c4a:	00 0c       	add	r0, r0
     c4c:	88 0b       	sbc	r24, r24
     c4e:	99 0b       	sbc	r25, r25
     c50:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__floatsisf>
     c54:	a7 01       	movw	r20, r14
     c56:	96 01       	movw	r18, r12
     c58:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     c5c:	23 e3       	ldi	r18, 0x33	; 51
     c5e:	33 e3       	ldi	r19, 0x33	; 51
     c60:	44 ec       	ldi	r20, 0xC4	; 196
     c62:	52 e4       	ldi	r21, 0x42	; 66
     c64:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     c68:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <accy>
     c6c:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <accy+0x1>
     c70:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <accy+0x2>
     c74:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <accy+0x3>
	accz = ((float) acceleration_z / (float)sensitivity_acc) * 98.1;
     c78:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <acceleration_z>
     c7c:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <acceleration_z+0x1>
     c80:	07 2e       	mov	r0, r23
     c82:	00 0c       	add	r0, r0
     c84:	88 0b       	sbc	r24, r24
     c86:	99 0b       	sbc	r25, r25
     c88:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__floatsisf>
     c8c:	a7 01       	movw	r20, r14
     c8e:	96 01       	movw	r18, r12
     c90:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     c94:	23 e3       	ldi	r18, 0x33	; 51
     c96:	33 e3       	ldi	r19, 0x33	; 51
     c98:	44 ec       	ldi	r20, 0xC4	; 196
     c9a:	52 e4       	ldi	r21, 0x42	; 66
     c9c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     ca0:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <accz>
     ca4:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <accz+0x1>
     ca8:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <accz+0x2>
     cac:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <accz+0x3>
	
	if (print == 1)
     cb0:	c1 30       	cpi	r28, 0x01	; 1
     cb2:	51 f5       	brne	.+84     	; 0xd08 <computed_acceleration+0x124>
	{
		USART_Transmit((uint8_t)accx);
     cb4:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <accx>
     cb8:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <accx+0x1>
     cbc:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <accx+0x2>
     cc0:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <accx+0x3>
     cc4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     cc8:	86 2f       	mov	r24, r22
     cca:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit((uint8_t)accy);
     cce:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <accy>
     cd2:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <accy+0x1>
     cd6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <accy+0x2>
     cda:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <accy+0x3>
     cde:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     ce2:	86 2f       	mov	r24, r22
     ce4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit((uint8_t)accz);
     ce8:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <accz>
     cec:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <accz+0x1>
     cf0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <accz+0x2>
     cf4:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <accz+0x3>
     cf8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     cfc:	86 2f       	mov	r24, r22
     cfe:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit('\n');
     d02:	8a e0       	ldi	r24, 0x0A	; 10
     d04:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	}
}
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	08 95       	ret

00000d18 <computed_gyroscope>:

void computed_gyroscope(uint8_t print){
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	cf 93       	push	r28
     d22:	c8 2f       	mov	r28, r24
	gyrox = ((float) gyroscope_x / sensitivity_gyro);
     d24:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <gyroscope_x>
     d28:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <gyroscope_x+0x1>
     d2c:	c0 90 25 01 	lds	r12, 0x0125	; 0x800125 <sensitivity_gyro>
     d30:	d0 90 26 01 	lds	r13, 0x0126	; 0x800126 <sensitivity_gyro+0x1>
     d34:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <sensitivity_gyro+0x2>
     d38:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <sensitivity_gyro+0x3>
     d3c:	07 2e       	mov	r0, r23
     d3e:	00 0c       	add	r0, r0
     d40:	88 0b       	sbc	r24, r24
     d42:	99 0b       	sbc	r25, r25
     d44:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__floatsisf>
     d48:	a7 01       	movw	r20, r14
     d4a:	96 01       	movw	r18, r12
     d4c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     d50:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <gyrox>
     d54:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <gyrox+0x1>
     d58:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <gyrox+0x2>
     d5c:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <gyrox+0x3>
	gyroy = ((float) gyroscope_y / sensitivity_gyro);
     d60:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <gyroscope_y>
     d64:	70 91 60 01 	lds	r23, 0x0160	; 0x800160 <gyroscope_y+0x1>
     d68:	07 2e       	mov	r0, r23
     d6a:	00 0c       	add	r0, r0
     d6c:	88 0b       	sbc	r24, r24
     d6e:	99 0b       	sbc	r25, r25
     d70:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__floatsisf>
     d74:	a7 01       	movw	r20, r14
     d76:	96 01       	movw	r18, r12
     d78:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     d7c:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <gyroy>
     d80:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <gyroy+0x1>
     d84:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <gyroy+0x2>
     d88:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <gyroy+0x3>
	gyroz = ((float) gyroscope_z / sensitivity_gyro);
     d8c:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <gyroscope_z>
     d90:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <gyroscope_z+0x1>
     d94:	07 2e       	mov	r0, r23
     d96:	00 0c       	add	r0, r0
     d98:	88 0b       	sbc	r24, r24
     d9a:	99 0b       	sbc	r25, r25
     d9c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__floatsisf>
     da0:	a7 01       	movw	r20, r14
     da2:	96 01       	movw	r18, r12
     da4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     da8:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <gyroz>
     dac:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <gyroz+0x1>
     db0:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <gyroz+0x2>
     db4:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <gyroz+0x3>
	
	if (print == 1)
     db8:	c1 30       	cpi	r28, 0x01	; 1
     dba:	51 f5       	brne	.+84     	; 0xe10 <computed_gyroscope+0xf8>
	{
		USART_Transmit((uint8_t)gyrox);
     dbc:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <gyrox>
     dc0:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <gyrox+0x1>
     dc4:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <gyrox+0x2>
     dc8:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <gyrox+0x3>
     dcc:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     dd0:	86 2f       	mov	r24, r22
     dd2:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit((uint8_t)gyroy);
     dd6:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <gyroy>
     dda:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <gyroy+0x1>
     dde:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gyroy+0x2>
     de2:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <gyroy+0x3>
     de6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     dea:	86 2f       	mov	r24, r22
     dec:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit((uint8_t)gyroz);
     df0:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <gyroz>
     df4:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <gyroz+0x1>
     df8:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <gyroz+0x2>
     dfc:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <gyroz+0x3>
     e00:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
     e04:	86 2f       	mov	r24, r22
     e06:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit('\n');
     e0a:	8a e0       	ldi	r24, 0x0A	; 10
     e0c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	}
}
     e10:	cf 91       	pop	r28
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	08 95       	ret

00000e1c <compute_angle_acc>:

void compute_angle_acc(uint8_t print){
     e1c:	4f 92       	push	r4
     e1e:	5f 92       	push	r5
     e20:	6f 92       	push	r6
     e22:	7f 92       	push	r7
     e24:	8f 92       	push	r8
     e26:	9f 92       	push	r9
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	2d 97       	sbiw	r28, 0x0d	; 13
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	8d 87       	std	Y+13, r24	; 0x0d
	
	Angle_X_Acc = (int8_t) (atan(accx/((float)sqrt(accy*accy+accz*accz)))*180.0/3.1415); //transform from radiants to degree
     e4a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <accx>
     e4e:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <accx+0x1>
     e52:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <accx+0x2>
     e56:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <accx+0x3>
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	af 83       	std	Y+7, r26	; 0x07
     e60:	b8 87       	std	Y+8, r27	; 0x08
     e62:	c0 90 63 01 	lds	r12, 0x0163	; 0x800163 <accy>
     e66:	d0 90 64 01 	lds	r13, 0x0164	; 0x800164 <accy+0x1>
     e6a:	e0 90 65 01 	lds	r14, 0x0165	; 0x800165 <accy+0x2>
     e6e:	f0 90 66 01 	lds	r15, 0x0166	; 0x800166 <accy+0x3>
     e72:	80 90 63 01 	lds	r8, 0x0163	; 0x800163 <accy>
     e76:	90 90 64 01 	lds	r9, 0x0164	; 0x800164 <accy+0x1>
     e7a:	a0 90 65 01 	lds	r10, 0x0165	; 0x800165 <accy+0x2>
     e7e:	b0 90 66 01 	lds	r11, 0x0166	; 0x800166 <accy+0x3>
     e82:	40 90 77 01 	lds	r4, 0x0177	; 0x800177 <accz>
     e86:	50 90 78 01 	lds	r5, 0x0178	; 0x800178 <accz+0x1>
     e8a:	60 90 79 01 	lds	r6, 0x0179	; 0x800179 <accz+0x2>
     e8e:	70 90 7a 01 	lds	r7, 0x017A	; 0x80017a <accz+0x3>
     e92:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <accz>
     e96:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <accz+0x1>
     e9a:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <accz+0x2>
     e9e:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <accz+0x3>
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	ab 83       	std	Y+3, r26	; 0x03
     ea8:	bc 83       	std	Y+4, r27	; 0x04
     eaa:	a5 01       	movw	r20, r10
     eac:	94 01       	movw	r18, r8
     eae:	c7 01       	movw	r24, r14
     eb0:	b6 01       	movw	r22, r12
     eb2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     eb6:	69 87       	std	Y+9, r22	; 0x09
     eb8:	7a 87       	std	Y+10, r23	; 0x0a
     eba:	8b 87       	std	Y+11, r24	; 0x0b
     ebc:	9c 87       	std	Y+12, r25	; 0x0c
     ebe:	a5 01       	movw	r20, r10
     ec0:	94 01       	movw	r18, r8
     ec2:	c7 01       	movw	r24, r14
     ec4:	b6 01       	movw	r22, r12
     ec6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     eca:	6b 01       	movw	r12, r22
     ecc:	7c 01       	movw	r14, r24
     ece:	29 81       	ldd	r18, Y+1	; 0x01
     ed0:	3a 81       	ldd	r19, Y+2	; 0x02
     ed2:	4b 81       	ldd	r20, Y+3	; 0x03
     ed4:	5c 81       	ldd	r21, Y+4	; 0x04
     ed6:	c3 01       	movw	r24, r6
     ed8:	b2 01       	movw	r22, r4
     eda:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	c7 01       	movw	r24, r14
     ee4:	b6 01       	movw	r22, r12
     ee6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     eea:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <sqrt>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	6d 81       	ldd	r22, Y+5	; 0x05
     ef4:	7e 81       	ldd	r23, Y+6	; 0x06
     ef6:	8f 81       	ldd	r24, Y+7	; 0x07
     ef8:	98 85       	ldd	r25, Y+8	; 0x08
     efa:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     efe:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <atan>
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	44 e3       	ldi	r20, 0x34	; 52
     f08:	53 e4       	ldi	r21, 0x43	; 67
     f0a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     f0e:	26 e5       	ldi	r18, 0x56	; 86
     f10:	3e e0       	ldi	r19, 0x0E	; 14
     f12:	49 e4       	ldi	r20, 0x49	; 73
     f14:	50 e4       	ldi	r21, 0x40	; 64
     f16:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     f1a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__fixsfsi>
     f1e:	06 2e       	mov	r0, r22
     f20:	00 0c       	add	r0, r0
     f22:	77 0b       	sbc	r23, r23
     f24:	88 0b       	sbc	r24, r24
     f26:	99 0b       	sbc	r25, r25
     f28:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__floatsisf>
     f2c:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <Angle_X_Acc>
     f30:	70 93 68 01 	sts	0x0168, r23	; 0x800168 <Angle_X_Acc+0x1>
     f34:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <Angle_X_Acc+0x2>
     f38:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <Angle_X_Acc+0x3>
	Angle_Y_Acc = (int8_t) (atan(accy/((float)sqrt(accx*accx+accz*accz)))*180.0/3.1415); //transform from radiants to degree
     f3c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <accy>
     f40:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <accy+0x1>
     f44:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <accy+0x2>
     f48:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <accy+0x3>
     f4c:	8d 83       	std	Y+5, r24	; 0x05
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	af 83       	std	Y+7, r26	; 0x07
     f52:	b8 87       	std	Y+8, r27	; 0x08
     f54:	c0 90 7f 01 	lds	r12, 0x017F	; 0x80017f <accx>
     f58:	d0 90 80 01 	lds	r13, 0x0180	; 0x800180 <accx+0x1>
     f5c:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <accx+0x2>
     f60:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <accx+0x3>
     f64:	80 90 7f 01 	lds	r8, 0x017F	; 0x80017f <accx>
     f68:	90 90 80 01 	lds	r9, 0x0180	; 0x800180 <accx+0x1>
     f6c:	a0 90 81 01 	lds	r10, 0x0181	; 0x800181 <accx+0x2>
     f70:	b0 90 82 01 	lds	r11, 0x0182	; 0x800182 <accx+0x3>
     f74:	40 90 77 01 	lds	r4, 0x0177	; 0x800177 <accz>
     f78:	50 90 78 01 	lds	r5, 0x0178	; 0x800178 <accz+0x1>
     f7c:	60 90 79 01 	lds	r6, 0x0179	; 0x800179 <accz+0x2>
     f80:	70 90 7a 01 	lds	r7, 0x017A	; 0x80017a <accz+0x3>
     f84:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <accz>
     f88:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <accz+0x1>
     f8c:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <accz+0x2>
     f90:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <accz+0x3>
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	ab 83       	std	Y+3, r26	; 0x03
     f9a:	bc 83       	std	Y+4, r27	; 0x04
     f9c:	a5 01       	movw	r20, r10
     f9e:	94 01       	movw	r18, r8
     fa0:	c7 01       	movw	r24, r14
     fa2:	b6 01       	movw	r22, r12
     fa4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     fa8:	69 87       	std	Y+9, r22	; 0x09
     faa:	7a 87       	std	Y+10, r23	; 0x0a
     fac:	8b 87       	std	Y+11, r24	; 0x0b
     fae:	9c 87       	std	Y+12, r25	; 0x0c
     fb0:	a5 01       	movw	r20, r10
     fb2:	94 01       	movw	r18, r8
     fb4:	c7 01       	movw	r24, r14
     fb6:	b6 01       	movw	r22, r12
     fb8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     fbc:	6b 01       	movw	r12, r22
     fbe:	7c 01       	movw	r14, r24
     fc0:	29 81       	ldd	r18, Y+1	; 0x01
     fc2:	3a 81       	ldd	r19, Y+2	; 0x02
     fc4:	4b 81       	ldd	r20, Y+3	; 0x03
     fc6:	5c 81       	ldd	r21, Y+4	; 0x04
     fc8:	c3 01       	movw	r24, r6
     fca:	b2 01       	movw	r22, r4
     fcc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
     fd0:	9b 01       	movw	r18, r22
     fd2:	ac 01       	movw	r20, r24
     fd4:	c7 01       	movw	r24, r14
     fd6:	b6 01       	movw	r22, r12
     fd8:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
     fdc:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <sqrt>
     fe0:	9b 01       	movw	r18, r22
     fe2:	ac 01       	movw	r20, r24
     fe4:	6d 81       	ldd	r22, Y+5	; 0x05
     fe6:	7e 81       	ldd	r23, Y+6	; 0x06
     fe8:	8f 81       	ldd	r24, Y+7	; 0x07
     fea:	98 85       	ldd	r25, Y+8	; 0x08
     fec:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
     ff0:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <atan>
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	44 e3       	ldi	r20, 0x34	; 52
     ffa:	53 e4       	ldi	r21, 0x43	; 67
     ffc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
    1000:	26 e5       	ldi	r18, 0x56	; 86
    1002:	3e e0       	ldi	r19, 0x0E	; 14
    1004:	49 e4       	ldi	r20, 0x49	; 73
    1006:	50 e4       	ldi	r21, 0x40	; 64
    1008:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
    100c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__fixsfsi>
    1010:	06 2e       	mov	r0, r22
    1012:	00 0c       	add	r0, r0
    1014:	77 0b       	sbc	r23, r23
    1016:	88 0b       	sbc	r24, r24
    1018:	99 0b       	sbc	r25, r25
    101a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__floatsisf>
    101e:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <Angle_Y_Acc>
    1022:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <Angle_Y_Acc+0x1>
    1026:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <Angle_Y_Acc+0x2>
    102a:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <Angle_Y_Acc+0x3>
	
	if (print == 1)
    102e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1030:	91 30       	cpi	r25, 0x01	; 1
    1032:	e9 f4       	brne	.+58     	; 0x106e <compute_angle_acc+0x252>
	{
		USART_Transmit((uint8_t)Angle_X_Acc);
    1034:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <Angle_X_Acc>
    1038:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <Angle_X_Acc+0x1>
    103c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <Angle_X_Acc+0x2>
    1040:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <Angle_X_Acc+0x3>
    1044:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    1048:	86 2f       	mov	r24, r22
    104a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit((uint8_t)Angle_Y_Acc);
    104e:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <Angle_Y_Acc>
    1052:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <Angle_Y_Acc+0x1>
    1056:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <Angle_Y_Acc+0x2>
    105a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <Angle_Y_Acc+0x3>
    105e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    1062:	86 2f       	mov	r24, r22
    1064:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit('\n');
    1068:	8a e0       	ldi	r24, 0x0A	; 10
    106a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	}
}
    106e:	2d 96       	adiw	r28, 0x0d	; 13
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	8f 90       	pop	r8
    108e:	7f 90       	pop	r7
    1090:	6f 90       	pop	r6
    1092:	5f 90       	pop	r5
    1094:	4f 90       	pop	r4
    1096:	08 95       	ret

00001098 <compute_angle_gyro>:

void compute_angle_gyro(uint8_t print){
    1098:	4f 92       	push	r4
    109a:	5f 92       	push	r5
    109c:	6f 92       	push	r6
    109e:	7f 92       	push	r7
    10a0:	8f 92       	push	r8
    10a2:	9f 92       	push	r9
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	cf 93       	push	r28
    10b2:	c8 2f       	mov	r28, r24
	
	//gyrox = ((float) gyroscope_x / 65.5);
	//gyroy = ((float) gyroscope_y / 65.5);
	//gyroz = ((float) gyroscope_z / 65.5);
	
	float delta_time = time_precision(last_sample_gyro, last_sample_gyro_mod); // check ths
    10b4:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <last_sample_gyro_mod>
    10b8:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <last_sample_gyro_mod+0x1>
    10bc:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <last_sample_gyro>
    10c0:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <last_sample_gyro+0x1>
    10c4:	0e 94 44 0c 	call	0x1888	; 0x1888 <time_precision>
    10c8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    10cc:	6b 01       	movw	r12, r22
    10ce:	7c 01       	movw	r14, r24
	if (gyrox>3 || gyroy > 3)
    10d0:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <gyrox>
    10d4:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <gyrox+0x1>
    10d8:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <gyrox+0x2>
    10dc:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <gyrox+0x3>
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e4       	ldi	r20, 0x40	; 64
    10e6:	50 e4       	ldi	r21, 0x40	; 64
    10e8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__gesf2>
    10ec:	18 16       	cp	r1, r24
    10ee:	8c f0       	brlt	.+34     	; 0x1112 <compute_angle_gyro+0x7a>
    10f0:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <gyroy>
    10f4:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <gyroy+0x1>
    10f8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gyroy+0x2>
    10fc:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <gyroy+0x3>
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e4       	ldi	r20, 0x40	; 64
    1106:	50 e4       	ldi	r21, 0x40	; 64
    1108:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__gesf2>
    110c:	18 16       	cp	r1, r24
    110e:	0c f0       	brlt	.+2      	; 0x1112 <compute_angle_gyro+0x7a>
    1110:	48 c0       	rjmp	.+144    	; 0x11a2 <compute_angle_gyro+0x10a>
	{		
		Angle_X_Gyro = Angle_X_Gyro + (gyrox*(delta_time/249000.0)); //transform from radiants to degree
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	3a e2       	ldi	r19, 0x2A	; 42
    1116:	43 e7       	ldi	r20, 0x73	; 115
    1118:	58 e4       	ldi	r21, 0x48	; 72
    111a:	c7 01       	movw	r24, r14
    111c:	b6 01       	movw	r22, r12
    111e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
    1122:	4b 01       	movw	r8, r22
    1124:	5c 01       	movw	r10, r24
    1126:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <gyrox>
    112a:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <gyrox+0x1>
    112e:	40 91 7d 01 	lds	r20, 0x017D	; 0x80017d <gyrox+0x2>
    1132:	50 91 7e 01 	lds	r21, 0x017E	; 0x80017e <gyrox+0x3>
    1136:	40 90 3a 01 	lds	r4, 0x013A	; 0x80013a <Angle_X_Gyro>
    113a:	50 90 3b 01 	lds	r5, 0x013B	; 0x80013b <Angle_X_Gyro+0x1>
    113e:	60 90 3c 01 	lds	r6, 0x013C	; 0x80013c <Angle_X_Gyro+0x2>
    1142:	70 90 3d 01 	lds	r7, 0x013D	; 0x80013d <Angle_X_Gyro+0x3>
    1146:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
    114a:	a3 01       	movw	r20, r6
    114c:	92 01       	movw	r18, r4
    114e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
    1152:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <Angle_X_Gyro>
    1156:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <Angle_X_Gyro+0x1>
    115a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Angle_X_Gyro+0x2>
    115e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <Angle_X_Gyro+0x3>
		Angle_Y_Gyro = Angle_Y_Gyro + (gyroy*(delta_time/249000.0));  //transform from radiants to degree
    1162:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <gyroy>
    1166:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <gyroy+0x1>
    116a:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <gyroy+0x2>
    116e:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <gyroy+0x3>
    1172:	40 90 36 01 	lds	r4, 0x0136	; 0x800136 <Angle_Y_Gyro>
    1176:	50 90 37 01 	lds	r5, 0x0137	; 0x800137 <Angle_Y_Gyro+0x1>
    117a:	60 90 38 01 	lds	r6, 0x0138	; 0x800138 <Angle_Y_Gyro+0x2>
    117e:	70 90 39 01 	lds	r7, 0x0139	; 0x800139 <Angle_Y_Gyro+0x3>
    1182:	c5 01       	movw	r24, r10
    1184:	b4 01       	movw	r22, r8
    1186:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
    118a:	a3 01       	movw	r20, r6
    118c:	92 01       	movw	r18, r4
    118e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
    1192:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <Angle_Y_Gyro>
    1196:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <Angle_Y_Gyro+0x1>
    119a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Angle_Y_Gyro+0x2>
    119e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <Angle_Y_Gyro+0x3>
	}
	
	USART_Transmit((uint8_t)(delta_time/10.0));
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	c7 01       	movw	r24, r14
    11ac:	b6 01       	movw	r22, r12
    11ae:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
    11b2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    11b6:	86 2f       	mov	r24, r22
    11b8:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	
	last_sample_gyro = system_tick_MG_p + TCNT0;
    11bc:	26 b5       	in	r18, 0x26	; 38
    11be:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <system_tick_MG_p>
    11c2:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <system_tick_MG_p+0x1>
    11c6:	82 0f       	add	r24, r18
    11c8:	91 1d       	adc	r25, r1
    11ca:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <last_sample_gyro+0x1>
    11ce:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <last_sample_gyro>
	last_sample_gyro_mod = system_tick_MG_p_mod;
    11d2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <system_tick_MG_p_mod>
    11d6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <system_tick_MG_p_mod+0x1>
    11da:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <last_sample_gyro_mod+0x1>
    11de:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <last_sample_gyro_mod>
	
	if (print == 1)
    11e2:	c1 30       	cpi	r28, 0x01	; 1
    11e4:	01 f5       	brne	.+64     	; 0x1226 <compute_angle_gyro+0x18e>
	{
		USART_Transmit((uint8_t)-Angle_Y_Gyro);
    11e6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Angle_Y_Gyro>
    11ea:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Angle_Y_Gyro+0x1>
    11ee:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <Angle_Y_Gyro+0x2>
    11f2:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <Angle_Y_Gyro+0x3>
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	90 58       	subi	r25, 0x80	; 128
    11fc:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    1200:	86 2f       	mov	r24, r22
    1202:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit((uint8_t)Angle_X_Gyro);
    1206:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Angle_X_Gyro>
    120a:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <Angle_X_Gyro+0x1>
    120e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Angle_X_Gyro+0x2>
    1212:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <Angle_X_Gyro+0x3>
    1216:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    121a:	86 2f       	mov	r24, r22
    121c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit('\n');
    1220:	8a e0       	ldi	r24, 0x0A	; 10
    1222:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	}
}
    1226:	cf 91       	pop	r28
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	9f 90       	pop	r9
    1236:	8f 90       	pop	r8
    1238:	7f 90       	pop	r7
    123a:	6f 90       	pop	r6
    123c:	5f 90       	pop	r5
    123e:	4f 90       	pop	r4
    1240:	08 95       	ret

00001242 <angle_filtered>:
volatile int8_t AngleX;
volatile int8_t AngleY;

float acc_contribution = 0.1;

void angle_filtered(uint8_t print){
    1242:	4f 92       	push	r4
    1244:	5f 92       	push	r5
    1246:	6f 92       	push	r6
    1248:	7f 92       	push	r7
    124a:	8f 92       	push	r8
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	00 d0       	rcall	.+0      	; 0x1260 <angle_filtered+0x1e>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <angle_filtered+0x20>
    1262:	1f 92       	push	r1
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	8d 83       	std	Y+5, r24	; 0x05
	AngleX = acc_contribution*Angle_X_Acc - (1-acc_contribution)*Angle_Y_Gyro; //Right math, wrong variable names - to correct in future version
    126a:	c0 90 1f 01 	lds	r12, 0x011F	; 0x80011f <acc_contribution>
    126e:	d0 90 20 01 	lds	r13, 0x0120	; 0x800120 <acc_contribution+0x1>
    1272:	e0 90 21 01 	lds	r14, 0x0121	; 0x800121 <acc_contribution+0x2>
    1276:	f0 90 22 01 	lds	r15, 0x0122	; 0x800122 <acc_contribution+0x3>
    127a:	40 90 67 01 	lds	r4, 0x0167	; 0x800167 <Angle_X_Acc>
    127e:	50 90 68 01 	lds	r5, 0x0168	; 0x800168 <Angle_X_Acc+0x1>
    1282:	60 90 69 01 	lds	r6, 0x0169	; 0x800169 <Angle_X_Acc+0x2>
    1286:	70 90 6a 01 	lds	r7, 0x016A	; 0x80016a <Angle_X_Acc+0x3>
    128a:	a7 01       	movw	r20, r14
    128c:	96 01       	movw	r18, r12
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	80 e8       	ldi	r24, 0x80	; 128
    1294:	9f e3       	ldi	r25, 0x3F	; 63
    1296:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__subsf3>
    129a:	69 83       	std	Y+1, r22	; 0x01
    129c:	7a 83       	std	Y+2, r23	; 0x02
    129e:	8b 83       	std	Y+3, r24	; 0x03
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	80 90 36 01 	lds	r8, 0x0136	; 0x800136 <Angle_Y_Gyro>
    12a6:	90 90 37 01 	lds	r9, 0x0137	; 0x800137 <Angle_Y_Gyro+0x1>
    12aa:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <Angle_Y_Gyro+0x2>
    12ae:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <Angle_Y_Gyro+0x3>
    12b2:	a3 01       	movw	r20, r6
    12b4:	92 01       	movw	r18, r4
    12b6:	c7 01       	movw	r24, r14
    12b8:	b6 01       	movw	r22, r12
    12ba:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
    12be:	2b 01       	movw	r4, r22
    12c0:	3c 01       	movw	r6, r24
    12c2:	a5 01       	movw	r20, r10
    12c4:	94 01       	movw	r18, r8
    12c6:	69 81       	ldd	r22, Y+1	; 0x01
    12c8:	7a 81       	ldd	r23, Y+2	; 0x02
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
    12d2:	9b 01       	movw	r18, r22
    12d4:	ac 01       	movw	r20, r24
    12d6:	c3 01       	movw	r24, r6
    12d8:	b2 01       	movw	r22, r4
    12da:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__subsf3>
    12de:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__fixsfsi>
    12e2:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <AngleX>
	AngleY = acc_contribution*Angle_Y_Acc + (1-acc_contribution)*Angle_X_Gyro; //Right math, wrong variable names - to correct in future version
    12e6:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <Angle_Y_Acc>
    12ea:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <Angle_Y_Acc+0x1>
    12ee:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <Angle_Y_Acc+0x2>
    12f2:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <Angle_Y_Acc+0x3>
    12f6:	40 90 3a 01 	lds	r4, 0x013A	; 0x80013a <Angle_X_Gyro>
    12fa:	50 90 3b 01 	lds	r5, 0x013B	; 0x80013b <Angle_X_Gyro+0x1>
    12fe:	60 90 3c 01 	lds	r6, 0x013C	; 0x80013c <Angle_X_Gyro+0x2>
    1302:	70 90 3d 01 	lds	r7, 0x013D	; 0x80013d <Angle_X_Gyro+0x3>
    1306:	c7 01       	movw	r24, r14
    1308:	b6 01       	movw	r22, r12
    130a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
    130e:	6b 01       	movw	r12, r22
    1310:	7c 01       	movw	r14, r24
    1312:	a3 01       	movw	r20, r6
    1314:	92 01       	movw	r18, r4
    1316:	69 81       	ldd	r22, Y+1	; 0x01
    1318:	7a 81       	ldd	r23, Y+2	; 0x02
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
    1322:	9b 01       	movw	r18, r22
    1324:	ac 01       	movw	r20, r24
    1326:	c7 01       	movw	r24, r14
    1328:	b6 01       	movw	r22, r12
    132a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__addsf3>
    132e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__fixsfsi>
    1332:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <AngleY>

	if (print == 1)
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	59 f4       	brne	.+22     	; 0x1352 <angle_filtered+0x110>
	{
		USART_Transmit((uint8_t)AngleX);
    133c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <AngleX>
    1340:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit((uint8_t)AngleY);
    1344:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <AngleY>
    1348:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
		USART_Transmit('\n');
    134c:	8a e0       	ldi	r24, 0x0A	; 10
    134e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	}
	
}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	bf 90       	pop	r11
    136a:	af 90       	pop	r10
    136c:	9f 90       	pop	r9
    136e:	8f 90       	pop	r8
    1370:	7f 90       	pop	r7
    1372:	6f 90       	pop	r6
    1374:	5f 90       	pop	r5
    1376:	4f 90       	pop	r4
    1378:	08 95       	ret

0000137a <main>:
volatile uint8_t ISR_USART_Receive = 0;


int main(void)
{
	DDRD = 0b00000000; //Makes PORTD as Input
    137a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00001111; //Internal Pull Up enabled
    137c:	8f e0       	ldi	r24, 0x0F	; 15
    137e:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0b11111111;
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	84 b9       	out	0x04, r24	; 4


	timer_init();
    1384:	0e 94 94 0c 	call	0x1928	; 0x1928 <timer_init>
	
	TWI_init();
    1388:	0e 94 c0 01 	call	0x380	; 0x380 <TWI_init>
	USART_Init(57600);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	91 ee       	ldi	r25, 0xE1	; 225
    1390:	0e 94 b4 0c 	call	0x1968	; 0x1968 <USART_Init>
	
	USART_Transmit(IMU_Init());
    1394:	0e 94 21 05 	call	0xa42	; 0xa42 <IMU_Init>
    1398:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
	
	interrupt_init();
    139c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <interrupt_init>
	
	sei(); //cli(); countermeasure
    13a0:	78 94       	sei
	while (1)
	{
		aux1 = 50; //for development purpose only
		if (aux1 > 25) //taking some noise into account
		{
			is_started = 1;
    13a2:	11 e0       	ldi	r17, 0x01	; 1
	sei(); //cli(); countermeasure
	
	
	while (1)
	{
		aux1 = 50; //for development purpose only
    13a4:	c2 e3       	ldi	r28, 0x32	; 50
		if (aux1 > 25) //taking some noise into account
		{
			is_started = 1;
    13a6:	d1 2f       	mov	r29, r17
	sei(); //cli(); countermeasure
	
	
	while (1)
	{
		aux1 = 50; //for development purpose only
    13a8:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <aux1>
		if (aux1 > 25) //taking some noise into account
    13ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <aux1>
    13b0:	8a 31       	cpi	r24, 0x1A	; 26
    13b2:	18 f0       	brcs	.+6      	; 0x13ba <main+0x40>
		{
			is_started = 1;
    13b4:	d0 93 43 01 	sts	0x0143, r29	; 0x800143 <is_started>
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <main+0x44>
			}else{
			is_started = 0;
    13ba:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <is_started>
		}
		
		if (is_started == 1)
    13be:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <is_started>
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	89 f7       	brne	.-30     	; 0x13a8 <main+0x2e>
		{
			read_acceleration(1); //refresh acc reading - arg for offset
    13c6:	81 2f       	mov	r24, r17
    13c8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <read_acceleration>
			read_gyroscope(1); //refresh gyro reading - arg for offset
    13cc:	81 2f       	mov	r24, r17
    13ce:	0e 94 92 04 	call	0x924	; 0x924 <read_gyroscope>
			
			computed_acceleration(0); //compute acc reading
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <computed_acceleration>
			computed_gyroscope(0); //compute gyro reading
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	0e 94 8c 06 	call	0xd18	; 0xd18 <computed_gyroscope>
			
			USART_Transmit(period);
    13de:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <period>
    13e2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <period+0x1>
    13e6:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <period+0x2>
    13ea:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <period+0x3>
    13ee:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>

			compute_angle_acc(0); //compute angle by acc information
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <compute_angle_acc>
			compute_angle_gyro(1); //compute angle by gyro information
    13f8:	81 2f       	mov	r24, r17
    13fa:	0e 94 4c 08 	call	0x1098	; 0x1098 <compute_angle_gyro>
			
			angle_filtered(0); //compute angle filtered btw acc and gyro*/
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	0e 94 21 09 	call	0x1242	; 0x1242 <angle_filtered>
    1404:	d1 cf       	rjmp	.-94     	; 0x13a8 <main+0x2e>

00001406 <Int_6_En>:
	PCMSK0 = reg;
	PCIFR = 1;
}

void Pin_Change_Disen(){
	PCICR = (0 << PCIE0);
    1406:	8f b7       	in	r24, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	e6 9a       	sbi	0x1c, 6	; 28
    140c:	ee 9a       	sbi	0x1d, 6	; 29
    140e:	8f bf       	out	0x3f, r24	; 63
    1410:	08 95       	ret

00001412 <Interrupt_Init_Rising_INT6>:
    1412:	cf 93       	push	r28
    1414:	cf b7       	in	r28, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	8c b3       	in	r24, 0x1c	; 28
    141a:	8c bb       	out	0x1c, r24	; 28
    141c:	ea e6       	ldi	r30, 0x6A	; 106
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 63       	ori	r24, 0x30	; 48
    1424:	80 83       	st	Z, r24
    1426:	0e 94 03 0a 	call	0x1406	; 0x1406 <Int_6_En>
    142a:	cf bf       	out	0x3f, r28	; 63
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <Interrupt_Init_Falling_INT6>:
    1430:	cf 93       	push	r28
    1432:	cf b7       	in	r28, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	e6 9a       	sbi	0x1c, 6	; 28
    1438:	ea e6       	ldi	r30, 0x6A	; 106
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8f 7e       	andi	r24, 0xEF	; 239
    1440:	80 83       	st	Z, r24
    1442:	0e 94 03 0a 	call	0x1406	; 0x1406 <Int_6_En>
    1446:	cf bf       	out	0x3f, r28	; 63
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <__vector_7>:
}




ISR(INT6_vect){
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	8f 92       	push	r8
    1458:	9f 92       	push	r9
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	2f 93       	push	r18
    1468:	3f 93       	push	r19
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	ef 93       	push	r30
    147c:	ff 93       	push	r31
	if (flag_rx  == 0)
    147e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <flag_rx>
    1482:	81 11       	cpse	r24, r1
    1484:	35 c0       	rjmp	.+106    	; 0x14f0 <__vector_7+0xa4>
	{		
		period = time_precision(ch_1_rising, ch_1_rising_mod);
    1486:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <ch_1_rising_mod>
    148a:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <ch_1_rising_mod+0x1>
    148e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ch_1_rising>
    1492:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <ch_1_rising+0x1>
    1496:	0e 94 44 0c 	call	0x1888	; 0x1888 <time_precision>
    149a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <period>
    149e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <period+0x1>
    14a2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <period+0x2>
    14a6:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <period+0x3>
		//period = 2*249;
		//USART_Transmit(period);
		//USART_Transmit('\n');
		ch_1_rising = system_tick_MG_p + (uint16_t)TCNT0;
    14aa:	26 b5       	in	r18, 0x26	; 38
    14ac:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <system_tick_MG_p>
    14b0:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <system_tick_MG_p+0x1>
    14b4:	82 0f       	add	r24, r18
    14b6:	91 1d       	adc	r25, r1
    14b8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <ch_1_rising+0x1>
    14bc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <ch_1_rising>
		ch_1_rising_mod = system_tick_MG_p_mod;
    14c0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <system_tick_MG_p_mod>
    14c4:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <system_tick_MG_p_mod+0x1>
    14c8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <ch_1_rising_mod+0x1>
    14cc:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <ch_1_rising_mod>
		
		flag_rx = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <flag_rx>
		
		
		if (PORTC == 0b10000000)
    14d6:	88 b1       	in	r24, 0x08	; 8
    14d8:	80 38       	cpi	r24, 0x80	; 128
    14da:	11 f4       	brne	.+4      	; 0x14e0 <__vector_7+0x94>
		{
			PORTC = 0;
    14dc:	18 b8       	out	0x08, r1	; 8
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <__vector_7+0x9e>
			}else{
			if (PORTC == 0)
    14e0:	88 b1       	in	r24, 0x08	; 8
    14e2:	81 11       	cpse	r24, r1
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <__vector_7+0x9e>
			{
				PORTC = 0b10000000;
    14e6:	80 e8       	ldi	r24, 0x80	; 128
    14e8:	88 b9       	out	0x08, r24	; 8
			}
		}
		
		Interrupt_Init_Falling_INT6();
    14ea:	0e 94 18 0a 	call	0x1430	; 0x1430 <Interrupt_Init_Falling_INT6>
    14ee:	32 c0       	rjmp	.+100    	; 0x1554 <__vector_7+0x108>
		
		}else{ 
		throttle = ((float)(time_precision(ch_1_rising, ch_1_rising_mod)-249)/(float)period)*100;
    14f0:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <ch_1_rising_mod>
    14f4:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <ch_1_rising_mod+0x1>
    14f8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ch_1_rising>
    14fc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <ch_1_rising+0x1>
    1500:	0e 94 44 0c 	call	0x1888	; 0x1888 <time_precision>
    1504:	c0 90 44 01 	lds	r12, 0x0144	; 0x800144 <period>
    1508:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <period+0x1>
    150c:	e0 90 46 01 	lds	r14, 0x0146	; 0x800146 <period+0x2>
    1510:	f0 90 47 01 	lds	r15, 0x0147	; 0x800147 <period+0x3>
    1514:	69 5f       	subi	r22, 0xF9	; 249
    1516:	71 09       	sbc	r23, r1
    1518:	81 09       	sbc	r24, r1
    151a:	91 09       	sbc	r25, r1
    151c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    1520:	4b 01       	movw	r8, r22
    1522:	5c 01       	movw	r10, r24
    1524:	c7 01       	movw	r24, r14
    1526:	b6 01       	movw	r22, r12
    1528:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    152c:	9b 01       	movw	r18, r22
    152e:	ac 01       	movw	r20, r24
    1530:	c5 01       	movw	r24, r10
    1532:	b4 01       	movw	r22, r8
    1534:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	48 ec       	ldi	r20, 0xC8	; 200
    153e:	52 e4       	ldi	r21, 0x42	; 66
    1540:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__mulsf3>
    1544:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    1548:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <throttle>
		
		flag_rx = 0;
    154c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <flag_rx>

		Interrupt_Init_Rising_INT6();
    1550:	0e 94 09 0a 	call	0x1412	; 0x1412 <Interrupt_Init_Rising_INT6>

	}

}
    1554:	ff 91       	pop	r31
    1556:	ef 91       	pop	r30
    1558:	bf 91       	pop	r27
    155a:	af 91       	pop	r26
    155c:	9f 91       	pop	r25
    155e:	8f 91       	pop	r24
    1560:	7f 91       	pop	r23
    1562:	6f 91       	pop	r22
    1564:	5f 91       	pop	r21
    1566:	4f 91       	pop	r20
    1568:	3f 91       	pop	r19
    156a:	2f 91       	pop	r18
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_9>:

ISR(PCINT0_vect){
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	8f 92       	push	r8
    1592:	9f 92       	push	r9
    1594:	af 92       	push	r10
    1596:	bf 92       	push	r11
    1598:	cf 92       	push	r12
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	2f 93       	push	r18
    15a2:	3f 93       	push	r19
    15a4:	4f 93       	push	r20
    15a6:	5f 93       	push	r21
    15a8:	6f 93       	push	r22
    15aa:	7f 93       	push	r23
    15ac:	8f 93       	push	r24
    15ae:	9f 93       	push	r25
    15b0:	af 93       	push	r26
    15b2:	bf 93       	push	r27
    15b4:	ef 93       	push	r30
    15b6:	ff 93       	push	r31
	//check the ports, store before value, confront with actual
	//store new value
	
	uint8_t changedbits;
	uint8_t intreading = PINB;
    15b8:	93 b1       	in	r25, 0x03	; 3
	changedbits = intreading ^ portbhistory;
    15ba:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <portbhistory>
	portbhistory = intreading;
    15be:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <portbhistory>
	if (flag_rx == 1)
    15c2:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <flag_rx>
	{
		
	}
	

	switch(changedbits){
    15c6:	89 27       	eor	r24, r25
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	c9 f1       	breq	.+114    	; 0x163e <__vector_9+0xb8>
    15cc:	18 f4       	brcc	.+6      	; 0x15d4 <__vector_9+0x4e>
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	41 f0       	breq	.+16     	; 0x15e2 <__vector_9+0x5c>
    15d2:	bd c0       	rjmp	.+378    	; 0x174e <__vector_9+0x1c8>
    15d4:	88 30       	cpi	r24, 0x08	; 8
    15d6:	09 f4       	brne	.+2      	; 0x15da <__vector_9+0x54>
    15d8:	60 c0       	rjmp	.+192    	; 0x169a <__vector_9+0x114>
    15da:	80 31       	cpi	r24, 0x10	; 16
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <__vector_9+0x5a>
    15de:	8b c0       	rjmp	.+278    	; 0x16f6 <__vector_9+0x170>
    15e0:	b6 c0       	rjmp	.+364    	; 0x174e <__vector_9+0x1c8>
		case 1: //pcint0 changed
		break;

		case 2: //pcint1 changed
		//SCK - Yaw
		if (flag_rx == 1)
    15e2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <flag_rx>
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	09 f0       	breq	.+2      	; 0x15ec <__vector_9+0x66>
    15ea:	b1 c0       	rjmp	.+354    	; 0x174e <__vector_9+0x1c8>
		{
			yaw = ((float)(time_precision(ch_1_rising, ch_1_rising_mod)-249))/period;
    15ec:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <ch_1_rising_mod>
    15f0:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <ch_1_rising_mod+0x1>
    15f4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ch_1_rising>
    15f8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <ch_1_rising+0x1>
    15fc:	0e 94 44 0c 	call	0x1888	; 0x1888 <time_precision>
    1600:	c0 90 44 01 	lds	r12, 0x0144	; 0x800144 <period>
    1604:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <period+0x1>
    1608:	e0 90 46 01 	lds	r14, 0x0146	; 0x800146 <period+0x2>
    160c:	f0 90 47 01 	lds	r15, 0x0147	; 0x800147 <period+0x3>
    1610:	69 5f       	subi	r22, 0xF9	; 249
    1612:	71 09       	sbc	r23, r1
    1614:	81 09       	sbc	r24, r1
    1616:	91 09       	sbc	r25, r1
    1618:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    161c:	4b 01       	movw	r8, r22
    161e:	5c 01       	movw	r10, r24
    1620:	c7 01       	movw	r24, r14
    1622:	b6 01       	movw	r22, r12
    1624:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
    162c:	c5 01       	movw	r24, r10
    162e:	b4 01       	movw	r22, r8
    1630:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
    1634:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    1638:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <yaw>
    163c:	88 c0       	rjmp	.+272    	; 0x174e <__vector_9+0x1c8>
		}
		break;

		case 4: //pcint2 changed
		//MOSI - Roll
		if (flag_rx == 1)
    163e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <flag_rx>
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	09 f0       	breq	.+2      	; 0x1648 <__vector_9+0xc2>
    1646:	83 c0       	rjmp	.+262    	; 0x174e <__vector_9+0x1c8>
		{
			roll = ((float)(time_precision(ch_1_rising, ch_1_rising_mod)-249))/period;
    1648:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <ch_1_rising_mod>
    164c:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <ch_1_rising_mod+0x1>
    1650:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ch_1_rising>
    1654:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <ch_1_rising+0x1>
    1658:	0e 94 44 0c 	call	0x1888	; 0x1888 <time_precision>
    165c:	c0 90 44 01 	lds	r12, 0x0144	; 0x800144 <period>
    1660:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <period+0x1>
    1664:	e0 90 46 01 	lds	r14, 0x0146	; 0x800146 <period+0x2>
    1668:	f0 90 47 01 	lds	r15, 0x0147	; 0x800147 <period+0x3>
    166c:	69 5f       	subi	r22, 0xF9	; 249
    166e:	71 09       	sbc	r23, r1
    1670:	81 09       	sbc	r24, r1
    1672:	91 09       	sbc	r25, r1
    1674:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    1678:	4b 01       	movw	r8, r22
    167a:	5c 01       	movw	r10, r24
    167c:	c7 01       	movw	r24, r14
    167e:	b6 01       	movw	r22, r12
    1680:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    1684:	9b 01       	movw	r18, r22
    1686:	ac 01       	movw	r20, r24
    1688:	c5 01       	movw	r24, r10
    168a:	b4 01       	movw	r22, r8
    168c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
    1690:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    1694:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <roll>
    1698:	5a c0       	rjmp	.+180    	; 0x174e <__vector_9+0x1c8>
		}
		break;

		case 8:  //pcint3 changed
		//MISO - Pitch
		if (flag_rx == 1)
    169a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <flag_rx>
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <__vector_9+0x11e>
    16a2:	55 c0       	rjmp	.+170    	; 0x174e <__vector_9+0x1c8>
		{
			pitch = ((float)(time_precision(ch_1_rising, ch_1_rising_mod)-249))/period;
    16a4:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <ch_1_rising_mod>
    16a8:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <ch_1_rising_mod+0x1>
    16ac:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ch_1_rising>
    16b0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <ch_1_rising+0x1>
    16b4:	0e 94 44 0c 	call	0x1888	; 0x1888 <time_precision>
    16b8:	c0 90 44 01 	lds	r12, 0x0144	; 0x800144 <period>
    16bc:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <period+0x1>
    16c0:	e0 90 46 01 	lds	r14, 0x0146	; 0x800146 <period+0x2>
    16c4:	f0 90 47 01 	lds	r15, 0x0147	; 0x800147 <period+0x3>
    16c8:	69 5f       	subi	r22, 0xF9	; 249
    16ca:	71 09       	sbc	r23, r1
    16cc:	81 09       	sbc	r24, r1
    16ce:	91 09       	sbc	r25, r1
    16d0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    16d4:	4b 01       	movw	r8, r22
    16d6:	5c 01       	movw	r10, r24
    16d8:	c7 01       	movw	r24, r14
    16da:	b6 01       	movw	r22, r12
    16dc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    16e0:	9b 01       	movw	r18, r22
    16e2:	ac 01       	movw	r20, r24
    16e4:	c5 01       	movw	r24, r10
    16e6:	b4 01       	movw	r22, r8
    16e8:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
    16ec:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    16f0:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <pitch>
    16f4:	2c c0       	rjmp	.+88     	; 0x174e <__vector_9+0x1c8>
		}
		break;

		case 16: //pcint4 changed
		//PB4: AUX1
		if (flag_rx == 1)
    16f6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <flag_rx>
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	41 f5       	brne	.+80     	; 0x174e <__vector_9+0x1c8>
		{
			aux1 = ((float)(time_precision(ch_1_rising, ch_1_rising_mod)-249))/period;
    16fe:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <ch_1_rising_mod>
    1702:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <ch_1_rising_mod+0x1>
    1706:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ch_1_rising>
    170a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <ch_1_rising+0x1>
    170e:	0e 94 44 0c 	call	0x1888	; 0x1888 <time_precision>
    1712:	c0 90 44 01 	lds	r12, 0x0144	; 0x800144 <period>
    1716:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <period+0x1>
    171a:	e0 90 46 01 	lds	r14, 0x0146	; 0x800146 <period+0x2>
    171e:	f0 90 47 01 	lds	r15, 0x0147	; 0x800147 <period+0x3>
    1722:	69 5f       	subi	r22, 0xF9	; 249
    1724:	71 09       	sbc	r23, r1
    1726:	81 09       	sbc	r24, r1
    1728:	91 09       	sbc	r25, r1
    172a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    172e:	4b 01       	movw	r8, r22
    1730:	5c 01       	movw	r10, r24
    1732:	c7 01       	movw	r24, r14
    1734:	b6 01       	movw	r22, r12
    1736:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__floatunsisf>
    173a:	9b 01       	movw	r18, r22
    173c:	ac 01       	movw	r20, r24
    173e:	c5 01       	movw	r24, r10
    1740:	b4 01       	movw	r22, r8
    1742:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__divsf3>
    1746:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    174a:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <aux1>
		break;
		
		case 128: //pcint7 changed
		break;
	}
}
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	af 90       	pop	r10
    1772:	9f 90       	pop	r9
    1774:	8f 90       	pop	r8
    1776:	0f 90       	pop	r0
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	0f 90       	pop	r0
    177c:	1f 90       	pop	r1
    177e:	18 95       	reti

00001780 <interrupt_init>:

void interrupt_init(){
	Interrupt_Init_Rising_INT6();
    1780:	0e 94 09 0a 	call	0x1412	; 0x1412 <Interrupt_Init_Rising_INT6>
    1784:	08 95       	ret

00001786 <timer_8bit_setCLK>:
void timer_16bit_INT_init_3_TOP(){
	TIMSK3 |= (1 << ICIE3);
}

void timer_16bit_INT_init_3_BOTTOM(){
	TIMSK3 |= (1 << TOIE3);
    1786:	80 34       	cpi	r24, 0x40	; 64
    1788:	91 05       	cpc	r25, r1
    178a:	d1 f0       	breq	.+52     	; 0x17c0 <timer_8bit_setCLK+0x3a>
    178c:	30 f4       	brcc	.+12     	; 0x179a <timer_8bit_setCLK+0x14>
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	69 f0       	breq	.+26     	; 0x17ac <timer_8bit_setCLK+0x26>
    1792:	88 30       	cpi	r24, 0x08	; 8
    1794:	91 05       	cpc	r25, r1
    1796:	81 f0       	breq	.+32     	; 0x17b8 <timer_8bit_setCLK+0x32>
    1798:	1f c0       	rjmp	.+62     	; 0x17d8 <timer_8bit_setCLK+0x52>
    179a:	81 15       	cp	r24, r1
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	92 07       	cpc	r25, r18
    17a0:	99 f0       	breq	.+38     	; 0x17c8 <timer_8bit_setCLK+0x42>
    17a2:	81 15       	cp	r24, r1
    17a4:	24 e0       	ldi	r18, 0x04	; 4
    17a6:	92 07       	cpc	r25, r18
    17a8:	99 f0       	breq	.+38     	; 0x17d0 <timer_8bit_setCLK+0x4a>
    17aa:	16 c0       	rjmp	.+44     	; 0x17d8 <timer_8bit_setCLK+0x52>
    17ac:	85 b5       	in	r24, 0x25	; 37
    17ae:	81 60       	ori	r24, 0x01	; 1
    17b0:	85 bd       	out	0x25, r24	; 37
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	08 95       	ret
    17b8:	25 b5       	in	r18, 0x25	; 37
    17ba:	22 60       	ori	r18, 0x02	; 2
    17bc:	25 bd       	out	0x25, r18	; 37
    17be:	08 95       	ret
    17c0:	25 b5       	in	r18, 0x25	; 37
    17c2:	23 60       	ori	r18, 0x03	; 3
    17c4:	25 bd       	out	0x25, r18	; 37
    17c6:	08 95       	ret
    17c8:	25 b5       	in	r18, 0x25	; 37
    17ca:	24 60       	ori	r18, 0x04	; 4
    17cc:	25 bd       	out	0x25, r18	; 37
    17ce:	08 95       	ret
    17d0:	25 b5       	in	r18, 0x25	; 37
    17d2:	26 60       	ori	r18, 0x06	; 6
    17d4:	25 bd       	out	0x25, r18	; 37
    17d6:	08 95       	ret
    17d8:	85 b5       	in	r24, 0x25	; 37
    17da:	81 60       	ori	r24, 0x01	; 1
    17dc:	85 bd       	out	0x25, r24	; 37
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	08 95       	ret

000017e4 <timer_8bit_CTC_init>:
    17e4:	cf 93       	push	r28
    17e6:	c8 2f       	mov	r28, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	22 e0       	ldi	r18, 0x02	; 2
    17ec:	24 bd       	out	0x24, r18	; 36
    17ee:	0e 94 c3 0b 	call	0x1786	; 0x1786 <timer_8bit_setCLK>
    17f2:	c7 bd       	out	0x27, r28	; 39
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret

000017f8 <timer_8bit_INT_init_COMPA>:
    17f8:	ee e6       	ldi	r30, 0x6E	; 110
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	82 60       	ori	r24, 0x02	; 2
    1800:	80 83       	st	Z, r24
    1802:	08 95       	ret

00001804 <__vector_21>:
    1804:	1f 92       	push	r1
    1806:	0f 92       	push	r0
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	0f 92       	push	r0
    180c:	11 24       	eor	r1, r1
    180e:	2f 93       	push	r18
    1810:	8f 93       	push	r24
    1812:	9f 93       	push	r25
    1814:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <system_tick_MG>
    1818:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <system_tick_MG+0x1>
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <system_tick_MG+0x1>
    1822:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <system_tick_MG>
    1826:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <system_tick_MG_p>
    182a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <system_tick_MG_p+0x1>
    182e:	87 50       	subi	r24, 0x07	; 7
    1830:	9f 4f       	sbci	r25, 0xFF	; 255
    1832:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <system_tick_MG_p+0x1>
    1836:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <system_tick_MG_p>
    183a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <system_tick_MG_p>
    183e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <system_tick_MG_p+0x1>
    1842:	86 30       	cpi	r24, 0x06	; 6
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	48 f0       	brcs	.+18     	; 0x185a <__vector_21+0x56>
    1848:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <system_tick_MG_p_mod>
    184c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <system_tick_MG_p_mod+0x1>
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <system_tick_MG_p_mod+0x1>
    1856:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <system_tick_MG_p_mod>
    185a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <system_tick_MG>
    185e:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <system_tick_MG+0x1>
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	49 f4       	brne	.+18     	; 0x1878 <__vector_21+0x74>
    1866:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <system_tick_MG_mod>
    186a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <system_tick_MG_mod+0x1>
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <system_tick_MG_mod+0x1>
    1874:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <system_tick_MG_mod>
    1878:	9f 91       	pop	r25
    187a:	8f 91       	pop	r24
    187c:	2f 91       	pop	r18
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <time_precision>:
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	ec 01       	movw	r28, r24
    188e:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <system_tick_MG_p_mod>
    1892:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <system_tick_MG_p_mod+0x1>
    1896:	e6 b5       	in	r30, 0x26	; 38
    1898:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <system_tick_MG_p>
    189c:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <system_tick_MG_p+0x1>
    18a0:	26 1b       	sub	r18, r22
    18a2:	37 0b       	sbc	r19, r23
    18a4:	af ef       	ldi	r26, 0xFF	; 255
    18a6:	bf ef       	ldi	r27, 0xFF	; 255
    18a8:	0e 94 45 10 	call	0x208a	; 0x208a <__umulhisi3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	8c 1b       	sub	r24, r28
    18b2:	9d 0b       	sbc	r25, r29
    18b4:	a1 09       	sbc	r26, r1
    18b6:	b1 09       	sbc	r27, r1
    18b8:	4e 0f       	add	r20, r30
    18ba:	51 1d       	adc	r21, r1
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	64 0f       	add	r22, r20
    18c2:	75 1f       	adc	r23, r21
    18c4:	81 1d       	adc	r24, r1
    18c6:	91 1d       	adc	r25, r1
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	08 95       	ret

000018ce <timer1_16bit_PWM_initABC>:
    18ce:	84 b1       	in	r24, 0x04	; 4
    18d0:	80 6e       	ori	r24, 0xE0	; 224
    18d2:	84 b9       	out	0x04, r24	; 4
    18d4:	e0 e8       	ldi	r30, 0x80	; 128
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	88 6a       	ori	r24, 0xA8	; 168
    18dc:	80 83       	st	Z, r24
    18de:	80 e1       	ldi	r24, 0x10	; 16
    18e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    18e4:	08 95       	ret

000018e6 <__vector_20>:
    18e6:	1f 92       	push	r1
    18e8:	0f 92       	push	r0
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	0f 92       	push	r0
    18ee:	11 24       	eor	r1, r1
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	18 95       	reti

000018fa <__vector_16>:
    18fa:	1f 92       	push	r1
    18fc:	0f 92       	push	r0
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	0f 92       	push	r0
    1902:	11 24       	eor	r1, r1
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	0f 90       	pop	r0
    190a:	1f 90       	pop	r1
    190c:	18 95       	reti

0000190e <timer3_16bit_PWM_initA>:
    190e:	80 e4       	ldi	r24, 0x40	; 64
    1910:	87 b9       	out	0x07, r24	; 7
    1912:	e0 e9       	ldi	r30, 0x90	; 144
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	80 68       	ori	r24, 0x80	; 128
    191a:	80 83       	st	Z, r24
    191c:	e1 e9       	ldi	r30, 0x91	; 145
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	80 61       	ori	r24, 0x10	; 16
    1924:	80 83       	st	Z, r24
    1926:	08 95       	ret

00001928 <timer_init>:
    1928:	0e 94 67 0c 	call	0x18ce	; 0x18ce <timer1_16bit_PWM_initABC>
    192c:	0e 94 87 0c 	call	0x190e	; 0x190e <timer3_16bit_PWM_initA>
    1930:	60 e4       	ldi	r22, 0x40	; 64
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	89 ef       	ldi	r24, 0xF9	; 249
    1936:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <timer_8bit_CTC_init>
    193a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <timer_8bit_INT_init_COMPA>
    193e:	08 95       	ret

00001940 <__vector_35>:
}

ISR(TIMER3_OVF_vect){
    1940:	1f 92       	push	r1
    1942:	0f 92       	push	r0
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	0f 92       	push	r0
    1948:	11 24       	eor	r1, r1
	
}
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <__vector_31>:

ISR(TIMER3_CAPT_vect){
    1954:	1f 92       	push	r1
    1956:	0f 92       	push	r0
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	0f 92       	push	r0
    195c:	11 24       	eor	r1, r1
	//system_tick_MG++;
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	0f 90       	pop	r0
    1964:	1f 90       	pop	r1
    1966:	18 95       	reti

00001968 <USART_Init>:
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	aa 1f       	adc	r26, r26
    1972:	bb 1f       	adc	r27, r27
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	aa 1f       	adc	r26, r26
    197a:	bb 1f       	adc	r27, r27
    197c:	9c 01       	movw	r18, r24
    197e:	ad 01       	movw	r20, r26
    1980:	22 0f       	add	r18, r18
    1982:	33 1f       	adc	r19, r19
    1984:	44 1f       	adc	r20, r20
    1986:	55 1f       	adc	r21, r21
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	44 1f       	adc	r20, r20
    198e:	55 1f       	adc	r21, r21
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	74 e2       	ldi	r23, 0x24	; 36
    1994:	84 ef       	ldi	r24, 0xF4	; 244
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 23 10 	call	0x2046	; 0x2046 <__udivmodsi4>
    199c:	21 50       	subi	r18, 0x01	; 1
    199e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    19a2:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    19a6:	e9 ec       	ldi	r30, 0xC9	; 201
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 e8       	ldi	r24, 0x80	; 128
    19ac:	80 83       	st	Z, r24
    19ae:	86 e0       	ldi	r24, 0x06	; 6
    19b0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    19b4:	80 81       	ld	r24, Z
    19b6:	88 61       	ori	r24, 0x18	; 24
    19b8:	80 83       	st	Z, r24
    19ba:	08 95       	ret

000019bc <USART_Transmit>:
    19bc:	e8 ec       	ldi	r30, 0xC8	; 200
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	90 81       	ld	r25, Z
    19c2:	95 ff       	sbrs	r25, 5
    19c4:	fd cf       	rjmp	.-6      	; 0x19c0 <USART_Transmit+0x4>
    19c6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    19ca:	08 95       	ret

000019cc <USART_String>:
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	66 23       	and	r22, r22
    19d6:	51 f0       	breq	.+20     	; 0x19ec <USART_String+0x20>
    19d8:	8c 01       	movw	r16, r24
    19da:	ec 01       	movw	r28, r24
    19dc:	06 0f       	add	r16, r22
    19de:	11 1d       	adc	r17, r1
    19e0:	89 91       	ld	r24, Y+
    19e2:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
    19e6:	c0 17       	cp	r28, r16
    19e8:	d1 07       	cpc	r29, r17
    19ea:	d1 f7       	brne	.-12     	; 0x19e0 <USART_String+0x14>
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	08 95       	ret

000019f6 <__vector_25>:
    19f6:	1f 92       	push	r1
    19f8:	0f 92       	push	r0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	0f 92       	push	r0
    19fe:	11 24       	eor	r1, r1
    1a00:	2f 93       	push	r18
    1a02:	3f 93       	push	r19
    1a04:	4f 93       	push	r20
    1a06:	5f 93       	push	r21
    1a08:	6f 93       	push	r22
    1a0a:	7f 93       	push	r23
    1a0c:	8f 93       	push	r24
    1a0e:	9f 93       	push	r25
    1a10:	af 93       	push	r26
    1a12:	bf 93       	push	r27
    1a14:	ef 93       	push	r30
    1a16:	ff 93       	push	r31
    1a18:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1a1c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <ISR_USART_Receive>
    1a20:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <ISR_USART_Receive>
    1a24:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
    1a28:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <ISR_USART_Receive>
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 8c 00 	call	0x118	; 0x118 <selected_value>
    1a32:	8a e0       	ldi	r24, 0x0A	; 10
    1a34:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USART_Transmit>
    1a38:	ff 91       	pop	r31
    1a3a:	ef 91       	pop	r30
    1a3c:	bf 91       	pop	r27
    1a3e:	af 91       	pop	r26
    1a40:	9f 91       	pop	r25
    1a42:	8f 91       	pop	r24
    1a44:	7f 91       	pop	r23
    1a46:	6f 91       	pop	r22
    1a48:	5f 91       	pop	r21
    1a4a:	4f 91       	pop	r20
    1a4c:	3f 91       	pop	r19
    1a4e:	2f 91       	pop	r18
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	0f 90       	pop	r0
    1a56:	1f 90       	pop	r1
    1a58:	18 95       	reti

00001a5a <__subsf3>:
    1a5a:	50 58       	subi	r21, 0x80	; 128

00001a5c <__addsf3>:
    1a5c:	bb 27       	eor	r27, r27
    1a5e:	aa 27       	eor	r26, r26
    1a60:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__addsf3x>
    1a64:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__fp_round>
    1a68:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fp_pscA>
    1a6c:	38 f0       	brcs	.+14     	; 0x1a7c <__addsf3+0x20>
    1a6e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__fp_pscB>
    1a72:	20 f0       	brcs	.+8      	; 0x1a7c <__addsf3+0x20>
    1a74:	39 f4       	brne	.+14     	; 0x1a84 <__addsf3+0x28>
    1a76:	9f 3f       	cpi	r25, 0xFF	; 255
    1a78:	19 f4       	brne	.+6      	; 0x1a80 <__addsf3+0x24>
    1a7a:	26 f4       	brtc	.+8      	; 0x1a84 <__addsf3+0x28>
    1a7c:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_nan>
    1a80:	0e f4       	brtc	.+2      	; 0x1a84 <__addsf3+0x28>
    1a82:	e0 95       	com	r30
    1a84:	e7 fb       	bst	r30, 7
    1a86:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_inf>

00001a8a <__addsf3x>:
    1a8a:	e9 2f       	mov	r30, r25
    1a8c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__fp_split3>
    1a90:	58 f3       	brcs	.-42     	; 0x1a68 <__addsf3+0xc>
    1a92:	ba 17       	cp	r27, r26
    1a94:	62 07       	cpc	r22, r18
    1a96:	73 07       	cpc	r23, r19
    1a98:	84 07       	cpc	r24, r20
    1a9a:	95 07       	cpc	r25, r21
    1a9c:	20 f0       	brcs	.+8      	; 0x1aa6 <__addsf3x+0x1c>
    1a9e:	79 f4       	brne	.+30     	; 0x1abe <__addsf3x+0x34>
    1aa0:	a6 f5       	brtc	.+104    	; 0x1b0a <__addsf3x+0x80>
    1aa2:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__fp_zero>
    1aa6:	0e f4       	brtc	.+2      	; 0x1aaa <__addsf3x+0x20>
    1aa8:	e0 95       	com	r30
    1aaa:	0b 2e       	mov	r0, r27
    1aac:	ba 2f       	mov	r27, r26
    1aae:	a0 2d       	mov	r26, r0
    1ab0:	0b 01       	movw	r0, r22
    1ab2:	b9 01       	movw	r22, r18
    1ab4:	90 01       	movw	r18, r0
    1ab6:	0c 01       	movw	r0, r24
    1ab8:	ca 01       	movw	r24, r20
    1aba:	a0 01       	movw	r20, r0
    1abc:	11 24       	eor	r1, r1
    1abe:	ff 27       	eor	r31, r31
    1ac0:	59 1b       	sub	r21, r25
    1ac2:	99 f0       	breq	.+38     	; 0x1aea <__addsf3x+0x60>
    1ac4:	59 3f       	cpi	r21, 0xF9	; 249
    1ac6:	50 f4       	brcc	.+20     	; 0x1adc <__addsf3x+0x52>
    1ac8:	50 3e       	cpi	r21, 0xE0	; 224
    1aca:	68 f1       	brcs	.+90     	; 0x1b26 <__addsf3x+0x9c>
    1acc:	1a 16       	cp	r1, r26
    1ace:	f0 40       	sbci	r31, 0x00	; 0
    1ad0:	a2 2f       	mov	r26, r18
    1ad2:	23 2f       	mov	r18, r19
    1ad4:	34 2f       	mov	r19, r20
    1ad6:	44 27       	eor	r20, r20
    1ad8:	58 5f       	subi	r21, 0xF8	; 248
    1ada:	f3 cf       	rjmp	.-26     	; 0x1ac2 <__addsf3x+0x38>
    1adc:	46 95       	lsr	r20
    1ade:	37 95       	ror	r19
    1ae0:	27 95       	ror	r18
    1ae2:	a7 95       	ror	r26
    1ae4:	f0 40       	sbci	r31, 0x00	; 0
    1ae6:	53 95       	inc	r21
    1ae8:	c9 f7       	brne	.-14     	; 0x1adc <__addsf3x+0x52>
    1aea:	7e f4       	brtc	.+30     	; 0x1b0a <__addsf3x+0x80>
    1aec:	1f 16       	cp	r1, r31
    1aee:	ba 0b       	sbc	r27, r26
    1af0:	62 0b       	sbc	r22, r18
    1af2:	73 0b       	sbc	r23, r19
    1af4:	84 0b       	sbc	r24, r20
    1af6:	ba f0       	brmi	.+46     	; 0x1b26 <__addsf3x+0x9c>
    1af8:	91 50       	subi	r25, 0x01	; 1
    1afa:	a1 f0       	breq	.+40     	; 0x1b24 <__addsf3x+0x9a>
    1afc:	ff 0f       	add	r31, r31
    1afe:	bb 1f       	adc	r27, r27
    1b00:	66 1f       	adc	r22, r22
    1b02:	77 1f       	adc	r23, r23
    1b04:	88 1f       	adc	r24, r24
    1b06:	c2 f7       	brpl	.-16     	; 0x1af8 <__addsf3x+0x6e>
    1b08:	0e c0       	rjmp	.+28     	; 0x1b26 <__addsf3x+0x9c>
    1b0a:	ba 0f       	add	r27, r26
    1b0c:	62 1f       	adc	r22, r18
    1b0e:	73 1f       	adc	r23, r19
    1b10:	84 1f       	adc	r24, r20
    1b12:	48 f4       	brcc	.+18     	; 0x1b26 <__addsf3x+0x9c>
    1b14:	87 95       	ror	r24
    1b16:	77 95       	ror	r23
    1b18:	67 95       	ror	r22
    1b1a:	b7 95       	ror	r27
    1b1c:	f7 95       	ror	r31
    1b1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b20:	08 f0       	brcs	.+2      	; 0x1b24 <__addsf3x+0x9a>
    1b22:	b0 cf       	rjmp	.-160    	; 0x1a84 <__addsf3+0x28>
    1b24:	93 95       	inc	r25
    1b26:	88 0f       	add	r24, r24
    1b28:	08 f0       	brcs	.+2      	; 0x1b2c <__addsf3x+0xa2>
    1b2a:	99 27       	eor	r25, r25
    1b2c:	ee 0f       	add	r30, r30
    1b2e:	97 95       	ror	r25
    1b30:	87 95       	ror	r24
    1b32:	08 95       	ret

00001b34 <atan>:
    1b34:	df 93       	push	r29
    1b36:	dd 27       	eor	r29, r29
    1b38:	b9 2f       	mov	r27, r25
    1b3a:	bf 77       	andi	r27, 0x7F	; 127
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	16 16       	cp	r1, r22
    1b42:	17 06       	cpc	r1, r23
    1b44:	48 07       	cpc	r20, r24
    1b46:	5b 07       	cpc	r21, r27
    1b48:	18 f4       	brcc	.+6      	; 0x1b50 <atan+0x1c>
    1b4a:	d9 2f       	mov	r29, r25
    1b4c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <inverse>
    1b50:	9f 93       	push	r25
    1b52:	8f 93       	push	r24
    1b54:	7f 93       	push	r23
    1b56:	6f 93       	push	r22
    1b58:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <square>
    1b5c:	ec ea       	ldi	r30, 0xAC	; 172
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__fp_powser>
    1b64:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_round>
    1b68:	2f 91       	pop	r18
    1b6a:	3f 91       	pop	r19
    1b6c:	4f 91       	pop	r20
    1b6e:	5f 91       	pop	r21
    1b70:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__mulsf3x>
    1b74:	dd 23       	and	r29, r29
    1b76:	51 f0       	breq	.+20     	; 0x1b8c <atan+0x58>
    1b78:	90 58       	subi	r25, 0x80	; 128
    1b7a:	a2 ea       	ldi	r26, 0xA2	; 162
    1b7c:	2a ed       	ldi	r18, 0xDA	; 218
    1b7e:	3f e0       	ldi	r19, 0x0F	; 15
    1b80:	49 ec       	ldi	r20, 0xC9	; 201
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	d0 78       	andi	r29, 0x80	; 128
    1b86:	5d 27       	eor	r21, r29
    1b88:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__addsf3x>
    1b8c:	df 91       	pop	r29
    1b8e:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__fp_round>

00001b92 <__divsf3>:
    1b92:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__divsf3x>
    1b96:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__fp_round>
    1b9a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__fp_pscB>
    1b9e:	58 f0       	brcs	.+22     	; 0x1bb6 <__divsf3+0x24>
    1ba0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fp_pscA>
    1ba4:	40 f0       	brcs	.+16     	; 0x1bb6 <__divsf3+0x24>
    1ba6:	29 f4       	brne	.+10     	; 0x1bb2 <__divsf3+0x20>
    1ba8:	5f 3f       	cpi	r21, 0xFF	; 255
    1baa:	29 f0       	breq	.+10     	; 0x1bb6 <__divsf3+0x24>
    1bac:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_inf>
    1bb0:	51 11       	cpse	r21, r1
    1bb2:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__fp_szero>
    1bb6:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_nan>

00001bba <__divsf3x>:
    1bba:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__fp_split3>
    1bbe:	68 f3       	brcs	.-38     	; 0x1b9a <__divsf3+0x8>

00001bc0 <__divsf3_pse>:
    1bc0:	99 23       	and	r25, r25
    1bc2:	b1 f3       	breq	.-20     	; 0x1bb0 <__divsf3+0x1e>
    1bc4:	55 23       	and	r21, r21
    1bc6:	91 f3       	breq	.-28     	; 0x1bac <__divsf3+0x1a>
    1bc8:	95 1b       	sub	r25, r21
    1bca:	55 0b       	sbc	r21, r21
    1bcc:	bb 27       	eor	r27, r27
    1bce:	aa 27       	eor	r26, r26
    1bd0:	62 17       	cp	r22, r18
    1bd2:	73 07       	cpc	r23, r19
    1bd4:	84 07       	cpc	r24, r20
    1bd6:	38 f0       	brcs	.+14     	; 0x1be6 <__divsf3_pse+0x26>
    1bd8:	9f 5f       	subi	r25, 0xFF	; 255
    1bda:	5f 4f       	sbci	r21, 0xFF	; 255
    1bdc:	22 0f       	add	r18, r18
    1bde:	33 1f       	adc	r19, r19
    1be0:	44 1f       	adc	r20, r20
    1be2:	aa 1f       	adc	r26, r26
    1be4:	a9 f3       	breq	.-22     	; 0x1bd0 <__divsf3_pse+0x10>
    1be6:	35 d0       	rcall	.+106    	; 0x1c52 <__divsf3_pse+0x92>
    1be8:	0e 2e       	mov	r0, r30
    1bea:	3a f0       	brmi	.+14     	; 0x1bfa <__divsf3_pse+0x3a>
    1bec:	e0 e8       	ldi	r30, 0x80	; 128
    1bee:	32 d0       	rcall	.+100    	; 0x1c54 <__divsf3_pse+0x94>
    1bf0:	91 50       	subi	r25, 0x01	; 1
    1bf2:	50 40       	sbci	r21, 0x00	; 0
    1bf4:	e6 95       	lsr	r30
    1bf6:	00 1c       	adc	r0, r0
    1bf8:	ca f7       	brpl	.-14     	; 0x1bec <__divsf3_pse+0x2c>
    1bfa:	2b d0       	rcall	.+86     	; 0x1c52 <__divsf3_pse+0x92>
    1bfc:	fe 2f       	mov	r31, r30
    1bfe:	29 d0       	rcall	.+82     	; 0x1c52 <__divsf3_pse+0x92>
    1c00:	66 0f       	add	r22, r22
    1c02:	77 1f       	adc	r23, r23
    1c04:	88 1f       	adc	r24, r24
    1c06:	bb 1f       	adc	r27, r27
    1c08:	26 17       	cp	r18, r22
    1c0a:	37 07       	cpc	r19, r23
    1c0c:	48 07       	cpc	r20, r24
    1c0e:	ab 07       	cpc	r26, r27
    1c10:	b0 e8       	ldi	r27, 0x80	; 128
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <__divsf3_pse+0x56>
    1c14:	bb 0b       	sbc	r27, r27
    1c16:	80 2d       	mov	r24, r0
    1c18:	bf 01       	movw	r22, r30
    1c1a:	ff 27       	eor	r31, r31
    1c1c:	93 58       	subi	r25, 0x83	; 131
    1c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c20:	3a f0       	brmi	.+14     	; 0x1c30 <__divsf3_pse+0x70>
    1c22:	9e 3f       	cpi	r25, 0xFE	; 254
    1c24:	51 05       	cpc	r21, r1
    1c26:	78 f0       	brcs	.+30     	; 0x1c46 <__divsf3_pse+0x86>
    1c28:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_inf>
    1c2c:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__fp_szero>
    1c30:	5f 3f       	cpi	r21, 0xFF	; 255
    1c32:	e4 f3       	brlt	.-8      	; 0x1c2c <__divsf3_pse+0x6c>
    1c34:	98 3e       	cpi	r25, 0xE8	; 232
    1c36:	d4 f3       	brlt	.-12     	; 0x1c2c <__divsf3_pse+0x6c>
    1c38:	86 95       	lsr	r24
    1c3a:	77 95       	ror	r23
    1c3c:	67 95       	ror	r22
    1c3e:	b7 95       	ror	r27
    1c40:	f7 95       	ror	r31
    1c42:	9f 5f       	subi	r25, 0xFF	; 255
    1c44:	c9 f7       	brne	.-14     	; 0x1c38 <__divsf3_pse+0x78>
    1c46:	88 0f       	add	r24, r24
    1c48:	91 1d       	adc	r25, r1
    1c4a:	96 95       	lsr	r25
    1c4c:	87 95       	ror	r24
    1c4e:	97 f9       	bld	r25, 7
    1c50:	08 95       	ret
    1c52:	e1 e0       	ldi	r30, 0x01	; 1
    1c54:	66 0f       	add	r22, r22
    1c56:	77 1f       	adc	r23, r23
    1c58:	88 1f       	adc	r24, r24
    1c5a:	bb 1f       	adc	r27, r27
    1c5c:	62 17       	cp	r22, r18
    1c5e:	73 07       	cpc	r23, r19
    1c60:	84 07       	cpc	r24, r20
    1c62:	ba 07       	cpc	r27, r26
    1c64:	20 f0       	brcs	.+8      	; 0x1c6e <__divsf3_pse+0xae>
    1c66:	62 1b       	sub	r22, r18
    1c68:	73 0b       	sbc	r23, r19
    1c6a:	84 0b       	sbc	r24, r20
    1c6c:	ba 0b       	sbc	r27, r26
    1c6e:	ee 1f       	adc	r30, r30
    1c70:	88 f7       	brcc	.-30     	; 0x1c54 <__divsf3_pse+0x94>
    1c72:	e0 95       	com	r30
    1c74:	08 95       	ret

00001c76 <__fixsfsi>:
    1c76:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fixunssfsi>
    1c7a:	68 94       	set
    1c7c:	b1 11       	cpse	r27, r1
    1c7e:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__fp_szero>
    1c82:	08 95       	ret

00001c84 <__fixunssfsi>:
    1c84:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__fp_splitA>
    1c88:	88 f0       	brcs	.+34     	; 0x1cac <__fixunssfsi+0x28>
    1c8a:	9f 57       	subi	r25, 0x7F	; 127
    1c8c:	98 f0       	brcs	.+38     	; 0x1cb4 <__fixunssfsi+0x30>
    1c8e:	b9 2f       	mov	r27, r25
    1c90:	99 27       	eor	r25, r25
    1c92:	b7 51       	subi	r27, 0x17	; 23
    1c94:	b0 f0       	brcs	.+44     	; 0x1cc2 <__fixunssfsi+0x3e>
    1c96:	e1 f0       	breq	.+56     	; 0x1cd0 <__fixunssfsi+0x4c>
    1c98:	66 0f       	add	r22, r22
    1c9a:	77 1f       	adc	r23, r23
    1c9c:	88 1f       	adc	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	1a f0       	brmi	.+6      	; 0x1ca8 <__fixunssfsi+0x24>
    1ca2:	ba 95       	dec	r27
    1ca4:	c9 f7       	brne	.-14     	; 0x1c98 <__fixunssfsi+0x14>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <__fixunssfsi+0x4c>
    1ca8:	b1 30       	cpi	r27, 0x01	; 1
    1caa:	91 f0       	breq	.+36     	; 0x1cd0 <__fixunssfsi+0x4c>
    1cac:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__fp_zero>
    1cb0:	b1 e0       	ldi	r27, 0x01	; 1
    1cb2:	08 95       	ret
    1cb4:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__fp_zero>
    1cb8:	67 2f       	mov	r22, r23
    1cba:	78 2f       	mov	r23, r24
    1cbc:	88 27       	eor	r24, r24
    1cbe:	b8 5f       	subi	r27, 0xF8	; 248
    1cc0:	39 f0       	breq	.+14     	; 0x1cd0 <__fixunssfsi+0x4c>
    1cc2:	b9 3f       	cpi	r27, 0xF9	; 249
    1cc4:	cc f3       	brlt	.-14     	; 0x1cb8 <__fixunssfsi+0x34>
    1cc6:	86 95       	lsr	r24
    1cc8:	77 95       	ror	r23
    1cca:	67 95       	ror	r22
    1ccc:	b3 95       	inc	r27
    1cce:	d9 f7       	brne	.-10     	; 0x1cc6 <__fixunssfsi+0x42>
    1cd0:	3e f4       	brtc	.+14     	; 0x1ce0 <__fixunssfsi+0x5c>
    1cd2:	90 95       	com	r25
    1cd4:	80 95       	com	r24
    1cd6:	70 95       	com	r23
    1cd8:	61 95       	neg	r22
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	08 95       	ret

00001ce2 <__floatunsisf>:
    1ce2:	e8 94       	clt
    1ce4:	09 c0       	rjmp	.+18     	; 0x1cf8 <__floatsisf+0x12>

00001ce6 <__floatsisf>:
    1ce6:	97 fb       	bst	r25, 7
    1ce8:	3e f4       	brtc	.+14     	; 0x1cf8 <__floatsisf+0x12>
    1cea:	90 95       	com	r25
    1cec:	80 95       	com	r24
    1cee:	70 95       	com	r23
    1cf0:	61 95       	neg	r22
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf8:	99 23       	and	r25, r25
    1cfa:	a9 f0       	breq	.+42     	; 0x1d26 <__floatsisf+0x40>
    1cfc:	f9 2f       	mov	r31, r25
    1cfe:	96 e9       	ldi	r25, 0x96	; 150
    1d00:	bb 27       	eor	r27, r27
    1d02:	93 95       	inc	r25
    1d04:	f6 95       	lsr	r31
    1d06:	87 95       	ror	r24
    1d08:	77 95       	ror	r23
    1d0a:	67 95       	ror	r22
    1d0c:	b7 95       	ror	r27
    1d0e:	f1 11       	cpse	r31, r1
    1d10:	f8 cf       	rjmp	.-16     	; 0x1d02 <__floatsisf+0x1c>
    1d12:	fa f4       	brpl	.+62     	; 0x1d52 <__floatsisf+0x6c>
    1d14:	bb 0f       	add	r27, r27
    1d16:	11 f4       	brne	.+4      	; 0x1d1c <__floatsisf+0x36>
    1d18:	60 ff       	sbrs	r22, 0
    1d1a:	1b c0       	rjmp	.+54     	; 0x1d52 <__floatsisf+0x6c>
    1d1c:	6f 5f       	subi	r22, 0xFF	; 255
    1d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d20:	8f 4f       	sbci	r24, 0xFF	; 255
    1d22:	9f 4f       	sbci	r25, 0xFF	; 255
    1d24:	16 c0       	rjmp	.+44     	; 0x1d52 <__floatsisf+0x6c>
    1d26:	88 23       	and	r24, r24
    1d28:	11 f0       	breq	.+4      	; 0x1d2e <__floatsisf+0x48>
    1d2a:	96 e9       	ldi	r25, 0x96	; 150
    1d2c:	11 c0       	rjmp	.+34     	; 0x1d50 <__floatsisf+0x6a>
    1d2e:	77 23       	and	r23, r23
    1d30:	21 f0       	breq	.+8      	; 0x1d3a <__floatsisf+0x54>
    1d32:	9e e8       	ldi	r25, 0x8E	; 142
    1d34:	87 2f       	mov	r24, r23
    1d36:	76 2f       	mov	r23, r22
    1d38:	05 c0       	rjmp	.+10     	; 0x1d44 <__floatsisf+0x5e>
    1d3a:	66 23       	and	r22, r22
    1d3c:	71 f0       	breq	.+28     	; 0x1d5a <__floatsisf+0x74>
    1d3e:	96 e8       	ldi	r25, 0x86	; 134
    1d40:	86 2f       	mov	r24, r22
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	2a f0       	brmi	.+10     	; 0x1d52 <__floatsisf+0x6c>
    1d48:	9a 95       	dec	r25
    1d4a:	66 0f       	add	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	88 1f       	adc	r24, r24
    1d50:	da f7       	brpl	.-10     	; 0x1d48 <__floatsisf+0x62>
    1d52:	88 0f       	add	r24, r24
    1d54:	96 95       	lsr	r25
    1d56:	87 95       	ror	r24
    1d58:	97 f9       	bld	r25, 7
    1d5a:	08 95       	ret

00001d5c <__fp_inf>:
    1d5c:	97 f9       	bld	r25, 7
    1d5e:	9f 67       	ori	r25, 0x7F	; 127
    1d60:	80 e8       	ldi	r24, 0x80	; 128
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	08 95       	ret

00001d68 <__fp_nan>:
    1d68:	9f ef       	ldi	r25, 0xFF	; 255
    1d6a:	80 ec       	ldi	r24, 0xC0	; 192
    1d6c:	08 95       	ret

00001d6e <__fp_powser>:
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	1f 93       	push	r17
    1d74:	0f 93       	push	r16
    1d76:	ff 92       	push	r15
    1d78:	ef 92       	push	r14
    1d7a:	df 92       	push	r13
    1d7c:	7b 01       	movw	r14, r22
    1d7e:	8c 01       	movw	r16, r24
    1d80:	68 94       	set
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <__fp_powser+0x22>
    1d84:	da 2e       	mov	r13, r26
    1d86:	ef 01       	movw	r28, r30
    1d88:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__mulsf3x>
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e8 94       	clt
    1d90:	a5 91       	lpm	r26, Z+
    1d92:	25 91       	lpm	r18, Z+
    1d94:	35 91       	lpm	r19, Z+
    1d96:	45 91       	lpm	r20, Z+
    1d98:	55 91       	lpm	r21, Z+
    1d9a:	a6 f3       	brts	.-24     	; 0x1d84 <__fp_powser+0x16>
    1d9c:	ef 01       	movw	r28, r30
    1d9e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__addsf3x>
    1da2:	fe 01       	movw	r30, r28
    1da4:	97 01       	movw	r18, r14
    1da6:	a8 01       	movw	r20, r16
    1da8:	da 94       	dec	r13
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <__fp_powser+0x18>
    1dac:	df 90       	pop	r13
    1dae:	ef 90       	pop	r14
    1db0:	ff 90       	pop	r15
    1db2:	0f 91       	pop	r16
    1db4:	1f 91       	pop	r17
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <__fp_pscA>:
    1dbc:	00 24       	eor	r0, r0
    1dbe:	0a 94       	dec	r0
    1dc0:	16 16       	cp	r1, r22
    1dc2:	17 06       	cpc	r1, r23
    1dc4:	18 06       	cpc	r1, r24
    1dc6:	09 06       	cpc	r0, r25
    1dc8:	08 95       	ret

00001dca <__fp_pscB>:
    1dca:	00 24       	eor	r0, r0
    1dcc:	0a 94       	dec	r0
    1dce:	12 16       	cp	r1, r18
    1dd0:	13 06       	cpc	r1, r19
    1dd2:	14 06       	cpc	r1, r20
    1dd4:	05 06       	cpc	r0, r21
    1dd6:	08 95       	ret

00001dd8 <__fp_round>:
    1dd8:	09 2e       	mov	r0, r25
    1dda:	03 94       	inc	r0
    1ddc:	00 0c       	add	r0, r0
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <__fp_round+0xc>
    1de0:	88 23       	and	r24, r24
    1de2:	52 f0       	brmi	.+20     	; 0x1df8 <__fp_round+0x20>
    1de4:	bb 0f       	add	r27, r27
    1de6:	40 f4       	brcc	.+16     	; 0x1df8 <__fp_round+0x20>
    1de8:	bf 2b       	or	r27, r31
    1dea:	11 f4       	brne	.+4      	; 0x1df0 <__fp_round+0x18>
    1dec:	60 ff       	sbrs	r22, 0
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <__fp_round+0x20>
    1df0:	6f 5f       	subi	r22, 0xFF	; 255
    1df2:	7f 4f       	sbci	r23, 0xFF	; 255
    1df4:	8f 4f       	sbci	r24, 0xFF	; 255
    1df6:	9f 4f       	sbci	r25, 0xFF	; 255
    1df8:	08 95       	ret

00001dfa <__fp_split3>:
    1dfa:	57 fd       	sbrc	r21, 7
    1dfc:	90 58       	subi	r25, 0x80	; 128
    1dfe:	44 0f       	add	r20, r20
    1e00:	55 1f       	adc	r21, r21
    1e02:	59 f0       	breq	.+22     	; 0x1e1a <__fp_splitA+0x10>
    1e04:	5f 3f       	cpi	r21, 0xFF	; 255
    1e06:	71 f0       	breq	.+28     	; 0x1e24 <__fp_splitA+0x1a>
    1e08:	47 95       	ror	r20

00001e0a <__fp_splitA>:
    1e0a:	88 0f       	add	r24, r24
    1e0c:	97 fb       	bst	r25, 7
    1e0e:	99 1f       	adc	r25, r25
    1e10:	61 f0       	breq	.+24     	; 0x1e2a <__fp_splitA+0x20>
    1e12:	9f 3f       	cpi	r25, 0xFF	; 255
    1e14:	79 f0       	breq	.+30     	; 0x1e34 <__fp_splitA+0x2a>
    1e16:	87 95       	ror	r24
    1e18:	08 95       	ret
    1e1a:	12 16       	cp	r1, r18
    1e1c:	13 06       	cpc	r1, r19
    1e1e:	14 06       	cpc	r1, r20
    1e20:	55 1f       	adc	r21, r21
    1e22:	f2 cf       	rjmp	.-28     	; 0x1e08 <__fp_split3+0xe>
    1e24:	46 95       	lsr	r20
    1e26:	f1 df       	rcall	.-30     	; 0x1e0a <__fp_splitA>
    1e28:	08 c0       	rjmp	.+16     	; 0x1e3a <__fp_splitA+0x30>
    1e2a:	16 16       	cp	r1, r22
    1e2c:	17 06       	cpc	r1, r23
    1e2e:	18 06       	cpc	r1, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	f1 cf       	rjmp	.-30     	; 0x1e16 <__fp_splitA+0xc>
    1e34:	86 95       	lsr	r24
    1e36:	71 05       	cpc	r23, r1
    1e38:	61 05       	cpc	r22, r1
    1e3a:	08 94       	sec
    1e3c:	08 95       	ret

00001e3e <__fp_zero>:
    1e3e:	e8 94       	clt

00001e40 <__fp_szero>:
    1e40:	bb 27       	eor	r27, r27
    1e42:	66 27       	eor	r22, r22
    1e44:	77 27       	eor	r23, r23
    1e46:	cb 01       	movw	r24, r22
    1e48:	97 f9       	bld	r25, 7
    1e4a:	08 95       	ret

00001e4c <__gesf2>:
    1e4c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_cmp>
    1e50:	08 f4       	brcc	.+2      	; 0x1e54 <__gesf2+0x8>
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	08 95       	ret

00001e56 <inverse>:
    1e56:	9b 01       	movw	r18, r22
    1e58:	ac 01       	movw	r20, r24
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	80 e8       	ldi	r24, 0x80	; 128
    1e60:	9f e3       	ldi	r25, 0x3F	; 63
    1e62:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__divsf3>

00001e66 <__mulsf3>:
    1e66:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__mulsf3x>
    1e6a:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__fp_round>
    1e6e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fp_pscA>
    1e72:	38 f0       	brcs	.+14     	; 0x1e82 <__mulsf3+0x1c>
    1e74:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__fp_pscB>
    1e78:	20 f0       	brcs	.+8      	; 0x1e82 <__mulsf3+0x1c>
    1e7a:	95 23       	and	r25, r21
    1e7c:	11 f0       	breq	.+4      	; 0x1e82 <__mulsf3+0x1c>
    1e7e:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_inf>
    1e82:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_nan>
    1e86:	11 24       	eor	r1, r1
    1e88:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__fp_szero>

00001e8c <__mulsf3x>:
    1e8c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__fp_split3>
    1e90:	70 f3       	brcs	.-36     	; 0x1e6e <__mulsf3+0x8>

00001e92 <__mulsf3_pse>:
    1e92:	95 9f       	mul	r25, r21
    1e94:	c1 f3       	breq	.-16     	; 0x1e86 <__mulsf3+0x20>
    1e96:	95 0f       	add	r25, r21
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	55 1f       	adc	r21, r21
    1e9c:	62 9f       	mul	r22, r18
    1e9e:	f0 01       	movw	r30, r0
    1ea0:	72 9f       	mul	r23, r18
    1ea2:	bb 27       	eor	r27, r27
    1ea4:	f0 0d       	add	r31, r0
    1ea6:	b1 1d       	adc	r27, r1
    1ea8:	63 9f       	mul	r22, r19
    1eaa:	aa 27       	eor	r26, r26
    1eac:	f0 0d       	add	r31, r0
    1eae:	b1 1d       	adc	r27, r1
    1eb0:	aa 1f       	adc	r26, r26
    1eb2:	64 9f       	mul	r22, r20
    1eb4:	66 27       	eor	r22, r22
    1eb6:	b0 0d       	add	r27, r0
    1eb8:	a1 1d       	adc	r26, r1
    1eba:	66 1f       	adc	r22, r22
    1ebc:	82 9f       	mul	r24, r18
    1ebe:	22 27       	eor	r18, r18
    1ec0:	b0 0d       	add	r27, r0
    1ec2:	a1 1d       	adc	r26, r1
    1ec4:	62 1f       	adc	r22, r18
    1ec6:	73 9f       	mul	r23, r19
    1ec8:	b0 0d       	add	r27, r0
    1eca:	a1 1d       	adc	r26, r1
    1ecc:	62 1f       	adc	r22, r18
    1ece:	83 9f       	mul	r24, r19
    1ed0:	a0 0d       	add	r26, r0
    1ed2:	61 1d       	adc	r22, r1
    1ed4:	22 1f       	adc	r18, r18
    1ed6:	74 9f       	mul	r23, r20
    1ed8:	33 27       	eor	r19, r19
    1eda:	a0 0d       	add	r26, r0
    1edc:	61 1d       	adc	r22, r1
    1ede:	23 1f       	adc	r18, r19
    1ee0:	84 9f       	mul	r24, r20
    1ee2:	60 0d       	add	r22, r0
    1ee4:	21 1d       	adc	r18, r1
    1ee6:	82 2f       	mov	r24, r18
    1ee8:	76 2f       	mov	r23, r22
    1eea:	6a 2f       	mov	r22, r26
    1eec:	11 24       	eor	r1, r1
    1eee:	9f 57       	subi	r25, 0x7F	; 127
    1ef0:	50 40       	sbci	r21, 0x00	; 0
    1ef2:	9a f0       	brmi	.+38     	; 0x1f1a <__mulsf3_pse+0x88>
    1ef4:	f1 f0       	breq	.+60     	; 0x1f32 <__mulsf3_pse+0xa0>
    1ef6:	88 23       	and	r24, r24
    1ef8:	4a f0       	brmi	.+18     	; 0x1f0c <__mulsf3_pse+0x7a>
    1efa:	ee 0f       	add	r30, r30
    1efc:	ff 1f       	adc	r31, r31
    1efe:	bb 1f       	adc	r27, r27
    1f00:	66 1f       	adc	r22, r22
    1f02:	77 1f       	adc	r23, r23
    1f04:	88 1f       	adc	r24, r24
    1f06:	91 50       	subi	r25, 0x01	; 1
    1f08:	50 40       	sbci	r21, 0x00	; 0
    1f0a:	a9 f7       	brne	.-22     	; 0x1ef6 <__mulsf3_pse+0x64>
    1f0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f0e:	51 05       	cpc	r21, r1
    1f10:	80 f0       	brcs	.+32     	; 0x1f32 <__mulsf3_pse+0xa0>
    1f12:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_inf>
    1f16:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__fp_szero>
    1f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1c:	e4 f3       	brlt	.-8      	; 0x1f16 <__mulsf3_pse+0x84>
    1f1e:	98 3e       	cpi	r25, 0xE8	; 232
    1f20:	d4 f3       	brlt	.-12     	; 0x1f16 <__mulsf3_pse+0x84>
    1f22:	86 95       	lsr	r24
    1f24:	77 95       	ror	r23
    1f26:	67 95       	ror	r22
    1f28:	b7 95       	ror	r27
    1f2a:	f7 95       	ror	r31
    1f2c:	e7 95       	ror	r30
    1f2e:	9f 5f       	subi	r25, 0xFF	; 255
    1f30:	c1 f7       	brne	.-16     	; 0x1f22 <__mulsf3_pse+0x90>
    1f32:	fe 2b       	or	r31, r30
    1f34:	88 0f       	add	r24, r24
    1f36:	91 1d       	adc	r25, r1
    1f38:	96 95       	lsr	r25
    1f3a:	87 95       	ror	r24
    1f3c:	97 f9       	bld	r25, 7
    1f3e:	08 95       	ret
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <__mulsf3_pse+0xb6>
    1f42:	16 f4       	brtc	.+4      	; 0x1f48 <__mulsf3_pse+0xb6>
    1f44:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_nan>
    1f48:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__fp_mpack>

00001f4c <sqrt>:
    1f4c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__fp_splitA>
    1f50:	b8 f3       	brcs	.-18     	; 0x1f40 <__mulsf3_pse+0xae>
    1f52:	99 23       	and	r25, r25
    1f54:	c9 f3       	breq	.-14     	; 0x1f48 <__mulsf3_pse+0xb6>
    1f56:	b6 f3       	brts	.-20     	; 0x1f44 <__mulsf3_pse+0xb2>
    1f58:	9f 57       	subi	r25, 0x7F	; 127
    1f5a:	55 0b       	sbc	r21, r21
    1f5c:	87 ff       	sbrs	r24, 7
    1f5e:	0e 94 1c 10 	call	0x2038	; 0x2038 <__fp_norm2>
    1f62:	00 24       	eor	r0, r0
    1f64:	a0 e6       	ldi	r26, 0x60	; 96
    1f66:	40 ea       	ldi	r20, 0xA0	; 160
    1f68:	90 01       	movw	r18, r0
    1f6a:	80 58       	subi	r24, 0x80	; 128
    1f6c:	56 95       	lsr	r21
    1f6e:	97 95       	ror	r25
    1f70:	28 f4       	brcc	.+10     	; 0x1f7c <sqrt+0x30>
    1f72:	80 5c       	subi	r24, 0xC0	; 192
    1f74:	66 0f       	add	r22, r22
    1f76:	77 1f       	adc	r23, r23
    1f78:	88 1f       	adc	r24, r24
    1f7a:	20 f0       	brcs	.+8      	; 0x1f84 <sqrt+0x38>
    1f7c:	26 17       	cp	r18, r22
    1f7e:	37 07       	cpc	r19, r23
    1f80:	48 07       	cpc	r20, r24
    1f82:	30 f4       	brcc	.+12     	; 0x1f90 <sqrt+0x44>
    1f84:	62 1b       	sub	r22, r18
    1f86:	73 0b       	sbc	r23, r19
    1f88:	84 0b       	sbc	r24, r20
    1f8a:	20 29       	or	r18, r0
    1f8c:	31 29       	or	r19, r1
    1f8e:	4a 2b       	or	r20, r26
    1f90:	a6 95       	lsr	r26
    1f92:	17 94       	ror	r1
    1f94:	07 94       	ror	r0
    1f96:	20 25       	eor	r18, r0
    1f98:	31 25       	eor	r19, r1
    1f9a:	4a 27       	eor	r20, r26
    1f9c:	58 f7       	brcc	.-42     	; 0x1f74 <sqrt+0x28>
    1f9e:	66 0f       	add	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	88 1f       	adc	r24, r24
    1fa4:	20 f0       	brcs	.+8      	; 0x1fae <sqrt+0x62>
    1fa6:	26 17       	cp	r18, r22
    1fa8:	37 07       	cpc	r19, r23
    1faa:	48 07       	cpc	r20, r24
    1fac:	30 f4       	brcc	.+12     	; 0x1fba <sqrt+0x6e>
    1fae:	62 0b       	sbc	r22, r18
    1fb0:	73 0b       	sbc	r23, r19
    1fb2:	84 0b       	sbc	r24, r20
    1fb4:	20 0d       	add	r18, r0
    1fb6:	31 1d       	adc	r19, r1
    1fb8:	41 1d       	adc	r20, r1
    1fba:	a0 95       	com	r26
    1fbc:	81 f7       	brne	.-32     	; 0x1f9e <sqrt+0x52>
    1fbe:	b9 01       	movw	r22, r18
    1fc0:	84 2f       	mov	r24, r20
    1fc2:	91 58       	subi	r25, 0x81	; 129
    1fc4:	88 0f       	add	r24, r24
    1fc6:	96 95       	lsr	r25
    1fc8:	87 95       	ror	r24
    1fca:	08 95       	ret

00001fcc <square>:
    1fcc:	9b 01       	movw	r18, r22
    1fce:	ac 01       	movw	r20, r24
    1fd0:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__mulsf3>

00001fd4 <__fp_cmp>:
    1fd4:	99 0f       	add	r25, r25
    1fd6:	00 08       	sbc	r0, r0
    1fd8:	55 0f       	add	r21, r21
    1fda:	aa 0b       	sbc	r26, r26
    1fdc:	e0 e8       	ldi	r30, 0x80	; 128
    1fde:	fe ef       	ldi	r31, 0xFE	; 254
    1fe0:	16 16       	cp	r1, r22
    1fe2:	17 06       	cpc	r1, r23
    1fe4:	e8 07       	cpc	r30, r24
    1fe6:	f9 07       	cpc	r31, r25
    1fe8:	c0 f0       	brcs	.+48     	; 0x201a <__fp_cmp+0x46>
    1fea:	12 16       	cp	r1, r18
    1fec:	13 06       	cpc	r1, r19
    1fee:	e4 07       	cpc	r30, r20
    1ff0:	f5 07       	cpc	r31, r21
    1ff2:	98 f0       	brcs	.+38     	; 0x201a <__fp_cmp+0x46>
    1ff4:	62 1b       	sub	r22, r18
    1ff6:	73 0b       	sbc	r23, r19
    1ff8:	84 0b       	sbc	r24, r20
    1ffa:	95 0b       	sbc	r25, r21
    1ffc:	39 f4       	brne	.+14     	; 0x200c <__fp_cmp+0x38>
    1ffe:	0a 26       	eor	r0, r26
    2000:	61 f0       	breq	.+24     	; 0x201a <__fp_cmp+0x46>
    2002:	23 2b       	or	r18, r19
    2004:	24 2b       	or	r18, r20
    2006:	25 2b       	or	r18, r21
    2008:	21 f4       	brne	.+8      	; 0x2012 <__fp_cmp+0x3e>
    200a:	08 95       	ret
    200c:	0a 26       	eor	r0, r26
    200e:	09 f4       	brne	.+2      	; 0x2012 <__fp_cmp+0x3e>
    2010:	a1 40       	sbci	r26, 0x01	; 1
    2012:	a6 95       	lsr	r26
    2014:	8f ef       	ldi	r24, 0xFF	; 255
    2016:	81 1d       	adc	r24, r1
    2018:	81 1d       	adc	r24, r1
    201a:	08 95       	ret

0000201c <__fp_mpack>:
    201c:	9f 3f       	cpi	r25, 0xFF	; 255
    201e:	31 f0       	breq	.+12     	; 0x202c <__fp_mpack_finite+0xc>

00002020 <__fp_mpack_finite>:
    2020:	91 50       	subi	r25, 0x01	; 1
    2022:	20 f4       	brcc	.+8      	; 0x202c <__fp_mpack_finite+0xc>
    2024:	87 95       	ror	r24
    2026:	77 95       	ror	r23
    2028:	67 95       	ror	r22
    202a:	b7 95       	ror	r27
    202c:	88 0f       	add	r24, r24
    202e:	91 1d       	adc	r25, r1
    2030:	96 95       	lsr	r25
    2032:	87 95       	ror	r24
    2034:	97 f9       	bld	r25, 7
    2036:	08 95       	ret

00002038 <__fp_norm2>:
    2038:	91 50       	subi	r25, 0x01	; 1
    203a:	50 40       	sbci	r21, 0x00	; 0
    203c:	66 0f       	add	r22, r22
    203e:	77 1f       	adc	r23, r23
    2040:	88 1f       	adc	r24, r24
    2042:	d2 f7       	brpl	.-12     	; 0x2038 <__fp_norm2>
    2044:	08 95       	ret

00002046 <__udivmodsi4>:
    2046:	a1 e2       	ldi	r26, 0x21	; 33
    2048:	1a 2e       	mov	r1, r26
    204a:	aa 1b       	sub	r26, r26
    204c:	bb 1b       	sub	r27, r27
    204e:	fd 01       	movw	r30, r26
    2050:	0d c0       	rjmp	.+26     	; 0x206c <__udivmodsi4_ep>

00002052 <__udivmodsi4_loop>:
    2052:	aa 1f       	adc	r26, r26
    2054:	bb 1f       	adc	r27, r27
    2056:	ee 1f       	adc	r30, r30
    2058:	ff 1f       	adc	r31, r31
    205a:	a2 17       	cp	r26, r18
    205c:	b3 07       	cpc	r27, r19
    205e:	e4 07       	cpc	r30, r20
    2060:	f5 07       	cpc	r31, r21
    2062:	20 f0       	brcs	.+8      	; 0x206c <__udivmodsi4_ep>
    2064:	a2 1b       	sub	r26, r18
    2066:	b3 0b       	sbc	r27, r19
    2068:	e4 0b       	sbc	r30, r20
    206a:	f5 0b       	sbc	r31, r21

0000206c <__udivmodsi4_ep>:
    206c:	66 1f       	adc	r22, r22
    206e:	77 1f       	adc	r23, r23
    2070:	88 1f       	adc	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	1a 94       	dec	r1
    2076:	69 f7       	brne	.-38     	; 0x2052 <__udivmodsi4_loop>
    2078:	60 95       	com	r22
    207a:	70 95       	com	r23
    207c:	80 95       	com	r24
    207e:	90 95       	com	r25
    2080:	9b 01       	movw	r18, r22
    2082:	ac 01       	movw	r20, r24
    2084:	bd 01       	movw	r22, r26
    2086:	cf 01       	movw	r24, r30
    2088:	08 95       	ret

0000208a <__umulhisi3>:
    208a:	a2 9f       	mul	r26, r18
    208c:	b0 01       	movw	r22, r0
    208e:	b3 9f       	mul	r27, r19
    2090:	c0 01       	movw	r24, r0
    2092:	a3 9f       	mul	r26, r19
    2094:	70 0d       	add	r23, r0
    2096:	81 1d       	adc	r24, r1
    2098:	11 24       	eor	r1, r1
    209a:	91 1d       	adc	r25, r1
    209c:	b2 9f       	mul	r27, r18
    209e:	70 0d       	add	r23, r0
    20a0:	81 1d       	adc	r24, r1
    20a2:	11 24       	eor	r1, r1
    20a4:	91 1d       	adc	r25, r1
    20a6:	08 95       	ret

000020a8 <_exit>:
    20a8:	f8 94       	cli

000020aa <__stop_program>:
    20aa:	ff cf       	rjmp	.-2      	; 0x20aa <__stop_program>
