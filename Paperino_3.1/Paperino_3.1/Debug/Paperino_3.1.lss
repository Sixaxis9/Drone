
Paperino_3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001980  00001a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800120  00800120  00001a34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fe3  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001303  00000000  00000000  00004db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a53  00000000  00000000  000060ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a4  00000000  00000000  00007b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f46  00000000  00000000  000084b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d37  00000000  00000000  000093fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000b131  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__vector_7>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_16>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_20>
      54:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__vector_21>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__vector_25>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_31>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__vector_35>
      90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	da e0       	ldi	r29, 0x0A	; 10
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e0 e8       	ldi	r30, 0x80	; 128
      c0:	f9 e1       	ldi	r31, 0x19	; 25
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a0 32       	cpi	r26, 0x20	; 32
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	21 e0       	ldi	r18, 0x01	; 1
      d0:	a0 e2       	ldi	r26, 0x20	; 32
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a2 39       	cpi	r26, 0x92	; 146
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 24 06 	call	0xc48	; 0xc48 <main>
      e2:	0c 94 be 0c 	jmp	0x197c	; 0x197c <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <selected_value>:
#include "IMU.h"
#include "USART.h"
#include "Timer.h"

void selected_value(uint8_t choise){
	switch(choise){
      ea:	8b 36       	cpi	r24, 0x6B	; 107
      ec:	09 f4       	brne	.+2      	; 0xf0 <selected_value+0x6>
      ee:	df c0       	rjmp	.+446    	; 0x2ae <selected_value+0x1c4>
      f0:	40 f5       	brcc	.+80     	; 0x142 <selected_value+0x58>
      f2:	85 36       	cpi	r24, 0x65	; 101
      f4:	09 f4       	brne	.+2      	; 0xf8 <selected_value+0xe>
      f6:	91 c0       	rjmp	.+290    	; 0x21a <selected_value+0x130>
      f8:	90 f4       	brcc	.+36     	; 0x11e <selected_value+0x34>
      fa:	82 36       	cpi	r24, 0x62	; 98
      fc:	09 f4       	brne	.+2      	; 0x100 <selected_value+0x16>
      fe:	5a c0       	rjmp	.+180    	; 0x1b4 <selected_value+0xca>
     100:	38 f4       	brcc	.+14     	; 0x110 <selected_value+0x26>
     102:	88 23       	and	r24, r24
     104:	09 f4       	brne	.+2      	; 0x108 <selected_value+0x1e>
     106:	1d c1       	rjmp	.+570    	; 0x342 <selected_value+0x258>
     108:	81 36       	cpi	r24, 0x61	; 97
     10a:	09 f4       	brne	.+2      	; 0x10e <selected_value+0x24>
     10c:	42 c0       	rjmp	.+132    	; 0x192 <selected_value+0xa8>
     10e:	1d c1       	rjmp	.+570    	; 0x34a <selected_value+0x260>
     110:	83 36       	cpi	r24, 0x63	; 99
     112:	09 f4       	brne	.+2      	; 0x116 <selected_value+0x2c>
     114:	60 c0       	rjmp	.+192    	; 0x1d6 <selected_value+0xec>
     116:	84 36       	cpi	r24, 0x64	; 100
     118:	09 f4       	brne	.+2      	; 0x11c <selected_value+0x32>
     11a:	6e c0       	rjmp	.+220    	; 0x1f8 <selected_value+0x10e>
     11c:	16 c1       	rjmp	.+556    	; 0x34a <selected_value+0x260>
     11e:	88 36       	cpi	r24, 0x68	; 104
     120:	09 f4       	brne	.+2      	; 0x124 <selected_value+0x3a>
     122:	a3 c0       	rjmp	.+326    	; 0x26a <selected_value+0x180>
     124:	38 f4       	brcc	.+14     	; 0x134 <selected_value+0x4a>
     126:	86 36       	cpi	r24, 0x66	; 102
     128:	09 f4       	brne	.+2      	; 0x12c <selected_value+0x42>
     12a:	88 c0       	rjmp	.+272    	; 0x23c <selected_value+0x152>
     12c:	87 36       	cpi	r24, 0x67	; 103
     12e:	09 f4       	brne	.+2      	; 0x132 <selected_value+0x48>
     130:	96 c0       	rjmp	.+300    	; 0x25e <selected_value+0x174>
     132:	0b c1       	rjmp	.+534    	; 0x34a <selected_value+0x260>
     134:	89 36       	cpi	r24, 0x69	; 105
     136:	09 f4       	brne	.+2      	; 0x13a <selected_value+0x50>
     138:	9e c0       	rjmp	.+316    	; 0x276 <selected_value+0x18c>
     13a:	8a 36       	cpi	r24, 0x6A	; 106
     13c:	09 f4       	brne	.+2      	; 0x140 <selected_value+0x56>
     13e:	a9 c0       	rjmp	.+338    	; 0x292 <selected_value+0x1a8>
     140:	04 c1       	rjmp	.+520    	; 0x34a <selected_value+0x260>
     142:	81 37       	cpi	r24, 0x71	; 113
     144:	09 f4       	brne	.+2      	; 0x148 <selected_value+0x5e>
     146:	e5 c0       	rjmp	.+458    	; 0x312 <selected_value+0x228>
     148:	90 f4       	brcc	.+36     	; 0x16e <selected_value+0x84>
     14a:	8e 36       	cpi	r24, 0x6E	; 110
     14c:	09 f4       	brne	.+2      	; 0x150 <selected_value+0x66>
     14e:	d0 c0       	rjmp	.+416    	; 0x2f0 <selected_value+0x206>
     150:	38 f4       	brcc	.+14     	; 0x160 <selected_value+0x76>
     152:	8c 36       	cpi	r24, 0x6C	; 108
     154:	09 f4       	brne	.+2      	; 0x158 <selected_value+0x6e>
     156:	b9 c0       	rjmp	.+370    	; 0x2ca <selected_value+0x1e0>
     158:	8d 36       	cpi	r24, 0x6D	; 109
     15a:	09 f4       	brne	.+2      	; 0x15e <selected_value+0x74>
     15c:	c4 c0       	rjmp	.+392    	; 0x2e6 <selected_value+0x1fc>
     15e:	f5 c0       	rjmp	.+490    	; 0x34a <selected_value+0x260>
     160:	8f 36       	cpi	r24, 0x6F	; 111
     162:	09 f4       	brne	.+2      	; 0x166 <selected_value+0x7c>
     164:	ca c0       	rjmp	.+404    	; 0x2fa <selected_value+0x210>
     166:	80 37       	cpi	r24, 0x70	; 112
     168:	09 f4       	brne	.+2      	; 0x16c <selected_value+0x82>
     16a:	ce c0       	rjmp	.+412    	; 0x308 <selected_value+0x21e>
     16c:	ee c0       	rjmp	.+476    	; 0x34a <selected_value+0x260>
     16e:	84 37       	cpi	r24, 0x74	; 116
     170:	09 f4       	brne	.+2      	; 0x174 <selected_value+0x8a>
     172:	de c0       	rjmp	.+444    	; 0x330 <selected_value+0x246>
     174:	38 f4       	brcc	.+14     	; 0x184 <selected_value+0x9a>
     176:	82 37       	cpi	r24, 0x72	; 114
     178:	09 f4       	brne	.+2      	; 0x17c <selected_value+0x92>
     17a:	d0 c0       	rjmp	.+416    	; 0x31c <selected_value+0x232>
     17c:	83 37       	cpi	r24, 0x73	; 115
     17e:	09 f4       	brne	.+2      	; 0x182 <selected_value+0x98>
     180:	d2 c0       	rjmp	.+420    	; 0x326 <selected_value+0x23c>
     182:	e3 c0       	rjmp	.+454    	; 0x34a <selected_value+0x260>
     184:	85 37       	cpi	r24, 0x75	; 117
     186:	09 f4       	brne	.+2      	; 0x18a <selected_value+0xa0>
     188:	e3 c0       	rjmp	.+454    	; 0x350 <selected_value+0x266>
     18a:	8f 3f       	cpi	r24, 0xFF	; 255
     18c:	09 f4       	brne	.+2      	; 0x190 <selected_value+0xa6>
     18e:	d5 c0       	rjmp	.+426    	; 0x33a <selected_value+0x250>
     190:	dc c0       	rjmp	.+440    	; 0x34a <selected_value+0x260>
		case ACCX:
		computed_acceleration(0);
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	0e 94 22 05 	call	0xa44	; 0xa44 <computed_acceleration>
		USART_Transmit(accx);
     198:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <accx>
     19c:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <accx+0x1>
     1a0:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <accx+0x2>
     1a4:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <accx+0x3>
     1a8:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     1ac:	86 2f       	mov	r24, r22
     1ae:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     1b2:	08 95       	ret
		case ACCY:
		computed_acceleration(0);
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0e 94 22 05 	call	0xa44	; 0xa44 <computed_acceleration>
		USART_Transmit(accy);
     1ba:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <accy>
     1be:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <accy+0x1>
     1c2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <accy+0x2>
     1c6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <accy+0x3>
     1ca:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     1ce:	86 2f       	mov	r24, r22
     1d0:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     1d4:	08 95       	ret
		case ACCZ:
		computed_acceleration(0);
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	0e 94 22 05 	call	0xa44	; 0xa44 <computed_acceleration>
		USART_Transmit(accz);
     1dc:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <accz>
     1e0:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <accz+0x1>
     1e4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <accz+0x2>
     1e8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <accz+0x3>
     1ec:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     1f0:	86 2f       	mov	r24, r22
     1f2:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     1f6:	08 95       	ret
		case GYROX:
		computed_gyroscope(0);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	0e 94 ac 05 	call	0xb58	; 0xb58 <computed_gyroscope>
		USART_Transmit(gyrox);
     1fe:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <gyrox>
     202:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <gyrox+0x1>
     206:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <gyrox+0x2>
     20a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <gyrox+0x3>
     20e:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     212:	86 2f       	mov	r24, r22
     214:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     218:	08 95       	ret
		case GYROY:
		computed_gyroscope(0);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 ac 05 	call	0xb58	; 0xb58 <computed_gyroscope>
		USART_Transmit(gyroy);
     220:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <gyroy>
     224:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <gyroy+0x1>
     228:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <gyroy+0x2>
     22c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <gyroy+0x3>
     230:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     234:	86 2f       	mov	r24, r22
     236:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     23a:	08 95       	ret
		case GYROZ:
		computed_gyroscope(0);
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	0e 94 ac 05 	call	0xb58	; 0xb58 <computed_gyroscope>
		USART_Transmit(gyroz);
     242:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <gyroz>
     246:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <gyroz+0x1>
     24a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <gyroz+0x2>
     24e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <gyroz+0x3>
     252:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     256:	86 2f       	mov	r24, r22
     258:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     25c:	08 95       	ret
		case TEMP:
		USART_Transmit(temperature(0));
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <temperature>
     264:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     268:	08 95       	ret
		case WHOIAM:
		USART_Transmit(IMU_who_i_am(0));
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <IMU_who_i_am>
     270:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     274:	08 95       	ret
		case ANGLEACCX:
		USART_Transmit(Angle_X_Acc);
     276:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <Angle_X_Acc>
     27a:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <Angle_X_Acc+0x1>
     27e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <Angle_X_Acc+0x2>
     282:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <Angle_X_Acc+0x3>
     286:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     28a:	86 2f       	mov	r24, r22
     28c:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     290:	08 95       	ret
		case ANGLEACCY:
		USART_Transmit(Angle_Y_Acc);
     292:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <Angle_Y_Acc>
     296:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <Angle_Y_Acc+0x1>
     29a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <Angle_Y_Acc+0x2>
     29e:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <Angle_Y_Acc+0x3>
     2a2:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     2a6:	86 2f       	mov	r24, r22
     2a8:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     2ac:	08 95       	ret
		case ANGLEGYROX:
		USART_Transmit(Angle_X_Gyro);
     2ae:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <Angle_X_Gyro>
     2b2:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <Angle_X_Gyro+0x1>
     2b6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <Angle_X_Gyro+0x2>
     2ba:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <Angle_X_Gyro+0x3>
     2be:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     2c2:	86 2f       	mov	r24, r22
     2c4:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     2c8:	08 95       	ret
		case ANGLEGYROY:
		USART_Transmit(Angle_Y_Gyro);
     2ca:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <Angle_Y_Gyro>
     2ce:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <Angle_Y_Gyro+0x1>
     2d2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Angle_Y_Gyro+0x2>
     2d6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Angle_Y_Gyro+0x3>
     2da:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     2de:	86 2f       	mov	r24, r22
     2e0:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     2e4:	08 95       	ret
		case ANGLEX:
		USART_Transmit(AngleX);
     2e6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <AngleX>
     2ea:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     2ee:	08 95       	ret
		case ANGLEY:
		USART_Transmit(AngleY);
     2f0:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <AngleY>
     2f4:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     2f8:	08 95       	ret
		case TIME:
		USART_Transmit((uint8_t)system_tick_MG);
     2fa:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <system_tick_MG>
     2fe:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <system_tick_MG+0x1>
     302:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     306:	08 95       	ret
		case THROTTLE:
		USART_Transmit(throttle);
     308:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <throttle>
     30c:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     310:	08 95       	ret
		case PITCH:
		USART_Transmit(pitch);
     312:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <pitch>
     316:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     31a:	08 95       	ret
		case ROLL:
		USART_Transmit(roll);
     31c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <roll>
     320:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     324:	08 95       	ret
		case YAW:
		USART_Transmit(yaw);
     326:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <yaw>
     32a:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     32e:	08 95       	ret
		case AUX1:
		USART_Transmit(aux1);
     330:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <aux1>
     334:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     338:	08 95       	ret
		case AUX2:
		break;
		case 255:
		USART_Transmit('p');
     33a:	80 e7       	ldi	r24, 0x70	; 112
     33c:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     340:	08 95       	ret
		case 0:
		USART_Transmit('q');
     342:	81 e7       	ldi	r24, 0x71	; 113
     344:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		break;
     348:	08 95       	ret
		default:
		USART_Transmit('e');
     34a:	85 e6       	ldi	r24, 0x65	; 101
     34c:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     350:	08 95       	ret

00000352 <TWI_init>:
     352:	8c e0       	ldi	r24, 0x0C	; 12
     354:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     358:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     35c:	08 95       	ret

0000035e <TWI_start>:
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	84 ea       	ldi	r24, 0xA4	; 164
     364:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     368:	ec eb       	ldi	r30, 0xBC	; 188
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	88 23       	and	r24, r24
     370:	ec f7       	brge	.-6      	; 0x36c <TWI_start+0xe>
     372:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     376:	88 7f       	andi	r24, 0xF8	; 248
     378:	88 30       	cpi	r24, 0x08	; 8
     37a:	e1 f0       	breq	.+56     	; 0x3b4 <TWI_start+0x56>
     37c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     380:	88 7f       	andi	r24, 0xF8	; 248
     382:	80 31       	cpi	r24, 0x10	; 16
     384:	c9 f0       	breq	.+50     	; 0x3b8 <TWI_start+0x5a>
     386:	68 e0       	ldi	r22, 0x08	; 8
     388:	87 e1       	ldi	r24, 0x17	; 23
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     390:	67 e0       	ldi	r22, 0x07	; 7
     392:	80 e1       	ldi	r24, 0x10	; 16
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     39a:	c9 eb       	ldi	r28, 0xB9	; 185
     39c:	d0 e0       	ldi	r29, 0x00	; 0
     39e:	88 81       	ld	r24, Y
     3a0:	88 7f       	andi	r24, 0xF8	; 248
     3a2:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     3a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3aa:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     3ae:	88 81       	ld	r24, Y
     3b0:	88 7f       	andi	r24, 0xF8	; 248
     3b2:	03 c0       	rjmp	.+6      	; 0x3ba <TWI_start+0x5c>
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <TWI_start+0x5c>
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <TWI_address>:
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	80 6d       	ori	r24, 0xD0	; 208
     3c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3ca:	84 e8       	ldi	r24, 0x84	; 132
     3cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3d0:	ec eb       	ldi	r30, 0xBC	; 188
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	88 23       	and	r24, r24
     3d8:	ec f7       	brge	.-6      	; 0x3d4 <TWI_address+0x14>
     3da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	80 34       	cpi	r24, 0x40	; 64
     3e2:	e1 f0       	breq	.+56     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3e8:	88 7f       	andi	r24, 0xF8	; 248
     3ea:	88 31       	cpi	r24, 0x18	; 24
     3ec:	c9 f0       	breq	.+50     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3ee:	68 e0       	ldi	r22, 0x08	; 8
     3f0:	87 e1       	ldi	r24, 0x17	; 23
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     3f8:	66 e0       	ldi	r22, 0x06	; 6
     3fa:	8a e0       	ldi	r24, 0x0A	; 10
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     402:	c9 eb       	ldi	r28, 0xB9	; 185
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	88 81       	ld	r24, Y
     408:	88 7f       	andi	r24, 0xF8	; 248
     40a:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     40e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     412:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     416:	88 81       	ld	r24, Y
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	03 c0       	rjmp	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	01 c0       	rjmp	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <TWI_send>:
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     430:	84 e8       	ldi	r24, 0x84	; 132
     432:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     436:	ec eb       	ldi	r30, 0xBC	; 188
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	88 23       	and	r24, r24
     43e:	ec f7       	brge	.-6      	; 0x43a <TWI_send+0x12>
     440:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     444:	88 7f       	andi	r24, 0xF8	; 248
     446:	88 32       	cpi	r24, 0x28	; 40
     448:	b9 f0       	breq	.+46     	; 0x478 <TWI_send+0x50>
     44a:	68 e0       	ldi	r22, 0x08	; 8
     44c:	87 e1       	ldi	r24, 0x17	; 23
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     454:	66 e0       	ldi	r22, 0x06	; 6
     456:	8a e0       	ldi	r24, 0x0A	; 10
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     45e:	c9 eb       	ldi	r28, 0xB9	; 185
     460:	d0 e0       	ldi	r29, 0x00	; 0
     462:	88 81       	ld	r24, Y
     464:	88 7f       	andi	r24, 0xF8	; 248
     466:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     46a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     46e:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     472:	88 81       	ld	r24, Y
     474:	88 7f       	andi	r24, 0xF8	; 248
     476:	01 c0       	rjmp	.+2      	; 0x47a <TWI_send+0x52>
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <TWI_receive_ack>:
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	84 ec       	ldi	r24, 0xC4	; 196
     486:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     48a:	ec eb       	ldi	r30, 0xBC	; 188
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	88 23       	and	r24, r24
     492:	ec f7       	brge	.-6      	; 0x48e <TWI_receive_ack+0xe>
     494:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     498:	88 7f       	andi	r24, 0xF8	; 248
     49a:	80 35       	cpi	r24, 0x50	; 80
     49c:	19 f4       	brne	.+6      	; 0x4a4 <TWI_receive_ack+0x24>
     49e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     4a2:	16 c0       	rjmp	.+44     	; 0x4d0 <TWI_receive_ack+0x50>
     4a4:	68 e0       	ldi	r22, 0x08	; 8
     4a6:	87 e1       	ldi	r24, 0x17	; 23
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     4ae:	69 e0       	ldi	r22, 0x09	; 9
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     4b8:	c9 eb       	ldi	r28, 0xB9	; 185
     4ba:	d0 e0       	ldi	r29, 0x00	; 0
     4bc:	88 81       	ld	r24, Y
     4be:	88 7f       	andi	r24, 0xF8	; 248
     4c0:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     4c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4c8:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     4cc:	88 81       	ld	r24, Y
     4ce:	88 7f       	andi	r24, 0xF8	; 248
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <TWI_receive_nack>:
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	84 e8       	ldi	r24, 0x84	; 132
     4dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4e0:	ec eb       	ldi	r30, 0xBC	; 188
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	88 23       	and	r24, r24
     4e8:	ec f7       	brge	.-6      	; 0x4e4 <TWI_receive_nack+0xe>
     4ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4ee:	88 7f       	andi	r24, 0xF8	; 248
     4f0:	88 35       	cpi	r24, 0x58	; 88
     4f2:	19 f4       	brne	.+6      	; 0x4fa <TWI_receive_nack+0x24>
     4f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     4f8:	16 c0       	rjmp	.+44     	; 0x526 <TWI_receive_nack+0x50>
     4fa:	68 e0       	ldi	r22, 0x08	; 8
     4fc:	87 e1       	ldi	r24, 0x17	; 23
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     504:	69 e0       	ldi	r22, 0x09	; 9
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 17 0a 	call	0x142e	; 0x142e <USART_String>
     50e:	c9 eb       	ldi	r28, 0xB9	; 185
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	88 81       	ld	r24, Y
     514:	88 7f       	andi	r24, 0xF8	; 248
     516:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     51a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     51e:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     522:	88 81       	ld	r24, Y
     524:	88 7f       	andi	r24, 0xF8	; 248
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <TWI_stop>:
     52c:	84 e9       	ldi	r24, 0x94	; 148
     52e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     532:	08 95       	ret

00000534 <TWI_send_16bit>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	c8 2f       	mov	r28, r24
     53a:	d6 2f       	mov	r29, r22
     53c:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_start>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TWI_address>
     546:	88 23       	and	r24, r24
     548:	21 f0       	breq	.+8      	; 0x552 <TWI_send_16bit+0x1e>
     54a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     54e:	88 7f       	andi	r24, 0xF8	; 248
     550:	15 c0       	rjmp	.+42     	; 0x57c <TWI_send_16bit+0x48>
     552:	8c 2f       	mov	r24, r28
     554:	0e 94 14 02 	call	0x428	; 0x428 <TWI_send>
     558:	88 23       	and	r24, r24
     55a:	21 f0       	breq	.+8      	; 0x564 <TWI_send_16bit+0x30>
     55c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     560:	88 7f       	andi	r24, 0xF8	; 248
     562:	0c c0       	rjmp	.+24     	; 0x57c <TWI_send_16bit+0x48>
     564:	8d 2f       	mov	r24, r29
     566:	0e 94 14 02 	call	0x428	; 0x428 <TWI_send>
     56a:	88 23       	and	r24, r24
     56c:	21 f0       	breq	.+8      	; 0x576 <TWI_send_16bit+0x42>
     56e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     572:	88 7f       	andi	r24, 0xF8	; 248
     574:	03 c0       	rjmp	.+6      	; 0x57c <TWI_send_16bit+0x48>
     576:	94 e9       	ldi	r25, 0x94	; 148
     578:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <TWI_receive_8bit>:
     582:	cf 93       	push	r28
     584:	c8 2f       	mov	r28, r24
     586:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_start>
     58a:	88 23       	and	r24, r24
     58c:	21 f0       	breq	.+8      	; 0x596 <TWI_receive_8bit+0x14>
     58e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     592:	88 7f       	andi	r24, 0xF8	; 248
     594:	28 c0       	rjmp	.+80     	; 0x5e6 <TWI_receive_8bit+0x64>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TWI_address>
     59c:	88 23       	and	r24, r24
     59e:	21 f0       	breq	.+8      	; 0x5a8 <TWI_receive_8bit+0x26>
     5a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a4:	88 7f       	andi	r24, 0xF8	; 248
     5a6:	1f c0       	rjmp	.+62     	; 0x5e6 <TWI_receive_8bit+0x64>
     5a8:	8c 2f       	mov	r24, r28
     5aa:	0e 94 14 02 	call	0x428	; 0x428 <TWI_send>
     5ae:	88 23       	and	r24, r24
     5b0:	21 f0       	breq	.+8      	; 0x5ba <TWI_receive_8bit+0x38>
     5b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5b6:	88 7f       	andi	r24, 0xF8	; 248
     5b8:	16 c0       	rjmp	.+44     	; 0x5e6 <TWI_receive_8bit+0x64>
     5ba:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_start>
     5be:	88 23       	and	r24, r24
     5c0:	21 f0       	breq	.+8      	; 0x5ca <TWI_receive_8bit+0x48>
     5c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5c6:	88 7f       	andi	r24, 0xF8	; 248
     5c8:	0e c0       	rjmp	.+28     	; 0x5e6 <TWI_receive_8bit+0x64>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TWI_address>
     5d0:	88 23       	and	r24, r24
     5d2:	21 f0       	breq	.+8      	; 0x5dc <TWI_receive_8bit+0x5a>
     5d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5d8:	88 7f       	andi	r24, 0xF8	; 248
     5da:	05 c0       	rjmp	.+10     	; 0x5e6 <TWI_receive_8bit+0x64>
     5dc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <TWI_receive_nack>
     5e0:	94 e9       	ldi	r25, 0x94	; 148
     5e2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <TWI_receive_16bit>:
     5ea:	cf 93       	push	r28
     5ec:	c8 2f       	mov	r28, r24
     5ee:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_start>
     5f2:	88 23       	and	r24, r24
     5f4:	29 f0       	breq	.+10     	; 0x600 <TWI_receive_16bit+0x16>
     5f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5fa:	88 7f       	andi	r24, 0xF8	; 248
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	2f c0       	rjmp	.+94     	; 0x65e <TWI_receive_16bit+0x74>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TWI_address>
     606:	88 23       	and	r24, r24
     608:	29 f0       	breq	.+10     	; 0x614 <TWI_receive_16bit+0x2a>
     60a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     60e:	88 7f       	andi	r24, 0xF8	; 248
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	25 c0       	rjmp	.+74     	; 0x65e <TWI_receive_16bit+0x74>
     614:	8c 2f       	mov	r24, r28
     616:	0e 94 14 02 	call	0x428	; 0x428 <TWI_send>
     61a:	88 23       	and	r24, r24
     61c:	29 f0       	breq	.+10     	; 0x628 <TWI_receive_16bit+0x3e>
     61e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     622:	88 7f       	andi	r24, 0xF8	; 248
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	1b c0       	rjmp	.+54     	; 0x65e <TWI_receive_16bit+0x74>
     628:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_start>
     62c:	88 23       	and	r24, r24
     62e:	29 f0       	breq	.+10     	; 0x63a <TWI_receive_16bit+0x50>
     630:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     634:	88 7f       	andi	r24, 0xF8	; 248
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	12 c0       	rjmp	.+36     	; 0x65e <TWI_receive_16bit+0x74>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TWI_address>
     640:	88 23       	and	r24, r24
     642:	29 f0       	breq	.+10     	; 0x64e <TWI_receive_16bit+0x64>
     644:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     648:	88 7f       	andi	r24, 0xF8	; 248
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	08 c0       	rjmp	.+16     	; 0x65e <TWI_receive_16bit+0x74>
     64e:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     652:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <TWI_receive_nack>
     656:	94 e9       	ldi	r25, 0x94	; 148
     658:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <read_acceleration>:
	
	return register_value;
}


int8_t read_acceleration(uint8_t calibrate_acc){
     662:	cf 93       	push	r28
     664:	c8 2f       	mov	r28, r24
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     666:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_start>
     66a:	81 11       	cpse	r24, r1
     66c:	95 c0       	rjmp	.+298    	; 0x798 <read_acceleration+0x136>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     66e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TWI_address>
     672:	81 11       	cpse	r24, r1
     674:	93 c0       	rjmp	.+294    	; 0x79c <read_acceleration+0x13a>
		return -1;
	}

	if (TWI_send(0x3B) != 0){
     676:	8b e3       	ldi	r24, 0x3B	; 59
     678:	0e 94 14 02 	call	0x428	; 0x428 <TWI_send>
     67c:	81 11       	cpse	r24, r1
     67e:	90 c0       	rjmp	.+288    	; 0x7a0 <read_acceleration+0x13e>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     680:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_start>
     684:	81 11       	cpse	r24, r1
     686:	8e c0       	rjmp	.+284    	; 0x7a4 <read_acceleration+0x142>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TWI_address>
     68e:	81 11       	cpse	r24, r1
     690:	8b c0       	rjmp	.+278    	; 0x7a8 <read_acceleration+0x146>
	acceleration.acceleration_y = TWI_receive_ack() << 8;
	acceleration.acceleration_y = acceleration.acceleration_y | TWI_receive_ack();
	acceleration.acceleration_z = TWI_receive_ack() << 8;
	acceleration.acceleration_z = acceleration.acceleration_z | TWI_receive_nack();*/

	acceleration_x = TWI_receive_ack() << 8;
     692:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	98 2f       	mov	r25, r24
     69a:	88 27       	eor	r24, r24
     69c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <acceleration_x+0x1>
     6a0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <acceleration_x>
	acceleration_x = acceleration_x | TWI_receive_ack();
     6a4:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     6a8:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <acceleration_x>
     6ac:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <acceleration_x+0x1>
     6b0:	28 2b       	or	r18, r24
     6b2:	30 93 74 01 	sts	0x0174, r19	; 0x800174 <acceleration_x+0x1>
     6b6:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <acceleration_x>
	acceleration_y = TWI_receive_ack() << 8;
     6ba:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	98 2f       	mov	r25, r24
     6c2:	88 27       	eor	r24, r24
     6c4:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <acceleration_y+0x1>
     6c8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <acceleration_y>
	acceleration_y = acceleration_y | TWI_receive_ack();
     6cc:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     6d0:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <acceleration_y>
     6d4:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <acceleration_y+0x1>
     6d8:	28 2b       	or	r18, r24
     6da:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <acceleration_y+0x1>
     6de:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <acceleration_y>
	acceleration_z = TWI_receive_ack() << 8;
     6e2:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	98 2f       	mov	r25, r24
     6ea:	88 27       	eor	r24, r24
     6ec:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <acceleration_z+0x1>
     6f0:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <acceleration_z>
	acceleration_z = acceleration_z | TWI_receive_nack();
     6f4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <TWI_receive_nack>
     6f8:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <acceleration_z>
     6fc:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <acceleration_z+0x1>
     700:	28 2b       	or	r18, r24
     702:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <acceleration_z+0x1>
     706:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <acceleration_z>
	TWI_stop();
     70a:	0e 94 96 02 	call	0x52c	; 0x52c <TWI_stop>
	
	if (calibrate_acc == 1)
     70e:	c1 30       	cpi	r28, 0x01	; 1
     710:	09 f0       	breq	.+2      	; 0x714 <read_acceleration+0xb2>
     712:	4c c0       	rjmp	.+152    	; 0x7ac <read_acceleration+0x14a>
	{

		acceleration_x = acceleration_x - x_offset_acc;
     714:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <acceleration_x>
     718:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <acceleration_x+0x1>
     71c:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <x_offset_acc>
     720:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <x_offset_acc+0x1>
     724:	82 1b       	sub	r24, r18
     726:	93 0b       	sbc	r25, r19
     728:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <acceleration_x+0x1>
     72c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <acceleration_x>
		
		acceleration_y = acceleration_y - y_offset_acc;
     730:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <acceleration_y>
     734:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <acceleration_y+0x1>
     738:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <y_offset_acc>
     73c:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <y_offset_acc+0x1>
     740:	82 1b       	sub	r24, r18
     742:	93 0b       	sbc	r25, r19
     744:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <acceleration_y+0x1>
     748:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <acceleration_y>

		
		if (acceleration_z > z_offset_acc)
     74c:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <acceleration_z>
     750:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <acceleration_z+0x1>
     754:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     758:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
     75c:	82 17       	cp	r24, r18
     75e:	93 07       	cpc	r25, r19
     760:	6c f4       	brge	.+26     	; 0x77c <read_acceleration+0x11a>
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
     762:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <acceleration_z>
     766:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <acceleration_z+0x1>
     76a:	30 52       	subi	r19, 0x20	; 32
     76c:	82 0f       	add	r24, r18
     76e:	93 1f       	adc	r25, r19
     770:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <acceleration_z+0x1>
     774:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <acceleration_z>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	19 c0       	rjmp	.+50     	; 0x7ae <read_acceleration+0x14c>
		
		if (acceleration_z > z_offset_acc)
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
			}else{
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
     77c:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <acceleration_z>
     780:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <acceleration_z+0x1>
     784:	30 5e       	subi	r19, 0xE0	; 224
     786:	a9 01       	movw	r20, r18
     788:	48 1b       	sub	r20, r24
     78a:	59 0b       	sbc	r21, r25
     78c:	50 93 72 01 	sts	0x0172, r21	; 0x800172 <acceleration_z+0x1>
     790:	40 93 71 01 	sts	0x0171, r20	; 0x800171 <acceleration_z>
		}
		
	}
	
	return 0;
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0b c0       	rjmp	.+22     	; 0x7ae <read_acceleration+0x14c>


int8_t read_acceleration(uint8_t calibrate_acc){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	09 c0       	rjmp	.+18     	; 0x7ae <read_acceleration+0x14c>
	}
	
	if (TWI_address(0) != 0){
		return -1;
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	07 c0       	rjmp	.+14     	; 0x7ae <read_acceleration+0x14c>
	}

	if (TWI_send(0x3B) != 0){
		return -1;
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	05 c0       	rjmp	.+10     	; 0x7ae <read_acceleration+0x14c>
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	03 c0       	rjmp	.+6      	; 0x7ae <read_acceleration+0x14c>
	}
	
	if (TWI_address(1) != 0){
		return -1;
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <read_acceleration+0x14c>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
}
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <read_gyroscope>:

int8_t read_gyroscope(){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     7b2:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_start>
     7b6:	81 11       	cpse	r24, r1
     7b8:	7c c0       	rjmp	.+248    	; 0x8b2 <read_gyroscope+0x100>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     7ba:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TWI_address>
     7be:	81 11       	cpse	r24, r1
     7c0:	7a c0       	rjmp	.+244    	; 0x8b6 <read_gyroscope+0x104>
		return -1;
	}

	if (TWI_send(0x43) != 0){
     7c2:	83 e4       	ldi	r24, 0x43	; 67
     7c4:	0e 94 14 02 	call	0x428	; 0x428 <TWI_send>
     7c8:	81 11       	cpse	r24, r1
     7ca:	77 c0       	rjmp	.+238    	; 0x8ba <read_gyroscope+0x108>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     7cc:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_start>
     7d0:	81 11       	cpse	r24, r1
     7d2:	75 c0       	rjmp	.+234    	; 0x8be <read_gyroscope+0x10c>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <TWI_address>
     7da:	81 11       	cpse	r24, r1
     7dc:	72 c0       	rjmp	.+228    	; 0x8c2 <read_gyroscope+0x110>
	gyroscope.gyroscope_y = TWI_receive_ack() << 8;
	gyroscope.gyroscope_y = gyroscope.gyroscope_y | TWI_receive_ack();
	gyroscope.gyroscope_z = TWI_receive_ack() << 8;
	gyroscope.gyroscope_z = gyroscope.gyroscope_z | TWI_receive_nack();*/

	gyroscope_x = TWI_receive_ack() << 8;
     7de:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	98 2f       	mov	r25, r24
     7e6:	88 27       	eor	r24, r24
     7e8:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <gyroscope_x+0x1>
     7ec:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <gyroscope_x>
	gyroscope_x = gyroscope_x | TWI_receive_ack();
     7f0:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     7f4:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <gyroscope_x>
     7f8:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <gyroscope_x+0x1>
     7fc:	28 2b       	or	r18, r24
     7fe:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <gyroscope_x+0x1>
     802:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <gyroscope_x>
	gyroscope_y = TWI_receive_ack() << 8;
     806:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	98 2f       	mov	r25, r24
     80e:	88 27       	eor	r24, r24
     810:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <gyroscope_y+0x1>
     814:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <gyroscope_y>
	gyroscope_y = gyroscope_y | TWI_receive_ack();
     818:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     81c:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <gyroscope_y>
     820:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <gyroscope_y+0x1>
     824:	28 2b       	or	r18, r24
     826:	30 93 57 01 	sts	0x0157, r19	; 0x800157 <gyroscope_y+0x1>
     82a:	20 93 56 01 	sts	0x0156, r18	; 0x800156 <gyroscope_y>
	gyroscope_z = TWI_receive_ack() << 8;
     82e:	0e 94 40 02 	call	0x480	; 0x480 <TWI_receive_ack>
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	98 2f       	mov	r25, r24
     836:	88 27       	eor	r24, r24
     838:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <gyroscope_z+0x1>
     83c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <gyroscope_z>
	gyroscope_z = gyroscope_z | TWI_receive_nack();
     840:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <TWI_receive_nack>
     844:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <gyroscope_z>
     848:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <gyroscope_z+0x1>
     84c:	28 2b       	or	r18, r24
     84e:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <gyroscope_z+0x1>
     852:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <gyroscope_z>
	
	gyroscope_x = gyroscope_x - x_offset_gyro;
     856:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <gyroscope_x>
     85a:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <gyroscope_x+0x1>
     85e:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <x_offset_gyro>
     862:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <x_offset_gyro+0x1>
     866:	82 1b       	sub	r24, r18
     868:	93 0b       	sbc	r25, r19
     86a:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <gyroscope_x+0x1>
     86e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <gyroscope_x>
	gyroscope_y = gyroscope_y - y_offset_gyro;
     872:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <gyroscope_y>
     876:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <gyroscope_y+0x1>
     87a:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <y_offset_gyro>
     87e:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <y_offset_gyro+0x1>
     882:	82 1b       	sub	r24, r18
     884:	93 0b       	sbc	r25, r19
     886:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <gyroscope_y+0x1>
     88a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <gyroscope_y>
	gyroscope_z = gyroscope_z - z_offset_gyro;
     88e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <gyroscope_z>
     892:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <gyroscope_z+0x1>
     896:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <z_offset_gyro>
     89a:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <z_offset_gyro+0x1>
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <gyroscope_z+0x1>
     8a6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <gyroscope_z>
	
	TWI_stop();
     8aa:	0e 94 96 02 	call	0x52c	; 0x52c <TWI_stop>
	
	return 0;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	08 95       	ret
}

int8_t read_gyroscope(){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	08 95       	ret
	}
	
	if (TWI_address(0) != 0){
		return -1;
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	08 95       	ret
	}

	if (TWI_send(0x43) != 0){
		return -1;
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	08 95       	ret
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	08 95       	ret
	}
	
	if (TWI_address(1) != 0){
		return -1;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
	gyroscope_z = gyroscope_z - z_offset_gyro;
	
	TWI_stop();
	
	return 0;
}
     8c4:	08 95       	ret

000008c6 <IMU_Init>:

int8_t IMU_Init(){
	uint8_t register_value;
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
     8c6:	62 e0       	ldi	r22, 0x02	; 2
     8c8:	8a e1       	ldi	r24, 0x1A	; 26
     8ca:	0e 94 9a 02 	call	0x534	; 0x534 <TWI_send_16bit>
     8ce:	81 11       	cpse	r24, r1
     8d0:	6d c0       	rjmp	.+218    	; 0x9ac <IMU_Init+0xe6>
	{
		return -1;
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
     8d2:	68 e0       	ldi	r22, 0x08	; 8
     8d4:	8b e1       	ldi	r24, 0x1B	; 27
     8d6:	0e 94 9a 02 	call	0x534	; 0x534 <TWI_send_16bit>
     8da:	81 11       	cpse	r24, r1
     8dc:	69 c0       	rjmp	.+210    	; 0x9b0 <IMU_Init+0xea>
	{
		return -1;
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
     8de:	68 e0       	ldi	r22, 0x08	; 8
     8e0:	8c e1       	ldi	r24, 0x1C	; 28
     8e2:	0e 94 9a 02 	call	0x534	; 0x534 <TWI_send_16bit>
     8e6:	81 11       	cpse	r24, r1
     8e8:	65 c0       	rjmp	.+202    	; 0x9b4 <IMU_Init+0xee>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	83 e2       	ldi	r24, 0x23	; 35
     8ee:	0e 94 9a 02 	call	0x534	; 0x534 <TWI_send_16bit>
     8f2:	81 11       	cpse	r24, r1
     8f4:	61 c0       	rjmp	.+194    	; 0x9b8 <IMU_Init+0xf2>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	84 e2       	ldi	r24, 0x24	; 36
     8fa:	0e 94 9a 02 	call	0x534	; 0x534 <TWI_send_16bit>
     8fe:	81 11       	cpse	r24, r1
     900:	5d c0       	rjmp	.+186    	; 0x9bc <IMU_Init+0xf6>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	87 e3       	ldi	r24, 0x37	; 55
     906:	0e 94 9a 02 	call	0x534	; 0x534 <TWI_send_16bit>
     90a:	81 11       	cpse	r24, r1
     90c:	59 c0       	rjmp	.+178    	; 0x9c0 <IMU_Init+0xfa>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	88 e3       	ldi	r24, 0x38	; 56
     912:	0e 94 9a 02 	call	0x534	; 0x534 <TWI_send_16bit>
     916:	81 11       	cpse	r24, r1
     918:	55 c0       	rjmp	.+170    	; 0x9c4 <IMU_Init+0xfe>
	{
		return -1;
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	8a e6       	ldi	r24, 0x6A	; 106
     91e:	0e 94 9a 02 	call	0x534	; 0x534 <TWI_send_16bit>
     922:	81 11       	cpse	r24, r1
     924:	51 c0       	rjmp	.+162    	; 0x9c8 <IMU_Init+0x102>
	{
		return -1;
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	8b e6       	ldi	r24, 0x6B	; 107
     92a:	0e 94 9a 02 	call	0x534	; 0x534 <TWI_send_16bit>
     92e:	81 11       	cpse	r24, r1
     930:	4d c0       	rjmp	.+154    	; 0x9cc <IMU_Init+0x106>
	{
		return -1;
	}
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
     932:	85 e7       	ldi	r24, 0x75	; 117
     934:	0e 94 c1 02 	call	0x582	; 0x582 <TWI_receive_8bit>
	
	if (register_value != 0x68)
     938:	88 36       	cpi	r24, 0x68	; 104
     93a:	09 f0       	breq	.+2      	; 0x93e <IMU_Init+0x78>
     93c:	49 c0       	rjmp	.+146    	; 0x9d0 <IMU_Init+0x10a>
	{
		return -2;
	}
	
	
	read_acceleration(0);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 31 03 	call	0x662	; 0x662 <read_acceleration>
	x_offset_acc = acceleration_x;
     944:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <acceleration_x>
     948:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <acceleration_x+0x1>
     94c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <x_offset_acc+0x1>
     950:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <x_offset_acc>
	y_offset_acc = acceleration_y;
     954:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <acceleration_y>
     958:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <acceleration_y+0x1>
     95c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <y_offset_acc+0x1>
     960:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <y_offset_acc>
	z_offset_acc = acceleration_z;
     964:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <acceleration_z>
     968:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <acceleration_z+0x1>
     96c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     970:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	
	read_gyroscope();
     974:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <read_gyroscope>
	x_offset_gyro = gyroscope_x;
     978:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <gyroscope_x>
     97c:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <gyroscope_x+0x1>
     980:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <x_offset_gyro+0x1>
     984:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <x_offset_gyro>
	y_offset_gyro = gyroscope_y;
     988:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <gyroscope_y>
     98c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <gyroscope_y+0x1>
     990:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <y_offset_gyro+0x1>
     994:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <y_offset_gyro>
	z_offset_gyro = gyroscope_z;
     998:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <gyroscope_z>
     99c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <gyroscope_z+0x1>
     9a0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <z_offset_gyro+0x1>
     9a4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <z_offset_gyro>
	// 	read_acceleration(1);
	//
	// 	Angle_X_Gyro = Angle_Y_Acc;
	// 	Angle_Y_Gyro = Angle_X_Acc;
	
	return register_value;
     9a8:	88 e6       	ldi	r24, 0x68	; 104
     9aa:	08 95       	ret
	uint8_t register_value;
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
	{
		return -1;
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	08 95       	ret
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
	{
		return -1;
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	08 95       	ret
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
	{
		return -1;
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	08 95       	ret
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
	{
		return -1;
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	08 95       	ret
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
	{
		return -1;
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
	{
		return -1;
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
	{
		return -1;
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	08 95       	ret
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
	{
		return -1;
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	08 95       	ret
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
	{
		return -1;
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	08 95       	ret
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
	
	if (register_value != 0x68)
	{
		return -2;
     9d0:	8e ef       	ldi	r24, 0xFE	; 254
	//
	// 	Angle_X_Gyro = Angle_Y_Acc;
	// 	Angle_Y_Gyro = Angle_X_Acc;
	
	return register_value;
}
     9d2:	08 95       	ret

000009d4 <IMU_who_i_am>:
	TWI_stop();
	
	return 0;
}

uint8_t IMU_who_i_am(uint8_t print){
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	d8 2f       	mov	r29, r24
	uint8_t whoiam = TWI_receive_8bit(0x75);
     9da:	85 e7       	ldi	r24, 0x75	; 117
     9dc:	0e 94 c1 02 	call	0x582	; 0x582 <TWI_receive_8bit>
     9e0:	c8 2f       	mov	r28, r24
	
	if (print == 1)
     9e2:	d1 30       	cpi	r29, 0x01	; 1
     9e4:	29 f4       	brne	.+10     	; 0x9f0 <IMU_who_i_am+0x1c>
	{
		USART_Transmit(whoiam);
     9e6:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		USART_Transmit('\n');
     9ea:	8a e0       	ldi	r24, 0x0A	; 10
     9ec:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
	}
	
	return whoiam;
}
     9f0:	8c 2f       	mov	r24, r28
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <temperature>:

int8_t temperature(uint8_t print){
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	d8 2f       	mov	r29, r24
	int8_t temperature_read = (((float) TWI_receive_16bit(0x3b))/340 + 36.53);
     9fe:	8b e3       	ldi	r24, 0x3B	; 59
     a00:	0e 94 f5 02 	call	0x5ea	; 0x5ea <TWI_receive_16bit>
     a04:	bc 01       	movw	r22, r24
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatunsisf>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	4a ea       	ldi	r20, 0xAA	; 170
     a14:	53 e4       	ldi	r21, 0x43	; 67
     a16:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3>
     a1a:	28 eb       	ldi	r18, 0xB8	; 184
     a1c:	3e e1       	ldi	r19, 0x1E	; 30
     a1e:	42 e1       	ldi	r20, 0x12	; 18
     a20:	52 e4       	ldi	r21, 0x42	; 66
     a22:	0e 94 5f 0a 	call	0x14be	; 0x14be <__addsf3>
     a26:	0e 94 3d 0b 	call	0x167a	; 0x167a <__fixsfsi>
     a2a:	c6 2f       	mov	r28, r22
	
	if (print == 1)
     a2c:	d1 30       	cpi	r29, 0x01	; 1
     a2e:	31 f4       	brne	.+12     	; 0xa3c <temperature+0x44>
	{
		USART_Transmit(temperature_read);
     a30:	86 2f       	mov	r24, r22
     a32:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		USART_Transmit('\n');
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
	}
	
	return temperature_read;
}
     a3c:	8c 2f       	mov	r24, r28
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <computed_acceleration>:

void computed_acceleration(uint8_t print){
     a44:	cf 93       	push	r28
     a46:	c8 2f       	mov	r28, r24
	accx = ((float) acceleration_x / 8192) * 98.1;
     a48:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <acceleration_x>
     a4c:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <acceleration_x+0x1>
     a50:	07 2e       	mov	r0, r23
     a52:	00 0c       	add	r0, r0
     a54:	88 0b       	sbc	r24, r24
     a56:	99 0b       	sbc	r25, r25
     a58:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	59 e3       	ldi	r21, 0x39	; 57
     a64:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     a68:	23 e3       	ldi	r18, 0x33	; 51
     a6a:	33 e3       	ldi	r19, 0x33	; 51
     a6c:	44 ec       	ldi	r20, 0xC4	; 196
     a6e:	52 e4       	ldi	r21, 0x42	; 66
     a70:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     a74:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <accx>
     a78:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <accx+0x1>
     a7c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <accx+0x2>
     a80:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <accx+0x3>
	accy = ((float) acceleration_y / 8192) * 98.1;
     a84:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <acceleration_y>
     a88:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <acceleration_y+0x1>
     a8c:	07 2e       	mov	r0, r23
     a8e:	00 0c       	add	r0, r0
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	59 e3       	ldi	r21, 0x39	; 57
     aa0:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     aa4:	23 e3       	ldi	r18, 0x33	; 51
     aa6:	33 e3       	ldi	r19, 0x33	; 51
     aa8:	44 ec       	ldi	r20, 0xC4	; 196
     aaa:	52 e4       	ldi	r21, 0x42	; 66
     aac:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     ab0:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <accy>
     ab4:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <accy+0x1>
     ab8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <accy+0x2>
     abc:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <accy+0x3>
	accz = ((float) acceleration_z / 8192) * 98.1;
     ac0:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <acceleration_z>
     ac4:	70 91 72 01 	lds	r23, 0x0172	; 0x800172 <acceleration_z+0x1>
     ac8:	07 2e       	mov	r0, r23
     aca:	00 0c       	add	r0, r0
     acc:	88 0b       	sbc	r24, r24
     ace:	99 0b       	sbc	r25, r25
     ad0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	59 e3       	ldi	r21, 0x39	; 57
     adc:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     ae0:	23 e3       	ldi	r18, 0x33	; 51
     ae2:	33 e3       	ldi	r19, 0x33	; 51
     ae4:	44 ec       	ldi	r20, 0xC4	; 196
     ae6:	52 e4       	ldi	r21, 0x42	; 66
     ae8:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     aec:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <accz>
     af0:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <accz+0x1>
     af4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <accz+0x2>
     af8:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <accz+0x3>
	
	if (print == 1)
     afc:	c1 30       	cpi	r28, 0x01	; 1
     afe:	51 f5       	brne	.+84     	; 0xb54 <__stack+0x55>
	{
		USART_Transmit(accx);
     b00:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <accx>
     b04:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <accx+0x1>
     b08:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <accx+0x2>
     b0c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <accx+0x3>
     b10:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     b14:	86 2f       	mov	r24, r22
     b16:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		USART_Transmit(accy);
     b1a:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <accy>
     b1e:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <accy+0x1>
     b22:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <accy+0x2>
     b26:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <accy+0x3>
     b2a:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     b2e:	86 2f       	mov	r24, r22
     b30:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		USART_Transmit(accz);
     b34:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <accz>
     b38:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <accz+0x1>
     b3c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <accz+0x2>
     b40:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <accz+0x3>
     b44:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     b48:	86 2f       	mov	r24, r22
     b4a:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		USART_Transmit('\n');
     b4e:	8a e0       	ldi	r24, 0x0A	; 10
     b50:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
	}
}
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <computed_gyroscope>:

void computed_gyroscope(uint8_t print){
     b58:	cf 93       	push	r28
     b5a:	c8 2f       	mov	r28, r24
	gyrox = ((float) gyroscope_x / 65);
     b5c:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <gyroscope_x>
     b60:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <gyroscope_x+0x1>
     b64:	07 2e       	mov	r0, r23
     b66:	00 0c       	add	r0, r0
     b68:	88 0b       	sbc	r24, r24
     b6a:	99 0b       	sbc	r25, r25
     b6c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	42 e8       	ldi	r20, 0x82	; 130
     b76:	52 e4       	ldi	r21, 0x42	; 66
     b78:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3>
     b7c:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <gyrox>
     b80:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <gyrox+0x1>
     b84:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <gyrox+0x2>
     b88:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <gyrox+0x3>
	gyroy = ((float) gyroscope_y / 65);
     b8c:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <gyroscope_y>
     b90:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <gyroscope_y+0x1>
     b94:	07 2e       	mov	r0, r23
     b96:	00 0c       	add	r0, r0
     b98:	88 0b       	sbc	r24, r24
     b9a:	99 0b       	sbc	r25, r25
     b9c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	42 e8       	ldi	r20, 0x82	; 130
     ba6:	52 e4       	ldi	r21, 0x42	; 66
     ba8:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3>
     bac:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <gyroy>
     bb0:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <gyroy+0x1>
     bb4:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <gyroy+0x2>
     bb8:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <gyroy+0x3>
	gyroz = ((float) gyroscope_z / 65);
     bbc:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <gyroscope_z>
     bc0:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <gyroscope_z+0x1>
     bc4:	07 2e       	mov	r0, r23
     bc6:	00 0c       	add	r0, r0
     bc8:	88 0b       	sbc	r24, r24
     bca:	99 0b       	sbc	r25, r25
     bcc:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	42 e8       	ldi	r20, 0x82	; 130
     bd6:	52 e4       	ldi	r21, 0x42	; 66
     bd8:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3>
     bdc:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <gyroz>
     be0:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <gyroz+0x1>
     be4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gyroz+0x2>
     be8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <gyroz+0x3>
	
	if (print == 1)
     bec:	c1 30       	cpi	r28, 0x01	; 1
     bee:	51 f5       	brne	.+84     	; 0xc44 <computed_gyroscope+0xec>
	{
		USART_Transmit(gyrox);
     bf0:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <gyrox>
     bf4:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <gyrox+0x1>
     bf8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <gyrox+0x2>
     bfc:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <gyrox+0x3>
     c00:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     c04:	86 2f       	mov	r24, r22
     c06:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		USART_Transmit(gyroy);
     c0a:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <gyroy>
     c0e:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <gyroy+0x1>
     c12:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <gyroy+0x2>
     c16:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <gyroy+0x3>
     c1a:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     c1e:	86 2f       	mov	r24, r22
     c20:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		USART_Transmit(gyroz);
     c24:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <gyroz>
     c28:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <gyroz+0x1>
     c2c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <gyroz+0x2>
     c30:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <gyroz+0x3>
     c34:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     c38:	86 2f       	mov	r24, r22
     c3a:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		USART_Transmit('\n');
     c3e:	8a e0       	ldi	r24, 0x0A	; 10
     c40:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
	}
}
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <main>:
volatile uint8_t ISR_USART_Receive = 0;


int main(void)
{
	DDRD = 0b00000000; //Makes PORTD as Input
     c48:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00001111; //Internal Pull Up enabled
     c4a:	8f e0       	ldi	r24, 0x0F	; 15
     c4c:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0b11111111;
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	84 b9       	out	0x04, r24	; 4


	timer_init();
     c52:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <timer_init>
	
	TWI_init();
     c56:	0e 94 a9 01 	call	0x352	; 0x352 <TWI_init>
	USART_Init(57600);
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	91 ee       	ldi	r25, 0xE1	; 225
     c5e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <USART_Init>
	
	USART_Transmit(IMU_Init());
     c62:	0e 94 63 04 	call	0x8c6	; 0x8c6 <IMU_Init>
     c66:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
	
	interrupt_init();
     c6a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <interrupt_init>
	
	sei(); //cli(); countermeasure
     c6e:	78 94       	sei
	uint16_t end_this, end_that, end_m, end_1, end_2;
	
			
			end_1 = system_tick_MG;
     c70:	c0 91 90 01 	lds	r28, 0x0190	; 0x800190 <system_tick_MG>
     c74:	d0 91 91 01 	lds	r29, 0x0191	; 0x800191 <system_tick_MG+0x1>
			end_2 = system_tick_MG_mod;
     c78:	e0 90 8e 01 	lds	r14, 0x018E	; 0x80018e <system_tick_MG_mod>
     c7c:	f0 90 8f 01 	lds	r15, 0x018F	; 0x80018f <system_tick_MG_mod+0x1>
			
	while (1)
{
		end_this = system_tick_MG_p;
     c80:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <system_tick_MG_p>
     c84:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <system_tick_MG_p+0x1>
		end_m = system_tick_MG_p_mod;
     c88:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <system_tick_MG_p_mod>
     c8c:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <system_tick_MG_p_mod+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c90:	ef e1       	ldi	r30, 0x1F	; 31
     c92:	fe e4       	ldi	r31, 0x4E	; 78
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <main+0x4c>
     c98:	00 c0       	rjmp	.+0      	; 0xc9a <main+0x52>
     c9a:	00 00       	nop
     c9c:	ef e1       	ldi	r30, 0x1F	; 31
     c9e:	fe e4       	ldi	r31, 0x4E	; 78
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <main+0x58>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <main+0x5e>
     ca6:	00 00       	nop
		_delay_ms(5);
		//PORTB = 0b00000000;
		_delay_ms(5);
		//PORTB = 0b00010000;
		end_that = time_precision(end_this, end_m)/20;
     ca8:	0e 94 a2 09 	call	0x1344	; 0x1344 <time_precision>
     cac:	8c 01       	movw	r16, r24
		end_1 = time_in_seconds(end_1, end_2);
     cae:	b7 01       	movw	r22, r14
     cb0:	ce 01       	movw	r24, r28
     cb2:	0e 94 b6 09 	call	0x136c	; 0x136c <time_in_seconds>
     cb6:	ec 01       	movw	r28, r24
		USART_Transmit((uint8_t)end_that);
     cb8:	98 01       	movw	r18, r16
     cba:	ad ec       	ldi	r26, 0xCD	; 205
     cbc:	bc ec       	ldi	r27, 0xCC	; 204
     cbe:	0e 94 af 0c 	call	0x195e	; 0x195e <__umulhisi3>
     cc2:	92 95       	swap	r25
     cc4:	82 95       	swap	r24
     cc6:	8f 70       	andi	r24, 0x0F	; 15
     cc8:	89 27       	eor	r24, r25
     cca:	9f 70       	andi	r25, 0x0F	; 15
     ccc:	89 27       	eor	r24, r25
     cce:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		//USART_Transmit('\n');
		USART_Transmit((uint8_t)end_1);
     cd2:	8c 2f       	mov	r24, r28
     cd4:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
		USART_Transmit('\n');
     cd8:	8a e0       	ldi	r24, 0x0A	; 10
     cda:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
     cde:	d0 cf       	rjmp	.-96     	; 0xc80 <main+0x38>

00000ce0 <Int_6_En>:
	PCMSK0 = reg;
	PCIFR = 1;
}

void Pin_Change_Disen(){
	PCICR = (0 << PCIE0);
     ce0:	8f b7       	in	r24, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	e6 9a       	sbi	0x1c, 6	; 28
     ce6:	ee 9a       	sbi	0x1d, 6	; 29
     ce8:	8f bf       	out	0x3f, r24	; 63
     cea:	08 95       	ret

00000cec <Interrupt_Init_Rising_INT6>:
     cec:	cf 93       	push	r28
     cee:	cf b7       	in	r28, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	8c b3       	in	r24, 0x1c	; 28
     cf4:	8c bb       	out	0x1c, r24	; 28
     cf6:	ea e6       	ldi	r30, 0x6A	; 106
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 63       	ori	r24, 0x30	; 48
     cfe:	80 83       	st	Z, r24
     d00:	0e 94 70 06 	call	0xce0	; 0xce0 <Int_6_En>
     d04:	cf bf       	out	0x3f, r28	; 63
     d06:	cf 91       	pop	r28
     d08:	08 95       	ret

00000d0a <Interrupt_Init_Falling_INT6>:
     d0a:	cf 93       	push	r28
     d0c:	cf b7       	in	r28, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	e6 9a       	sbi	0x1c, 6	; 28
     d12:	ea e6       	ldi	r30, 0x6A	; 106
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	8f 7e       	andi	r24, 0xEF	; 239
     d1a:	80 83       	st	Z, r24
     d1c:	0e 94 70 06 	call	0xce0	; 0xce0 <Int_6_En>
     d20:	cf bf       	out	0x3f, r28	; 63
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <Pin_Change_En>:
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     d2c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     d30:	9b bb       	out	0x1b, r25	; 27
     d32:	08 95       	ret

00000d34 <__vector_7>:
}




ISR(INT6_vect){
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	0f 92       	push	r0
     d3c:	11 24       	eor	r1, r1
     d3e:	4f 92       	push	r4
     d40:	5f 92       	push	r5
     d42:	6f 92       	push	r6
     d44:	7f 92       	push	r7
     d46:	8f 92       	push	r8
     d48:	9f 92       	push	r9
     d4a:	af 92       	push	r10
     d4c:	bf 92       	push	r11
     d4e:	cf 92       	push	r12
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	2f 93       	push	r18
     d58:	3f 93       	push	r19
     d5a:	4f 93       	push	r20
     d5c:	5f 93       	push	r21
     d5e:	6f 93       	push	r22
     d60:	7f 93       	push	r23
     d62:	8f 93       	push	r24
     d64:	9f 93       	push	r25
     d66:	af 93       	push	r26
     d68:	bf 93       	push	r27
     d6a:	cf 93       	push	r28
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
	if (flag_rx  == 0)
     d70:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <flag_rx>
     d74:	81 11       	cpse	r24, r1
     d76:	5c c0       	rjmp	.+184    	; 0xe30 <__vector_7+0xfc>
	{
		
		period = (system_tick_MG + 0.000004*TCNT0 - int_period);
     d78:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <system_tick_MG>
     d7c:	f0 90 91 01 	lds	r15, 0x0191	; 0x800191 <system_tick_MG+0x1>
     d80:	66 b5       	in	r22, 0x26	; 38
     d82:	80 90 3b 01 	lds	r8, 0x013B	; 0x80013b <int_period>
     d86:	90 90 3c 01 	lds	r9, 0x013C	; 0x80013c <int_period+0x1>
     d8a:	a0 90 3d 01 	lds	r10, 0x013D	; 0x80013d <int_period+0x2>
     d8e:	b0 90 3e 01 	lds	r11, 0x013E	; 0x80013e <int_period+0x3>
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     d9c:	2d eb       	ldi	r18, 0xBD	; 189
     d9e:	37 e3       	ldi	r19, 0x37	; 55
     da0:	46 e8       	ldi	r20, 0x86	; 134
     da2:	56 e3       	ldi	r21, 0x36	; 54
     da4:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     da8:	2b 01       	movw	r4, r22
     daa:	3c 01       	movw	r6, r24
     dac:	b7 01       	movw	r22, r14
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatunsisf>
     db6:	9b 01       	movw	r18, r22
     db8:	ac 01       	movw	r20, r24
     dba:	c3 01       	movw	r24, r6
     dbc:	b2 01       	movw	r22, r4
     dbe:	0e 94 5f 0a 	call	0x14be	; 0x14be <__addsf3>
     dc2:	a5 01       	movw	r20, r10
     dc4:	94 01       	movw	r18, r8
     dc6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__subsf3>
     dca:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <period>
     dce:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <period+0x1>
     dd2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <period+0x2>
     dd6:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <period+0x3>

		int_period = system_tick_MG + 0.000004*TCNT0; //To count the period of the wave in ms
     dda:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <system_tick_MG>
     dde:	f0 90 91 01 	lds	r15, 0x0191	; 0x800191 <system_tick_MG+0x1>
     de2:	66 b5       	in	r22, 0x26	; 38
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     dee:	2d eb       	ldi	r18, 0xBD	; 189
     df0:	37 e3       	ldi	r19, 0x37	; 55
     df2:	46 e8       	ldi	r20, 0x86	; 134
     df4:	56 e3       	ldi	r21, 0x36	; 54
     df6:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     dfa:	4b 01       	movw	r8, r22
     dfc:	5c 01       	movw	r10, r24
     dfe:	b7 01       	movw	r22, r14
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatunsisf>
     e08:	9b 01       	movw	r18, r22
     e0a:	ac 01       	movw	r20, r24
     e0c:	c5 01       	movw	r24, r10
     e0e:	b4 01       	movw	r22, r8
     e10:	0e 94 5f 0a 	call	0x14be	; 0x14be <__addsf3>
     e14:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <int_period>
     e18:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <int_period+0x1>
     e1c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <int_period+0x2>
     e20:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <int_period+0x3>
		
		Interrupt_Init_Falling_INT6();
     e24:	0e 94 85 06 	call	0xd0a	; 0xd0a <Interrupt_Init_Falling_INT6>

		flag_rx = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <flag_rx>
     e2e:	43 c0       	rjmp	.+134    	; 0xeb6 <__vector_7+0x182>

		}else{
		
		throttle = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
     e30:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <system_tick_MG>
     e34:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <system_tick_MG+0x1>
     e38:	80 90 3b 01 	lds	r8, 0x013B	; 0x80013b <int_period>
     e3c:	90 90 3c 01 	lds	r9, 0x013C	; 0x80013c <int_period+0x1>
     e40:	a0 90 3d 01 	lds	r10, 0x013D	; 0x80013d <int_period+0x2>
     e44:	b0 90 3e 01 	lds	r11, 0x013E	; 0x80013e <int_period+0x3>
     e48:	c6 b5       	in	r28, 0x26	; 38
     e4a:	c0 90 37 01 	lds	r12, 0x0137	; 0x800137 <period>
     e4e:	d0 90 38 01 	lds	r13, 0x0138	; 0x800138 <period+0x1>
     e52:	e0 90 39 01 	lds	r14, 0x0139	; 0x800139 <period+0x2>
     e56:	f0 90 3a 01 	lds	r15, 0x013A	; 0x80013a <period+0x3>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatunsisf>
     e62:	a5 01       	movw	r20, r10
     e64:	94 01       	movw	r18, r8
     e66:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__subsf3>
     e6a:	4b 01       	movw	r8, r22
     e6c:	5c 01       	movw	r10, r24
     e6e:	6c 2f       	mov	r22, r28
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     e7a:	2d eb       	ldi	r18, 0xBD	; 189
     e7c:	37 e3       	ldi	r19, 0x37	; 55
     e7e:	46 e8       	ldi	r20, 0x86	; 134
     e80:	56 e3       	ldi	r21, 0x36	; 54
     e82:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     e86:	9b 01       	movw	r18, r22
     e88:	ac 01       	movw	r20, r24
     e8a:	c5 01       	movw	r24, r10
     e8c:	b4 01       	movw	r22, r8
     e8e:	0e 94 5f 0a 	call	0x14be	; 0x14be <__addsf3>
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	48 ec       	ldi	r20, 0xC8	; 200
     e98:	52 e4       	ldi	r21, 0x42	; 66
     e9a:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     e9e:	a7 01       	movw	r20, r14
     ea0:	96 01       	movw	r18, r12
     ea2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3>
     ea6:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     eaa:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <throttle>
		
		Interrupt_Init_Rising_INT6();
     eae:	0e 94 76 06 	call	0xcec	; 0xcec <Interrupt_Init_Rising_INT6>

		flag_rx = 0;
     eb2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <flag_rx>
	}

}
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	cf 91       	pop	r28
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	7f 91       	pop	r23
     ec6:	6f 91       	pop	r22
     ec8:	5f 91       	pop	r21
     eca:	4f 91       	pop	r20
     ecc:	3f 91       	pop	r19
     ece:	2f 91       	pop	r18
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	df 90       	pop	r13
     ed6:	cf 90       	pop	r12
     ed8:	bf 90       	pop	r11
     eda:	af 90       	pop	r10
     edc:	9f 90       	pop	r9
     ede:	8f 90       	pop	r8
     ee0:	7f 90       	pop	r7
     ee2:	6f 90       	pop	r6
     ee4:	5f 90       	pop	r5
     ee6:	4f 90       	pop	r4
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <__vector_9>:

ISR(PCINT0_vect){
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	cf 93       	push	r28
     f22:	ef 93       	push	r30
     f24:	ff 93       	push	r31
	//check the ports, store before value, confront with actual
	//store new value
	
	uint8_t changedbits;
	uint8_t intreading = PINB;
     f26:	93 b1       	in	r25, 0x03	; 3
	changedbits = intreading ^ portbhistory;
     f28:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <portbhistory>
	portbhistory = intreading;
     f2c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <portbhistory>
	if (flag_rx == 1)
     f30:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <flag_rx>
	{
		
	}
	

	switch(changedbits){
     f34:	89 27       	eor	r24, r25
     f36:	84 30       	cpi	r24, 0x04	; 4
     f38:	09 f4       	brne	.+2      	; 0xf3c <__vector_9+0x4a>
     f3a:	50 c0       	rjmp	.+160    	; 0xfdc <__vector_9+0xea>
     f3c:	18 f4       	brcc	.+6      	; 0xf44 <__vector_9+0x52>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	41 f0       	breq	.+16     	; 0xf52 <__vector_9+0x60>
     f42:	1a c1       	rjmp	.+564    	; 0x1178 <__vector_9+0x286>
     f44:	88 30       	cpi	r24, 0x08	; 8
     f46:	09 f4       	brne	.+2      	; 0xf4a <__vector_9+0x58>
     f48:	8e c0       	rjmp	.+284    	; 0x1066 <__vector_9+0x174>
     f4a:	80 31       	cpi	r24, 0x10	; 16
     f4c:	09 f4       	brne	.+2      	; 0xf50 <__vector_9+0x5e>
     f4e:	d0 c0       	rjmp	.+416    	; 0x10f0 <__vector_9+0x1fe>
     f50:	13 c1       	rjmp	.+550    	; 0x1178 <__vector_9+0x286>
		case 1: //pcint0 changed
		break;

		case 2: //pcint1 changed
		//SCK - Yaw
		if (flag_rx == 1)
     f52:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <flag_rx>
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	09 f0       	breq	.+2      	; 0xf5c <__vector_9+0x6a>
     f5a:	0e c1       	rjmp	.+540    	; 0x1178 <__vector_9+0x286>
		{
			yaw = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
     f5c:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <system_tick_MG>
     f60:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <system_tick_MG+0x1>
     f64:	80 90 3b 01 	lds	r8, 0x013B	; 0x80013b <int_period>
     f68:	90 90 3c 01 	lds	r9, 0x013C	; 0x80013c <int_period+0x1>
     f6c:	a0 90 3d 01 	lds	r10, 0x013D	; 0x80013d <int_period+0x2>
     f70:	b0 90 3e 01 	lds	r11, 0x013E	; 0x80013e <int_period+0x3>
     f74:	c6 b5       	in	r28, 0x26	; 38
     f76:	c0 90 37 01 	lds	r12, 0x0137	; 0x800137 <period>
     f7a:	d0 90 38 01 	lds	r13, 0x0138	; 0x800138 <period+0x1>
     f7e:	e0 90 39 01 	lds	r14, 0x0139	; 0x800139 <period+0x2>
     f82:	f0 90 3a 01 	lds	r15, 0x013A	; 0x80013a <period+0x3>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatunsisf>
     f8e:	a5 01       	movw	r20, r10
     f90:	94 01       	movw	r18, r8
     f92:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__subsf3>
     f96:	4b 01       	movw	r8, r22
     f98:	5c 01       	movw	r10, r24
     f9a:	6c 2f       	mov	r22, r28
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
     fa6:	2d eb       	ldi	r18, 0xBD	; 189
     fa8:	37 e3       	ldi	r19, 0x37	; 55
     faa:	46 e8       	ldi	r20, 0x86	; 134
     fac:	56 e3       	ldi	r21, 0x36	; 54
     fae:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     fb2:	9b 01       	movw	r18, r22
     fb4:	ac 01       	movw	r20, r24
     fb6:	c5 01       	movw	r24, r10
     fb8:	b4 01       	movw	r22, r8
     fba:	0e 94 5f 0a 	call	0x14be	; 0x14be <__addsf3>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	48 ec       	ldi	r20, 0xC8	; 200
     fc4:	52 e4       	ldi	r21, 0x42	; 66
     fc6:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
     fca:	a7 01       	movw	r20, r14
     fcc:	96 01       	movw	r18, r12
     fce:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3>
     fd2:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
     fd6:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <yaw>
     fda:	ce c0       	rjmp	.+412    	; 0x1178 <__vector_9+0x286>
		}
		break;

		case 4: //pcint2 changed
		//MOSI - Roll
		if (flag_rx == 1)
     fdc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <flag_rx>
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <__vector_9+0xf4>
     fe4:	c9 c0       	rjmp	.+402    	; 0x1178 <__vector_9+0x286>
		{
			roll = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
     fe6:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <system_tick_MG>
     fea:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <system_tick_MG+0x1>
     fee:	80 90 3b 01 	lds	r8, 0x013B	; 0x80013b <int_period>
     ff2:	90 90 3c 01 	lds	r9, 0x013C	; 0x80013c <int_period+0x1>
     ff6:	a0 90 3d 01 	lds	r10, 0x013D	; 0x80013d <int_period+0x2>
     ffa:	b0 90 3e 01 	lds	r11, 0x013E	; 0x80013e <int_period+0x3>
     ffe:	c6 b5       	in	r28, 0x26	; 38
    1000:	c0 90 37 01 	lds	r12, 0x0137	; 0x800137 <period>
    1004:	d0 90 38 01 	lds	r13, 0x0138	; 0x800138 <period+0x1>
    1008:	e0 90 39 01 	lds	r14, 0x0139	; 0x800139 <period+0x2>
    100c:	f0 90 3a 01 	lds	r15, 0x013A	; 0x80013a <period+0x3>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatunsisf>
    1018:	a5 01       	movw	r20, r10
    101a:	94 01       	movw	r18, r8
    101c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__subsf3>
    1020:	4b 01       	movw	r8, r22
    1022:	5c 01       	movw	r10, r24
    1024:	6c 2f       	mov	r22, r28
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
    1030:	2d eb       	ldi	r18, 0xBD	; 189
    1032:	37 e3       	ldi	r19, 0x37	; 55
    1034:	46 e8       	ldi	r20, 0x86	; 134
    1036:	56 e3       	ldi	r21, 0x36	; 54
    1038:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	c5 01       	movw	r24, r10
    1042:	b4 01       	movw	r22, r8
    1044:	0e 94 5f 0a 	call	0x14be	; 0x14be <__addsf3>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	48 ec       	ldi	r20, 0xC8	; 200
    104e:	52 e4       	ldi	r21, 0x42	; 66
    1050:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
    1054:	a7 01       	movw	r20, r14
    1056:	96 01       	movw	r18, r12
    1058:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3>
    105c:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
    1060:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <roll>
    1064:	89 c0       	rjmp	.+274    	; 0x1178 <__vector_9+0x286>
		}
		break;

		case 8:  //pcint3 changed
		//MISO - Pitch
		if (flag_rx == 1)
    1066:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <flag_rx>
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	09 f0       	breq	.+2      	; 0x1070 <__vector_9+0x17e>
    106e:	84 c0       	rjmp	.+264    	; 0x1178 <__vector_9+0x286>
		{
			pitch = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    1070:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <system_tick_MG>
    1074:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <system_tick_MG+0x1>
    1078:	80 90 3b 01 	lds	r8, 0x013B	; 0x80013b <int_period>
    107c:	90 90 3c 01 	lds	r9, 0x013C	; 0x80013c <int_period+0x1>
    1080:	a0 90 3d 01 	lds	r10, 0x013D	; 0x80013d <int_period+0x2>
    1084:	b0 90 3e 01 	lds	r11, 0x013E	; 0x80013e <int_period+0x3>
    1088:	c6 b5       	in	r28, 0x26	; 38
    108a:	c0 90 37 01 	lds	r12, 0x0137	; 0x800137 <period>
    108e:	d0 90 38 01 	lds	r13, 0x0138	; 0x800138 <period+0x1>
    1092:	e0 90 39 01 	lds	r14, 0x0139	; 0x800139 <period+0x2>
    1096:	f0 90 3a 01 	lds	r15, 0x013A	; 0x80013a <period+0x3>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatunsisf>
    10a2:	a5 01       	movw	r20, r10
    10a4:	94 01       	movw	r18, r8
    10a6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__subsf3>
    10aa:	4b 01       	movw	r8, r22
    10ac:	5c 01       	movw	r10, r24
    10ae:	6c 2f       	mov	r22, r28
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
    10ba:	2d eb       	ldi	r18, 0xBD	; 189
    10bc:	37 e3       	ldi	r19, 0x37	; 55
    10be:	46 e8       	ldi	r20, 0x86	; 134
    10c0:	56 e3       	ldi	r21, 0x36	; 54
    10c2:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
    10c6:	9b 01       	movw	r18, r22
    10c8:	ac 01       	movw	r20, r24
    10ca:	c5 01       	movw	r24, r10
    10cc:	b4 01       	movw	r22, r8
    10ce:	0e 94 5f 0a 	call	0x14be	; 0x14be <__addsf3>
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	48 ec       	ldi	r20, 0xC8	; 200
    10d8:	52 e4       	ldi	r21, 0x42	; 66
    10da:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
    10de:	a7 01       	movw	r20, r14
    10e0:	96 01       	movw	r18, r12
    10e2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3>
    10e6:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
    10ea:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <pitch>
    10ee:	44 c0       	rjmp	.+136    	; 0x1178 <__vector_9+0x286>
		}
		break;

		case 16: //pcint4 changed
		//PB4: AUX1
		if (flag_rx == 1)
    10f0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <flag_rx>
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <__vector_9+0x208>
    10f8:	3f c0       	rjmp	.+126    	; 0x1178 <__vector_9+0x286>
		{
			aux1 = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    10fa:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <system_tick_MG>
    10fe:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <system_tick_MG+0x1>
    1102:	80 90 3b 01 	lds	r8, 0x013B	; 0x80013b <int_period>
    1106:	90 90 3c 01 	lds	r9, 0x013C	; 0x80013c <int_period+0x1>
    110a:	a0 90 3d 01 	lds	r10, 0x013D	; 0x80013d <int_period+0x2>
    110e:	b0 90 3e 01 	lds	r11, 0x013E	; 0x80013e <int_period+0x3>
    1112:	c6 b5       	in	r28, 0x26	; 38
    1114:	c0 90 37 01 	lds	r12, 0x0137	; 0x800137 <period>
    1118:	d0 90 38 01 	lds	r13, 0x0138	; 0x800138 <period+0x1>
    111c:	e0 90 39 01 	lds	r14, 0x0139	; 0x800139 <period+0x2>
    1120:	f0 90 3a 01 	lds	r15, 0x013A	; 0x80013a <period+0x3>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__floatunsisf>
    112c:	a5 01       	movw	r20, r10
    112e:	94 01       	movw	r18, r8
    1130:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__subsf3>
    1134:	4b 01       	movw	r8, r22
    1136:	5c 01       	movw	r10, r24
    1138:	6c 2f       	mov	r22, r28
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__floatsisf>
    1144:	2d eb       	ldi	r18, 0xBD	; 189
    1146:	37 e3       	ldi	r19, 0x37	; 55
    1148:	46 e8       	ldi	r20, 0x86	; 134
    114a:	56 e3       	ldi	r21, 0x36	; 54
    114c:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
    1150:	9b 01       	movw	r18, r22
    1152:	ac 01       	movw	r20, r24
    1154:	c5 01       	movw	r24, r10
    1156:	b4 01       	movw	r22, r8
    1158:	0e 94 5f 0a 	call	0x14be	; 0x14be <__addsf3>
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	48 ec       	ldi	r20, 0xC8	; 200
    1162:	52 e4       	ldi	r21, 0x42	; 66
    1164:	0e 94 01 0c 	call	0x1802	; 0x1802 <__mulsf3>
    1168:	a7 01       	movw	r20, r14
    116a:	96 01       	movw	r18, r12
    116c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3>
    1170:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
    1174:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <aux1>
		break;
		
		case 128: //pcint7 changed
		break;
	}
}
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	cf 91       	pop	r28
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	bf 90       	pop	r11
    119c:	af 90       	pop	r10
    119e:	9f 90       	pop	r9
    11a0:	8f 90       	pop	r8
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <interrupt_init>:

void interrupt_init(){
	Interrupt_Init_Rising_INT6();
    11ac:	0e 94 76 06 	call	0xcec	; 0xcec <Interrupt_Init_Rising_INT6>
	Int_6_En();
    11b0:	0e 94 70 06 	call	0xce0	; 0xce0 <Int_6_En>
	
	Pin_Change_En(0b10000000);
    11b4:	80 e8       	ldi	r24, 0x80	; 128
    11b6:	0e 94 93 06 	call	0xd26	; 0xd26 <Pin_Change_En>
    11ba:	08 95       	ret

000011bc <timer3_16bit_PWM_initA>:
}

uint16_t time_in_millisecondsseconds(uint16_t precision, uint16_t precision_module){
	uint16_t carry = system_tick_MG_mod-precision_module;
	return system_tick_MG + (65535*carry - precision);
}
    11bc:	80 e4       	ldi	r24, 0x40	; 64
    11be:	87 b9       	out	0x07, r24	; 7
    11c0:	e0 e9       	ldi	r30, 0x90	; 144
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	80 68       	ori	r24, 0x80	; 128
    11c8:	80 83       	st	Z, r24
    11ca:	e1 e9       	ldi	r30, 0x91	; 145
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 61       	ori	r24, 0x10	; 16
    11d2:	80 83       	st	Z, r24
    11d4:	08 95       	ret

000011d6 <timer1_16bit_PWM_initABC>:
    11d6:	84 b1       	in	r24, 0x04	; 4
    11d8:	80 6e       	ori	r24, 0xE0	; 224
    11da:	84 b9       	out	0x04, r24	; 4
    11dc:	e0 e8       	ldi	r30, 0x80	; 128
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	88 6a       	ori	r24, 0xA8	; 168
    11e4:	80 83       	st	Z, r24
    11e6:	80 e1       	ldi	r24, 0x10	; 16
    11e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    11ec:	08 95       	ret

000011ee <timer_8bit_setCLK>:
    11ee:	80 34       	cpi	r24, 0x40	; 64
    11f0:	91 05       	cpc	r25, r1
    11f2:	d1 f0       	breq	.+52     	; 0x1228 <timer_8bit_setCLK+0x3a>
    11f4:	30 f4       	brcc	.+12     	; 0x1202 <timer_8bit_setCLK+0x14>
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	69 f0       	breq	.+26     	; 0x1214 <timer_8bit_setCLK+0x26>
    11fa:	88 30       	cpi	r24, 0x08	; 8
    11fc:	91 05       	cpc	r25, r1
    11fe:	81 f0       	breq	.+32     	; 0x1220 <timer_8bit_setCLK+0x32>
    1200:	1f c0       	rjmp	.+62     	; 0x1240 <timer_8bit_setCLK+0x52>
    1202:	81 15       	cp	r24, r1
    1204:	21 e0       	ldi	r18, 0x01	; 1
    1206:	92 07       	cpc	r25, r18
    1208:	99 f0       	breq	.+38     	; 0x1230 <timer_8bit_setCLK+0x42>
    120a:	81 15       	cp	r24, r1
    120c:	24 e0       	ldi	r18, 0x04	; 4
    120e:	92 07       	cpc	r25, r18
    1210:	99 f0       	breq	.+38     	; 0x1238 <timer_8bit_setCLK+0x4a>
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <timer_8bit_setCLK+0x52>
    1214:	85 b5       	in	r24, 0x25	; 37
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	85 bd       	out	0x25, r24	; 37
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	08 95       	ret
    1220:	25 b5       	in	r18, 0x25	; 37
    1222:	22 60       	ori	r18, 0x02	; 2
    1224:	25 bd       	out	0x25, r18	; 37
    1226:	08 95       	ret
    1228:	25 b5       	in	r18, 0x25	; 37
    122a:	23 60       	ori	r18, 0x03	; 3
    122c:	25 bd       	out	0x25, r18	; 37
    122e:	08 95       	ret
    1230:	25 b5       	in	r18, 0x25	; 37
    1232:	24 60       	ori	r18, 0x04	; 4
    1234:	25 bd       	out	0x25, r18	; 37
    1236:	08 95       	ret
    1238:	25 b5       	in	r18, 0x25	; 37
    123a:	26 60       	ori	r18, 0x06	; 6
    123c:	25 bd       	out	0x25, r18	; 37
    123e:	08 95       	ret
    1240:	85 b5       	in	r24, 0x25	; 37
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	85 bd       	out	0x25, r24	; 37
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	08 95       	ret

0000124c <timer_8bit_CTC_init>:
    124c:	cf 93       	push	r28
    124e:	c8 2f       	mov	r28, r24
    1250:	cb 01       	movw	r24, r22
    1252:	22 e0       	ldi	r18, 0x02	; 2
    1254:	24 bd       	out	0x24, r18	; 36
    1256:	0e 94 f7 08 	call	0x11ee	; 0x11ee <timer_8bit_setCLK>
    125a:	c7 bd       	out	0x27, r28	; 39
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <timer_8bit_INT_init_COMPA>:
    1260:	ee e6       	ldi	r30, 0x6E	; 110
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	80 83       	st	Z, r24
    126a:	08 95       	ret

0000126c <__vector_20>:
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <__vector_35>:
    1280:	1f 92       	push	r1
    1282:	0f 92       	push	r0
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	0f 92       	push	r0
    1288:	11 24       	eor	r1, r1
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <__vector_16>:
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <__vector_31>:
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <__vector_21>:
    12bc:	1f 92       	push	r1
    12be:	0f 92       	push	r0
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	0f 92       	push	r0
    12c4:	11 24       	eor	r1, r1
    12c6:	2f 93       	push	r18
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <system_tick_MG>
    12d0:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <system_tick_MG+0x1>
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <system_tick_MG+0x1>
    12da:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <system_tick_MG>
    12de:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <system_tick_MG_p>
    12e2:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <system_tick_MG_p+0x1>
    12e6:	88 50       	subi	r24, 0x08	; 8
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <system_tick_MG_p+0x1>
    12ee:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <system_tick_MG_p>
    12f2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <system_tick_MG_p>
    12f6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <system_tick_MG_p+0x1>
    12fa:	87 30       	cpi	r24, 0x07	; 7
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	48 f0       	brcs	.+18     	; 0x1312 <__vector_21+0x56>
    1300:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <system_tick_MG_p_mod>
    1304:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <system_tick_MG_p_mod+0x1>
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <system_tick_MG_p_mod+0x1>
    130e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <system_tick_MG_p_mod>
    1312:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <system_tick_MG>
    1316:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <system_tick_MG+0x1>
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	59 f4       	brne	.+22     	; 0x1334 <__vector_21+0x78>
    131e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <system_tick_MG_mod>
    1322:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <system_tick_MG_mod+0x1>
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <system_tick_MG_mod+0x1>
    132c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <system_tick_MG_mod>
    1330:	80 e1       	ldi	r24, 0x10	; 16
    1332:	85 b9       	out	0x05, r24	; 5
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	2f 91       	pop	r18
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <time_precision>:
    1344:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <system_tick_MG_p_mod>
    1348:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <system_tick_MG_p_mod+0x1>
    134c:	e6 b5       	in	r30, 0x26	; 38
    134e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <system_tick_MG_p>
    1352:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <system_tick_MG_p+0x1>
    1356:	2e 0f       	add	r18, r30
    1358:	31 1d       	adc	r19, r1
    135a:	f9 01       	movw	r30, r18
    135c:	e8 1b       	sub	r30, r24
    135e:	f9 0b       	sbc	r31, r25
    1360:	cf 01       	movw	r24, r30
    1362:	46 1b       	sub	r20, r22
    1364:	57 0b       	sbc	r21, r23
    1366:	84 1b       	sub	r24, r20
    1368:	95 0b       	sbc	r25, r21
    136a:	08 95       	ret

0000136c <time_in_seconds>:

uint16_t time_in_seconds(uint16_t precision, uint16_t precision_module){
    136c:	fc 01       	movw	r30, r24
	uint16_t carry = system_tick_MG_mod-precision_module;
    136e:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <system_tick_MG_mod>
    1372:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <system_tick_MG_mod+0x1>
	return (system_tick_MG + (65535*carry - precision))/1000;
    1376:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <system_tick_MG>
    137a:	50 91 91 01 	lds	r21, 0x0191	; 0x800191 <system_tick_MG+0x1>
    137e:	26 1b       	sub	r18, r22
    1380:	37 0b       	sbc	r19, r23
    1382:	af ef       	ldi	r26, 0xFF	; 255
    1384:	bf ef       	ldi	r27, 0xFF	; 255
    1386:	0e 94 af 0c 	call	0x195e	; 0x195e <__umulhisi3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	8e 1b       	sub	r24, r30
    1390:	9f 0b       	sbc	r25, r31
    1392:	a1 09       	sbc	r26, r1
    1394:	b1 09       	sbc	r27, r1
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	64 0f       	add	r22, r20
    139c:	75 1f       	adc	r23, r21
    139e:	81 1d       	adc	r24, r1
    13a0:	91 1d       	adc	r25, r1
    13a2:	28 ee       	ldi	r18, 0xE8	; 232
    13a4:	33 e0       	ldi	r19, 0x03	; 3
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	0e 94 90 0c 	call	0x1920	; 0x1920 <__divmodsi4>

}
    13ae:	c9 01       	movw	r24, r18
    13b0:	08 95       	ret

000013b2 <timer_init>:

void timer_init(){
	timer1_16bit_PWM_initABC();
    13b2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <timer1_16bit_PWM_initABC>
	timer3_16bit_PWM_initA();
    13b6:	0e 94 de 08 	call	0x11bc	; 0x11bc <timer3_16bit_PWM_initA>
	
	timer_8bit_CTC_init(248, 64); //1kHz -> 124, divide by two because triggers on both edges
    13ba:	60 e4       	ldi	r22, 0x40	; 64
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	88 ef       	ldi	r24, 0xF8	; 248
    13c0:	0e 94 26 09 	call	0x124c	; 0x124c <timer_8bit_CTC_init>
	timer_8bit_INT_init_COMPA();
    13c4:	0e 94 30 09 	call	0x1260	; 0x1260 <timer_8bit_INT_init_COMPA>
    13c8:	08 95       	ret

000013ca <USART_Init>:
    13ca:	a0 e0       	ldi	r26, 0x00	; 0
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	aa 1f       	adc	r26, r26
    13d4:	bb 1f       	adc	r27, r27
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	aa 1f       	adc	r26, r26
    13dc:	bb 1f       	adc	r27, r27
    13de:	9c 01       	movw	r18, r24
    13e0:	ad 01       	movw	r20, r26
    13e2:	22 0f       	add	r18, r18
    13e4:	33 1f       	adc	r19, r19
    13e6:	44 1f       	adc	r20, r20
    13e8:	55 1f       	adc	r21, r21
    13ea:	22 0f       	add	r18, r18
    13ec:	33 1f       	adc	r19, r19
    13ee:	44 1f       	adc	r20, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	74 e2       	ldi	r23, 0x24	; 36
    13f6:	84 ef       	ldi	r24, 0xF4	; 244
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__udivmodsi4>
    13fe:	21 50       	subi	r18, 0x01	; 1
    1400:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1404:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1408:	e9 ec       	ldi	r30, 0xC9	; 201
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 e8       	ldi	r24, 0x80	; 128
    140e:	80 83       	st	Z, r24
    1410:	86 e0       	ldi	r24, 0x06	; 6
    1412:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    1416:	80 81       	ld	r24, Z
    1418:	88 61       	ori	r24, 0x18	; 24
    141a:	80 83       	st	Z, r24
    141c:	08 95       	ret

0000141e <USART_Transmit>:
    141e:	e8 ec       	ldi	r30, 0xC8	; 200
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	90 81       	ld	r25, Z
    1424:	95 ff       	sbrs	r25, 5
    1426:	fd cf       	rjmp	.-6      	; 0x1422 <USART_Transmit+0x4>
    1428:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    142c:	08 95       	ret

0000142e <USART_String>:
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	66 23       	and	r22, r22
    1438:	51 f0       	breq	.+20     	; 0x144e <USART_String+0x20>
    143a:	8c 01       	movw	r16, r24
    143c:	ec 01       	movw	r28, r24
    143e:	06 0f       	add	r16, r22
    1440:	11 1d       	adc	r17, r1
    1442:	89 91       	ld	r24, Y+
    1444:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
    1448:	c0 17       	cp	r28, r16
    144a:	d1 07       	cpc	r29, r17
    144c:	d1 f7       	brne	.-12     	; 0x1442 <USART_String+0x14>
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	08 95       	ret

00001458 <__vector_25>:
    1458:	1f 92       	push	r1
    145a:	0f 92       	push	r0
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	0f 92       	push	r0
    1460:	11 24       	eor	r1, r1
    1462:	2f 93       	push	r18
    1464:	3f 93       	push	r19
    1466:	4f 93       	push	r20
    1468:	5f 93       	push	r21
    146a:	6f 93       	push	r22
    146c:	7f 93       	push	r23
    146e:	8f 93       	push	r24
    1470:	9f 93       	push	r25
    1472:	af 93       	push	r26
    1474:	bf 93       	push	r27
    1476:	ef 93       	push	r30
    1478:	ff 93       	push	r31
    147a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    147e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ISR_USART_Receive>
    1482:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ISR_USART_Receive>
    1486:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
    148a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ISR_USART_Receive>
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 75 00 	call	0xea	; 0xea <selected_value>
    1494:	8a e0       	ldi	r24, 0x0A	; 10
    1496:	0e 94 0f 0a 	call	0x141e	; 0x141e <USART_Transmit>
    149a:	ff 91       	pop	r31
    149c:	ef 91       	pop	r30
    149e:	bf 91       	pop	r27
    14a0:	af 91       	pop	r26
    14a2:	9f 91       	pop	r25
    14a4:	8f 91       	pop	r24
    14a6:	7f 91       	pop	r23
    14a8:	6f 91       	pop	r22
    14aa:	5f 91       	pop	r21
    14ac:	4f 91       	pop	r20
    14ae:	3f 91       	pop	r19
    14b0:	2f 91       	pop	r18
    14b2:	0f 90       	pop	r0
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	0f 90       	pop	r0
    14b8:	1f 90       	pop	r1
    14ba:	18 95       	reti

000014bc <__subsf3>:
    14bc:	50 58       	subi	r21, 0x80	; 128

000014be <__addsf3>:
    14be:	bb 27       	eor	r27, r27
    14c0:	aa 27       	eor	r26, r26
    14c2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__addsf3x>
    14c6:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_round>
    14ca:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fp_pscA>
    14ce:	38 f0       	brcs	.+14     	; 0x14de <__addsf3+0x20>
    14d0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__fp_pscB>
    14d4:	20 f0       	brcs	.+8      	; 0x14de <__addsf3+0x20>
    14d6:	39 f4       	brne	.+14     	; 0x14e6 <__addsf3+0x28>
    14d8:	9f 3f       	cpi	r25, 0xFF	; 255
    14da:	19 f4       	brne	.+6      	; 0x14e2 <__addsf3+0x24>
    14dc:	26 f4       	brtc	.+8      	; 0x14e6 <__addsf3+0x28>
    14de:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_nan>
    14e2:	0e f4       	brtc	.+2      	; 0x14e6 <__addsf3+0x28>
    14e4:	e0 95       	com	r30
    14e6:	e7 fb       	bst	r30, 7
    14e8:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_inf>

000014ec <__addsf3x>:
    14ec:	e9 2f       	mov	r30, r25
    14ee:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_split3>
    14f2:	58 f3       	brcs	.-42     	; 0x14ca <__addsf3+0xc>
    14f4:	ba 17       	cp	r27, r26
    14f6:	62 07       	cpc	r22, r18
    14f8:	73 07       	cpc	r23, r19
    14fa:	84 07       	cpc	r24, r20
    14fc:	95 07       	cpc	r25, r21
    14fe:	20 f0       	brcs	.+8      	; 0x1508 <__addsf3x+0x1c>
    1500:	79 f4       	brne	.+30     	; 0x1520 <__addsf3x+0x34>
    1502:	a6 f5       	brtc	.+104    	; 0x156c <__addsf3x+0x80>
    1504:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__fp_zero>
    1508:	0e f4       	brtc	.+2      	; 0x150c <__addsf3x+0x20>
    150a:	e0 95       	com	r30
    150c:	0b 2e       	mov	r0, r27
    150e:	ba 2f       	mov	r27, r26
    1510:	a0 2d       	mov	r26, r0
    1512:	0b 01       	movw	r0, r22
    1514:	b9 01       	movw	r22, r18
    1516:	90 01       	movw	r18, r0
    1518:	0c 01       	movw	r0, r24
    151a:	ca 01       	movw	r24, r20
    151c:	a0 01       	movw	r20, r0
    151e:	11 24       	eor	r1, r1
    1520:	ff 27       	eor	r31, r31
    1522:	59 1b       	sub	r21, r25
    1524:	99 f0       	breq	.+38     	; 0x154c <__addsf3x+0x60>
    1526:	59 3f       	cpi	r21, 0xF9	; 249
    1528:	50 f4       	brcc	.+20     	; 0x153e <__addsf3x+0x52>
    152a:	50 3e       	cpi	r21, 0xE0	; 224
    152c:	68 f1       	brcs	.+90     	; 0x1588 <__addsf3x+0x9c>
    152e:	1a 16       	cp	r1, r26
    1530:	f0 40       	sbci	r31, 0x00	; 0
    1532:	a2 2f       	mov	r26, r18
    1534:	23 2f       	mov	r18, r19
    1536:	34 2f       	mov	r19, r20
    1538:	44 27       	eor	r20, r20
    153a:	58 5f       	subi	r21, 0xF8	; 248
    153c:	f3 cf       	rjmp	.-26     	; 0x1524 <__addsf3x+0x38>
    153e:	46 95       	lsr	r20
    1540:	37 95       	ror	r19
    1542:	27 95       	ror	r18
    1544:	a7 95       	ror	r26
    1546:	f0 40       	sbci	r31, 0x00	; 0
    1548:	53 95       	inc	r21
    154a:	c9 f7       	brne	.-14     	; 0x153e <__addsf3x+0x52>
    154c:	7e f4       	brtc	.+30     	; 0x156c <__addsf3x+0x80>
    154e:	1f 16       	cp	r1, r31
    1550:	ba 0b       	sbc	r27, r26
    1552:	62 0b       	sbc	r22, r18
    1554:	73 0b       	sbc	r23, r19
    1556:	84 0b       	sbc	r24, r20
    1558:	ba f0       	brmi	.+46     	; 0x1588 <__addsf3x+0x9c>
    155a:	91 50       	subi	r25, 0x01	; 1
    155c:	a1 f0       	breq	.+40     	; 0x1586 <__addsf3x+0x9a>
    155e:	ff 0f       	add	r31, r31
    1560:	bb 1f       	adc	r27, r27
    1562:	66 1f       	adc	r22, r22
    1564:	77 1f       	adc	r23, r23
    1566:	88 1f       	adc	r24, r24
    1568:	c2 f7       	brpl	.-16     	; 0x155a <__addsf3x+0x6e>
    156a:	0e c0       	rjmp	.+28     	; 0x1588 <__addsf3x+0x9c>
    156c:	ba 0f       	add	r27, r26
    156e:	62 1f       	adc	r22, r18
    1570:	73 1f       	adc	r23, r19
    1572:	84 1f       	adc	r24, r20
    1574:	48 f4       	brcc	.+18     	; 0x1588 <__addsf3x+0x9c>
    1576:	87 95       	ror	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	b7 95       	ror	r27
    157e:	f7 95       	ror	r31
    1580:	9e 3f       	cpi	r25, 0xFE	; 254
    1582:	08 f0       	brcs	.+2      	; 0x1586 <__addsf3x+0x9a>
    1584:	b0 cf       	rjmp	.-160    	; 0x14e6 <__addsf3+0x28>
    1586:	93 95       	inc	r25
    1588:	88 0f       	add	r24, r24
    158a:	08 f0       	brcs	.+2      	; 0x158e <__addsf3x+0xa2>
    158c:	99 27       	eor	r25, r25
    158e:	ee 0f       	add	r30, r30
    1590:	97 95       	ror	r25
    1592:	87 95       	ror	r24
    1594:	08 95       	ret

00001596 <__divsf3>:
    1596:	0e 94 df 0a 	call	0x15be	; 0x15be <__divsf3x>
    159a:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_round>
    159e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__fp_pscB>
    15a2:	58 f0       	brcs	.+22     	; 0x15ba <__divsf3+0x24>
    15a4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fp_pscA>
    15a8:	40 f0       	brcs	.+16     	; 0x15ba <__divsf3+0x24>
    15aa:	29 f4       	brne	.+10     	; 0x15b6 <__divsf3+0x20>
    15ac:	5f 3f       	cpi	r21, 0xFF	; 255
    15ae:	29 f0       	breq	.+10     	; 0x15ba <__divsf3+0x24>
    15b0:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_inf>
    15b4:	51 11       	cpse	r21, r1
    15b6:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_szero>
    15ba:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_nan>

000015be <__divsf3x>:
    15be:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_split3>
    15c2:	68 f3       	brcs	.-38     	; 0x159e <__divsf3+0x8>

000015c4 <__divsf3_pse>:
    15c4:	99 23       	and	r25, r25
    15c6:	b1 f3       	breq	.-20     	; 0x15b4 <__divsf3+0x1e>
    15c8:	55 23       	and	r21, r21
    15ca:	91 f3       	breq	.-28     	; 0x15b0 <__divsf3+0x1a>
    15cc:	95 1b       	sub	r25, r21
    15ce:	55 0b       	sbc	r21, r21
    15d0:	bb 27       	eor	r27, r27
    15d2:	aa 27       	eor	r26, r26
    15d4:	62 17       	cp	r22, r18
    15d6:	73 07       	cpc	r23, r19
    15d8:	84 07       	cpc	r24, r20
    15da:	38 f0       	brcs	.+14     	; 0x15ea <__divsf3_pse+0x26>
    15dc:	9f 5f       	subi	r25, 0xFF	; 255
    15de:	5f 4f       	sbci	r21, 0xFF	; 255
    15e0:	22 0f       	add	r18, r18
    15e2:	33 1f       	adc	r19, r19
    15e4:	44 1f       	adc	r20, r20
    15e6:	aa 1f       	adc	r26, r26
    15e8:	a9 f3       	breq	.-22     	; 0x15d4 <__divsf3_pse+0x10>
    15ea:	35 d0       	rcall	.+106    	; 0x1656 <__divsf3_pse+0x92>
    15ec:	0e 2e       	mov	r0, r30
    15ee:	3a f0       	brmi	.+14     	; 0x15fe <__divsf3_pse+0x3a>
    15f0:	e0 e8       	ldi	r30, 0x80	; 128
    15f2:	32 d0       	rcall	.+100    	; 0x1658 <__divsf3_pse+0x94>
    15f4:	91 50       	subi	r25, 0x01	; 1
    15f6:	50 40       	sbci	r21, 0x00	; 0
    15f8:	e6 95       	lsr	r30
    15fa:	00 1c       	adc	r0, r0
    15fc:	ca f7       	brpl	.-14     	; 0x15f0 <__divsf3_pse+0x2c>
    15fe:	2b d0       	rcall	.+86     	; 0x1656 <__divsf3_pse+0x92>
    1600:	fe 2f       	mov	r31, r30
    1602:	29 d0       	rcall	.+82     	; 0x1656 <__divsf3_pse+0x92>
    1604:	66 0f       	add	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	bb 1f       	adc	r27, r27
    160c:	26 17       	cp	r18, r22
    160e:	37 07       	cpc	r19, r23
    1610:	48 07       	cpc	r20, r24
    1612:	ab 07       	cpc	r26, r27
    1614:	b0 e8       	ldi	r27, 0x80	; 128
    1616:	09 f0       	breq	.+2      	; 0x161a <__divsf3_pse+0x56>
    1618:	bb 0b       	sbc	r27, r27
    161a:	80 2d       	mov	r24, r0
    161c:	bf 01       	movw	r22, r30
    161e:	ff 27       	eor	r31, r31
    1620:	93 58       	subi	r25, 0x83	; 131
    1622:	5f 4f       	sbci	r21, 0xFF	; 255
    1624:	3a f0       	brmi	.+14     	; 0x1634 <__divsf3_pse+0x70>
    1626:	9e 3f       	cpi	r25, 0xFE	; 254
    1628:	51 05       	cpc	r21, r1
    162a:	78 f0       	brcs	.+30     	; 0x164a <__divsf3_pse+0x86>
    162c:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_inf>
    1630:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_szero>
    1634:	5f 3f       	cpi	r21, 0xFF	; 255
    1636:	e4 f3       	brlt	.-8      	; 0x1630 <__divsf3_pse+0x6c>
    1638:	98 3e       	cpi	r25, 0xE8	; 232
    163a:	d4 f3       	brlt	.-12     	; 0x1630 <__divsf3_pse+0x6c>
    163c:	86 95       	lsr	r24
    163e:	77 95       	ror	r23
    1640:	67 95       	ror	r22
    1642:	b7 95       	ror	r27
    1644:	f7 95       	ror	r31
    1646:	9f 5f       	subi	r25, 0xFF	; 255
    1648:	c9 f7       	brne	.-14     	; 0x163c <__divsf3_pse+0x78>
    164a:	88 0f       	add	r24, r24
    164c:	91 1d       	adc	r25, r1
    164e:	96 95       	lsr	r25
    1650:	87 95       	ror	r24
    1652:	97 f9       	bld	r25, 7
    1654:	08 95       	ret
    1656:	e1 e0       	ldi	r30, 0x01	; 1
    1658:	66 0f       	add	r22, r22
    165a:	77 1f       	adc	r23, r23
    165c:	88 1f       	adc	r24, r24
    165e:	bb 1f       	adc	r27, r27
    1660:	62 17       	cp	r22, r18
    1662:	73 07       	cpc	r23, r19
    1664:	84 07       	cpc	r24, r20
    1666:	ba 07       	cpc	r27, r26
    1668:	20 f0       	brcs	.+8      	; 0x1672 <__divsf3_pse+0xae>
    166a:	62 1b       	sub	r22, r18
    166c:	73 0b       	sbc	r23, r19
    166e:	84 0b       	sbc	r24, r20
    1670:	ba 0b       	sbc	r27, r26
    1672:	ee 1f       	adc	r30, r30
    1674:	88 f7       	brcc	.-30     	; 0x1658 <__divsf3_pse+0x94>
    1676:	e0 95       	com	r30
    1678:	08 95       	ret

0000167a <__fixsfsi>:
    167a:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fixunssfsi>
    167e:	68 94       	set
    1680:	b1 11       	cpse	r27, r1
    1682:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_szero>
    1686:	08 95       	ret

00001688 <__fixunssfsi>:
    1688:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_splitA>
    168c:	88 f0       	brcs	.+34     	; 0x16b0 <__fixunssfsi+0x28>
    168e:	9f 57       	subi	r25, 0x7F	; 127
    1690:	98 f0       	brcs	.+38     	; 0x16b8 <__fixunssfsi+0x30>
    1692:	b9 2f       	mov	r27, r25
    1694:	99 27       	eor	r25, r25
    1696:	b7 51       	subi	r27, 0x17	; 23
    1698:	b0 f0       	brcs	.+44     	; 0x16c6 <__fixunssfsi+0x3e>
    169a:	e1 f0       	breq	.+56     	; 0x16d4 <__fixunssfsi+0x4c>
    169c:	66 0f       	add	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	88 1f       	adc	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	1a f0       	brmi	.+6      	; 0x16ac <__fixunssfsi+0x24>
    16a6:	ba 95       	dec	r27
    16a8:	c9 f7       	brne	.-14     	; 0x169c <__fixunssfsi+0x14>
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <__fixunssfsi+0x4c>
    16ac:	b1 30       	cpi	r27, 0x01	; 1
    16ae:	91 f0       	breq	.+36     	; 0x16d4 <__fixunssfsi+0x4c>
    16b0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fp_zero>
    16b4:	b1 e0       	ldi	r27, 0x01	; 1
    16b6:	08 95       	ret
    16b8:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__fp_zero>
    16bc:	67 2f       	mov	r22, r23
    16be:	78 2f       	mov	r23, r24
    16c0:	88 27       	eor	r24, r24
    16c2:	b8 5f       	subi	r27, 0xF8	; 248
    16c4:	39 f0       	breq	.+14     	; 0x16d4 <__fixunssfsi+0x4c>
    16c6:	b9 3f       	cpi	r27, 0xF9	; 249
    16c8:	cc f3       	brlt	.-14     	; 0x16bc <__fixunssfsi+0x34>
    16ca:	86 95       	lsr	r24
    16cc:	77 95       	ror	r23
    16ce:	67 95       	ror	r22
    16d0:	b3 95       	inc	r27
    16d2:	d9 f7       	brne	.-10     	; 0x16ca <__fixunssfsi+0x42>
    16d4:	3e f4       	brtc	.+14     	; 0x16e4 <__fixunssfsi+0x5c>
    16d6:	90 95       	com	r25
    16d8:	80 95       	com	r24
    16da:	70 95       	com	r23
    16dc:	61 95       	neg	r22
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	8f 4f       	sbci	r24, 0xFF	; 255
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	08 95       	ret

000016e6 <__floatunsisf>:
    16e6:	e8 94       	clt
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <__floatsisf+0x12>

000016ea <__floatsisf>:
    16ea:	97 fb       	bst	r25, 7
    16ec:	3e f4       	brtc	.+14     	; 0x16fc <__floatsisf+0x12>
    16ee:	90 95       	com	r25
    16f0:	80 95       	com	r24
    16f2:	70 95       	com	r23
    16f4:	61 95       	neg	r22
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	8f 4f       	sbci	r24, 0xFF	; 255
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	99 23       	and	r25, r25
    16fe:	a9 f0       	breq	.+42     	; 0x172a <__floatsisf+0x40>
    1700:	f9 2f       	mov	r31, r25
    1702:	96 e9       	ldi	r25, 0x96	; 150
    1704:	bb 27       	eor	r27, r27
    1706:	93 95       	inc	r25
    1708:	f6 95       	lsr	r31
    170a:	87 95       	ror	r24
    170c:	77 95       	ror	r23
    170e:	67 95       	ror	r22
    1710:	b7 95       	ror	r27
    1712:	f1 11       	cpse	r31, r1
    1714:	f8 cf       	rjmp	.-16     	; 0x1706 <__floatsisf+0x1c>
    1716:	fa f4       	brpl	.+62     	; 0x1756 <__floatsisf+0x6c>
    1718:	bb 0f       	add	r27, r27
    171a:	11 f4       	brne	.+4      	; 0x1720 <__floatsisf+0x36>
    171c:	60 ff       	sbrs	r22, 0
    171e:	1b c0       	rjmp	.+54     	; 0x1756 <__floatsisf+0x6c>
    1720:	6f 5f       	subi	r22, 0xFF	; 255
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	8f 4f       	sbci	r24, 0xFF	; 255
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	16 c0       	rjmp	.+44     	; 0x1756 <__floatsisf+0x6c>
    172a:	88 23       	and	r24, r24
    172c:	11 f0       	breq	.+4      	; 0x1732 <__floatsisf+0x48>
    172e:	96 e9       	ldi	r25, 0x96	; 150
    1730:	11 c0       	rjmp	.+34     	; 0x1754 <__floatsisf+0x6a>
    1732:	77 23       	and	r23, r23
    1734:	21 f0       	breq	.+8      	; 0x173e <__floatsisf+0x54>
    1736:	9e e8       	ldi	r25, 0x8E	; 142
    1738:	87 2f       	mov	r24, r23
    173a:	76 2f       	mov	r23, r22
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <__floatsisf+0x5e>
    173e:	66 23       	and	r22, r22
    1740:	71 f0       	breq	.+28     	; 0x175e <__floatsisf+0x74>
    1742:	96 e8       	ldi	r25, 0x86	; 134
    1744:	86 2f       	mov	r24, r22
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	2a f0       	brmi	.+10     	; 0x1756 <__floatsisf+0x6c>
    174c:	9a 95       	dec	r25
    174e:	66 0f       	add	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	88 1f       	adc	r24, r24
    1754:	da f7       	brpl	.-10     	; 0x174c <__floatsisf+0x62>
    1756:	88 0f       	add	r24, r24
    1758:	96 95       	lsr	r25
    175a:	87 95       	ror	r24
    175c:	97 f9       	bld	r25, 7
    175e:	08 95       	ret

00001760 <__fp_inf>:
    1760:	97 f9       	bld	r25, 7
    1762:	9f 67       	ori	r25, 0x7F	; 127
    1764:	80 e8       	ldi	r24, 0x80	; 128
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	08 95       	ret

0000176c <__fp_nan>:
    176c:	9f ef       	ldi	r25, 0xFF	; 255
    176e:	80 ec       	ldi	r24, 0xC0	; 192
    1770:	08 95       	ret

00001772 <__fp_pscA>:
    1772:	00 24       	eor	r0, r0
    1774:	0a 94       	dec	r0
    1776:	16 16       	cp	r1, r22
    1778:	17 06       	cpc	r1, r23
    177a:	18 06       	cpc	r1, r24
    177c:	09 06       	cpc	r0, r25
    177e:	08 95       	ret

00001780 <__fp_pscB>:
    1780:	00 24       	eor	r0, r0
    1782:	0a 94       	dec	r0
    1784:	12 16       	cp	r1, r18
    1786:	13 06       	cpc	r1, r19
    1788:	14 06       	cpc	r1, r20
    178a:	05 06       	cpc	r0, r21
    178c:	08 95       	ret

0000178e <__fp_round>:
    178e:	09 2e       	mov	r0, r25
    1790:	03 94       	inc	r0
    1792:	00 0c       	add	r0, r0
    1794:	11 f4       	brne	.+4      	; 0x179a <__fp_round+0xc>
    1796:	88 23       	and	r24, r24
    1798:	52 f0       	brmi	.+20     	; 0x17ae <__fp_round+0x20>
    179a:	bb 0f       	add	r27, r27
    179c:	40 f4       	brcc	.+16     	; 0x17ae <__fp_round+0x20>
    179e:	bf 2b       	or	r27, r31
    17a0:	11 f4       	brne	.+4      	; 0x17a6 <__fp_round+0x18>
    17a2:	60 ff       	sbrs	r22, 0
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <__fp_round+0x20>
    17a6:	6f 5f       	subi	r22, 0xFF	; 255
    17a8:	7f 4f       	sbci	r23, 0xFF	; 255
    17aa:	8f 4f       	sbci	r24, 0xFF	; 255
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	08 95       	ret

000017b0 <__fp_split3>:
    17b0:	57 fd       	sbrc	r21, 7
    17b2:	90 58       	subi	r25, 0x80	; 128
    17b4:	44 0f       	add	r20, r20
    17b6:	55 1f       	adc	r21, r21
    17b8:	59 f0       	breq	.+22     	; 0x17d0 <__fp_splitA+0x10>
    17ba:	5f 3f       	cpi	r21, 0xFF	; 255
    17bc:	71 f0       	breq	.+28     	; 0x17da <__fp_splitA+0x1a>
    17be:	47 95       	ror	r20

000017c0 <__fp_splitA>:
    17c0:	88 0f       	add	r24, r24
    17c2:	97 fb       	bst	r25, 7
    17c4:	99 1f       	adc	r25, r25
    17c6:	61 f0       	breq	.+24     	; 0x17e0 <__fp_splitA+0x20>
    17c8:	9f 3f       	cpi	r25, 0xFF	; 255
    17ca:	79 f0       	breq	.+30     	; 0x17ea <__fp_splitA+0x2a>
    17cc:	87 95       	ror	r24
    17ce:	08 95       	ret
    17d0:	12 16       	cp	r1, r18
    17d2:	13 06       	cpc	r1, r19
    17d4:	14 06       	cpc	r1, r20
    17d6:	55 1f       	adc	r21, r21
    17d8:	f2 cf       	rjmp	.-28     	; 0x17be <__fp_split3+0xe>
    17da:	46 95       	lsr	r20
    17dc:	f1 df       	rcall	.-30     	; 0x17c0 <__fp_splitA>
    17de:	08 c0       	rjmp	.+16     	; 0x17f0 <__fp_splitA+0x30>
    17e0:	16 16       	cp	r1, r22
    17e2:	17 06       	cpc	r1, r23
    17e4:	18 06       	cpc	r1, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	f1 cf       	rjmp	.-30     	; 0x17cc <__fp_splitA+0xc>
    17ea:	86 95       	lsr	r24
    17ec:	71 05       	cpc	r23, r1
    17ee:	61 05       	cpc	r22, r1
    17f0:	08 94       	sec
    17f2:	08 95       	ret

000017f4 <__fp_zero>:
    17f4:	e8 94       	clt

000017f6 <__fp_szero>:
    17f6:	bb 27       	eor	r27, r27
    17f8:	66 27       	eor	r22, r22
    17fa:	77 27       	eor	r23, r23
    17fc:	cb 01       	movw	r24, r22
    17fe:	97 f9       	bld	r25, 7
    1800:	08 95       	ret

00001802 <__mulsf3>:
    1802:	0e 94 14 0c 	call	0x1828	; 0x1828 <__mulsf3x>
    1806:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_round>
    180a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fp_pscA>
    180e:	38 f0       	brcs	.+14     	; 0x181e <__mulsf3+0x1c>
    1810:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__fp_pscB>
    1814:	20 f0       	brcs	.+8      	; 0x181e <__mulsf3+0x1c>
    1816:	95 23       	and	r25, r21
    1818:	11 f0       	breq	.+4      	; 0x181e <__mulsf3+0x1c>
    181a:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_inf>
    181e:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__fp_nan>
    1822:	11 24       	eor	r1, r1
    1824:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_szero>

00001828 <__mulsf3x>:
    1828:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_split3>
    182c:	70 f3       	brcs	.-36     	; 0x180a <__mulsf3+0x8>

0000182e <__mulsf3_pse>:
    182e:	95 9f       	mul	r25, r21
    1830:	c1 f3       	breq	.-16     	; 0x1822 <__mulsf3+0x20>
    1832:	95 0f       	add	r25, r21
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	55 1f       	adc	r21, r21
    1838:	62 9f       	mul	r22, r18
    183a:	f0 01       	movw	r30, r0
    183c:	72 9f       	mul	r23, r18
    183e:	bb 27       	eor	r27, r27
    1840:	f0 0d       	add	r31, r0
    1842:	b1 1d       	adc	r27, r1
    1844:	63 9f       	mul	r22, r19
    1846:	aa 27       	eor	r26, r26
    1848:	f0 0d       	add	r31, r0
    184a:	b1 1d       	adc	r27, r1
    184c:	aa 1f       	adc	r26, r26
    184e:	64 9f       	mul	r22, r20
    1850:	66 27       	eor	r22, r22
    1852:	b0 0d       	add	r27, r0
    1854:	a1 1d       	adc	r26, r1
    1856:	66 1f       	adc	r22, r22
    1858:	82 9f       	mul	r24, r18
    185a:	22 27       	eor	r18, r18
    185c:	b0 0d       	add	r27, r0
    185e:	a1 1d       	adc	r26, r1
    1860:	62 1f       	adc	r22, r18
    1862:	73 9f       	mul	r23, r19
    1864:	b0 0d       	add	r27, r0
    1866:	a1 1d       	adc	r26, r1
    1868:	62 1f       	adc	r22, r18
    186a:	83 9f       	mul	r24, r19
    186c:	a0 0d       	add	r26, r0
    186e:	61 1d       	adc	r22, r1
    1870:	22 1f       	adc	r18, r18
    1872:	74 9f       	mul	r23, r20
    1874:	33 27       	eor	r19, r19
    1876:	a0 0d       	add	r26, r0
    1878:	61 1d       	adc	r22, r1
    187a:	23 1f       	adc	r18, r19
    187c:	84 9f       	mul	r24, r20
    187e:	60 0d       	add	r22, r0
    1880:	21 1d       	adc	r18, r1
    1882:	82 2f       	mov	r24, r18
    1884:	76 2f       	mov	r23, r22
    1886:	6a 2f       	mov	r22, r26
    1888:	11 24       	eor	r1, r1
    188a:	9f 57       	subi	r25, 0x7F	; 127
    188c:	50 40       	sbci	r21, 0x00	; 0
    188e:	9a f0       	brmi	.+38     	; 0x18b6 <__mulsf3_pse+0x88>
    1890:	f1 f0       	breq	.+60     	; 0x18ce <__mulsf3_pse+0xa0>
    1892:	88 23       	and	r24, r24
    1894:	4a f0       	brmi	.+18     	; 0x18a8 <__mulsf3_pse+0x7a>
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	bb 1f       	adc	r27, r27
    189c:	66 1f       	adc	r22, r22
    189e:	77 1f       	adc	r23, r23
    18a0:	88 1f       	adc	r24, r24
    18a2:	91 50       	subi	r25, 0x01	; 1
    18a4:	50 40       	sbci	r21, 0x00	; 0
    18a6:	a9 f7       	brne	.-22     	; 0x1892 <__mulsf3_pse+0x64>
    18a8:	9e 3f       	cpi	r25, 0xFE	; 254
    18aa:	51 05       	cpc	r21, r1
    18ac:	80 f0       	brcs	.+32     	; 0x18ce <__mulsf3_pse+0xa0>
    18ae:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__fp_inf>
    18b2:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__fp_szero>
    18b6:	5f 3f       	cpi	r21, 0xFF	; 255
    18b8:	e4 f3       	brlt	.-8      	; 0x18b2 <__mulsf3_pse+0x84>
    18ba:	98 3e       	cpi	r25, 0xE8	; 232
    18bc:	d4 f3       	brlt	.-12     	; 0x18b2 <__mulsf3_pse+0x84>
    18be:	86 95       	lsr	r24
    18c0:	77 95       	ror	r23
    18c2:	67 95       	ror	r22
    18c4:	b7 95       	ror	r27
    18c6:	f7 95       	ror	r31
    18c8:	e7 95       	ror	r30
    18ca:	9f 5f       	subi	r25, 0xFF	; 255
    18cc:	c1 f7       	brne	.-16     	; 0x18be <__mulsf3_pse+0x90>
    18ce:	fe 2b       	or	r31, r30
    18d0:	88 0f       	add	r24, r24
    18d2:	91 1d       	adc	r25, r1
    18d4:	96 95       	lsr	r25
    18d6:	87 95       	ror	r24
    18d8:	97 f9       	bld	r25, 7
    18da:	08 95       	ret

000018dc <__udivmodsi4>:
    18dc:	a1 e2       	ldi	r26, 0x21	; 33
    18de:	1a 2e       	mov	r1, r26
    18e0:	aa 1b       	sub	r26, r26
    18e2:	bb 1b       	sub	r27, r27
    18e4:	fd 01       	movw	r30, r26
    18e6:	0d c0       	rjmp	.+26     	; 0x1902 <__udivmodsi4_ep>

000018e8 <__udivmodsi4_loop>:
    18e8:	aa 1f       	adc	r26, r26
    18ea:	bb 1f       	adc	r27, r27
    18ec:	ee 1f       	adc	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	a2 17       	cp	r26, r18
    18f2:	b3 07       	cpc	r27, r19
    18f4:	e4 07       	cpc	r30, r20
    18f6:	f5 07       	cpc	r31, r21
    18f8:	20 f0       	brcs	.+8      	; 0x1902 <__udivmodsi4_ep>
    18fa:	a2 1b       	sub	r26, r18
    18fc:	b3 0b       	sbc	r27, r19
    18fe:	e4 0b       	sbc	r30, r20
    1900:	f5 0b       	sbc	r31, r21

00001902 <__udivmodsi4_ep>:
    1902:	66 1f       	adc	r22, r22
    1904:	77 1f       	adc	r23, r23
    1906:	88 1f       	adc	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	1a 94       	dec	r1
    190c:	69 f7       	brne	.-38     	; 0x18e8 <__udivmodsi4_loop>
    190e:	60 95       	com	r22
    1910:	70 95       	com	r23
    1912:	80 95       	com	r24
    1914:	90 95       	com	r25
    1916:	9b 01       	movw	r18, r22
    1918:	ac 01       	movw	r20, r24
    191a:	bd 01       	movw	r22, r26
    191c:	cf 01       	movw	r24, r30
    191e:	08 95       	ret

00001920 <__divmodsi4>:
    1920:	05 2e       	mov	r0, r21
    1922:	97 fb       	bst	r25, 7
    1924:	1e f4       	brtc	.+6      	; 0x192c <__divmodsi4+0xc>
    1926:	00 94       	com	r0
    1928:	0e 94 a7 0c 	call	0x194e	; 0x194e <__negsi2>
    192c:	57 fd       	sbrc	r21, 7
    192e:	07 d0       	rcall	.+14     	; 0x193e <__divmodsi4_neg2>
    1930:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__udivmodsi4>
    1934:	07 fc       	sbrc	r0, 7
    1936:	03 d0       	rcall	.+6      	; 0x193e <__divmodsi4_neg2>
    1938:	4e f4       	brtc	.+18     	; 0x194c <__divmodsi4_exit>
    193a:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__negsi2>

0000193e <__divmodsi4_neg2>:
    193e:	50 95       	com	r21
    1940:	40 95       	com	r20
    1942:	30 95       	com	r19
    1944:	21 95       	neg	r18
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	4f 4f       	sbci	r20, 0xFF	; 255
    194a:	5f 4f       	sbci	r21, 0xFF	; 255

0000194c <__divmodsi4_exit>:
    194c:	08 95       	ret

0000194e <__negsi2>:
    194e:	90 95       	com	r25
    1950:	80 95       	com	r24
    1952:	70 95       	com	r23
    1954:	61 95       	neg	r22
    1956:	7f 4f       	sbci	r23, 0xFF	; 255
    1958:	8f 4f       	sbci	r24, 0xFF	; 255
    195a:	9f 4f       	sbci	r25, 0xFF	; 255
    195c:	08 95       	ret

0000195e <__umulhisi3>:
    195e:	a2 9f       	mul	r26, r18
    1960:	b0 01       	movw	r22, r0
    1962:	b3 9f       	mul	r27, r19
    1964:	c0 01       	movw	r24, r0
    1966:	a3 9f       	mul	r26, r19
    1968:	70 0d       	add	r23, r0
    196a:	81 1d       	adc	r24, r1
    196c:	11 24       	eor	r1, r1
    196e:	91 1d       	adc	r25, r1
    1970:	b2 9f       	mul	r27, r18
    1972:	70 0d       	add	r23, r0
    1974:	81 1d       	adc	r24, r1
    1976:	11 24       	eor	r1, r1
    1978:	91 1d       	adc	r25, r1
    197a:	08 95       	ret

0000197c <_exit>:
    197c:	f8 94       	cli

0000197e <__stop_program>:
    197e:	ff cf       	rjmp	.-2      	; 0x197e <__stop_program>
