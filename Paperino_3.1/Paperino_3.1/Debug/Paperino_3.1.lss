
Paperino_3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00002832  000028c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002832  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  0080012a  0080012a  000028f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000358a  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f4  00000000  00000000  0000626a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d7e  00000000  00000000  0000775e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b34  00000000  00000000  000094dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fbc  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000224b  00000000  00000000  0000afcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000d217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__vector_9>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__vector_20>
      54:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__vector_21>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__vector_25>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__vector_31>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__vector_35>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 00       	.word	0x003f	; ????

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	da e0       	ldi	r29, 0x0A	; 10
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e2 e3       	ldi	r30, 0x32	; 50
      ee:	f8 e2       	ldi	r31, 0x28	; 40
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	aa 32       	cpi	r26, 0x2A	; 42
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	aa e2       	ldi	r26, 0x2A	; 42
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	ac 3a       	cpi	r26, 0xAC	; 172
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 c5 08 	call	0x118a	; 0x118a <main>
     110:	0c 94 17 14 	jmp	0x282e	; 0x282e <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <selected_value>:
#include "IMU.h"
#include "USART.h"
#include "Timer.h"

void selected_value(uint8_t choise){
	switch(choise){
     118:	8b 36       	cpi	r24, 0x6B	; 107
     11a:	09 f4       	brne	.+2      	; 0x11e <selected_value+0x6>
     11c:	df c0       	rjmp	.+446    	; 0x2dc <selected_value+0x1c4>
     11e:	40 f5       	brcc	.+80     	; 0x170 <selected_value+0x58>
     120:	85 36       	cpi	r24, 0x65	; 101
     122:	09 f4       	brne	.+2      	; 0x126 <selected_value+0xe>
     124:	91 c0       	rjmp	.+290    	; 0x248 <selected_value+0x130>
     126:	90 f4       	brcc	.+36     	; 0x14c <selected_value+0x34>
     128:	82 36       	cpi	r24, 0x62	; 98
     12a:	09 f4       	brne	.+2      	; 0x12e <selected_value+0x16>
     12c:	5a c0       	rjmp	.+180    	; 0x1e2 <selected_value+0xca>
     12e:	38 f4       	brcc	.+14     	; 0x13e <selected_value+0x26>
     130:	88 23       	and	r24, r24
     132:	09 f4       	brne	.+2      	; 0x136 <selected_value+0x1e>
     134:	1d c1       	rjmp	.+570    	; 0x370 <selected_value+0x258>
     136:	81 36       	cpi	r24, 0x61	; 97
     138:	09 f4       	brne	.+2      	; 0x13c <selected_value+0x24>
     13a:	42 c0       	rjmp	.+132    	; 0x1c0 <selected_value+0xa8>
     13c:	1d c1       	rjmp	.+570    	; 0x378 <selected_value+0x260>
     13e:	83 36       	cpi	r24, 0x63	; 99
     140:	09 f4       	brne	.+2      	; 0x144 <selected_value+0x2c>
     142:	60 c0       	rjmp	.+192    	; 0x204 <selected_value+0xec>
     144:	84 36       	cpi	r24, 0x64	; 100
     146:	09 f4       	brne	.+2      	; 0x14a <selected_value+0x32>
     148:	6e c0       	rjmp	.+220    	; 0x226 <selected_value+0x10e>
     14a:	16 c1       	rjmp	.+556    	; 0x378 <selected_value+0x260>
     14c:	88 36       	cpi	r24, 0x68	; 104
     14e:	09 f4       	brne	.+2      	; 0x152 <selected_value+0x3a>
     150:	a3 c0       	rjmp	.+326    	; 0x298 <selected_value+0x180>
     152:	38 f4       	brcc	.+14     	; 0x162 <selected_value+0x4a>
     154:	86 36       	cpi	r24, 0x66	; 102
     156:	09 f4       	brne	.+2      	; 0x15a <selected_value+0x42>
     158:	88 c0       	rjmp	.+272    	; 0x26a <selected_value+0x152>
     15a:	87 36       	cpi	r24, 0x67	; 103
     15c:	09 f4       	brne	.+2      	; 0x160 <selected_value+0x48>
     15e:	96 c0       	rjmp	.+300    	; 0x28c <selected_value+0x174>
     160:	0b c1       	rjmp	.+534    	; 0x378 <selected_value+0x260>
     162:	89 36       	cpi	r24, 0x69	; 105
     164:	09 f4       	brne	.+2      	; 0x168 <selected_value+0x50>
     166:	9e c0       	rjmp	.+316    	; 0x2a4 <selected_value+0x18c>
     168:	8a 36       	cpi	r24, 0x6A	; 106
     16a:	09 f4       	brne	.+2      	; 0x16e <selected_value+0x56>
     16c:	a9 c0       	rjmp	.+338    	; 0x2c0 <selected_value+0x1a8>
     16e:	04 c1       	rjmp	.+520    	; 0x378 <selected_value+0x260>
     170:	81 37       	cpi	r24, 0x71	; 113
     172:	09 f4       	brne	.+2      	; 0x176 <selected_value+0x5e>
     174:	e5 c0       	rjmp	.+458    	; 0x340 <selected_value+0x228>
     176:	90 f4       	brcc	.+36     	; 0x19c <selected_value+0x84>
     178:	8e 36       	cpi	r24, 0x6E	; 110
     17a:	09 f4       	brne	.+2      	; 0x17e <selected_value+0x66>
     17c:	d0 c0       	rjmp	.+416    	; 0x31e <selected_value+0x206>
     17e:	38 f4       	brcc	.+14     	; 0x18e <selected_value+0x76>
     180:	8c 36       	cpi	r24, 0x6C	; 108
     182:	09 f4       	brne	.+2      	; 0x186 <selected_value+0x6e>
     184:	b9 c0       	rjmp	.+370    	; 0x2f8 <selected_value+0x1e0>
     186:	8d 36       	cpi	r24, 0x6D	; 109
     188:	09 f4       	brne	.+2      	; 0x18c <selected_value+0x74>
     18a:	c4 c0       	rjmp	.+392    	; 0x314 <selected_value+0x1fc>
     18c:	f5 c0       	rjmp	.+490    	; 0x378 <selected_value+0x260>
     18e:	8f 36       	cpi	r24, 0x6F	; 111
     190:	09 f4       	brne	.+2      	; 0x194 <selected_value+0x7c>
     192:	ca c0       	rjmp	.+404    	; 0x328 <selected_value+0x210>
     194:	80 37       	cpi	r24, 0x70	; 112
     196:	09 f4       	brne	.+2      	; 0x19a <selected_value+0x82>
     198:	ce c0       	rjmp	.+412    	; 0x336 <selected_value+0x21e>
     19a:	ee c0       	rjmp	.+476    	; 0x378 <selected_value+0x260>
     19c:	84 37       	cpi	r24, 0x74	; 116
     19e:	09 f4       	brne	.+2      	; 0x1a2 <selected_value+0x8a>
     1a0:	de c0       	rjmp	.+444    	; 0x35e <selected_value+0x246>
     1a2:	38 f4       	brcc	.+14     	; 0x1b2 <selected_value+0x9a>
     1a4:	82 37       	cpi	r24, 0x72	; 114
     1a6:	09 f4       	brne	.+2      	; 0x1aa <selected_value+0x92>
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <selected_value+0x232>
     1aa:	83 37       	cpi	r24, 0x73	; 115
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <selected_value+0x98>
     1ae:	d2 c0       	rjmp	.+420    	; 0x354 <selected_value+0x23c>
     1b0:	e3 c0       	rjmp	.+454    	; 0x378 <selected_value+0x260>
     1b2:	85 37       	cpi	r24, 0x75	; 117
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <selected_value+0xa0>
     1b6:	e3 c0       	rjmp	.+454    	; 0x37e <selected_value+0x266>
     1b8:	8f 3f       	cpi	r24, 0xFF	; 255
     1ba:	09 f4       	brne	.+2      	; 0x1be <selected_value+0xa6>
     1bc:	d5 c0       	rjmp	.+426    	; 0x368 <selected_value+0x250>
     1be:	dc c0       	rjmp	.+440    	; 0x378 <selected_value+0x260>
		case ACCX:
		computed_acceleration(0);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 48 05 	call	0xa90	; 0xa90 <computed_acceleration>
		USART_Transmit(accx);
     1c6:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <accx>
     1ca:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <accx+0x1>
     1ce:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <accx+0x2>
     1d2:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <accx+0x3>
     1d6:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     1da:	86 2f       	mov	r24, r22
     1dc:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     1e0:	08 95       	ret
		case ACCY:
		computed_acceleration(0);
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 48 05 	call	0xa90	; 0xa90 <computed_acceleration>
		USART_Transmit(accy);
     1e8:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <accy>
     1ec:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <accy+0x1>
     1f0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <accy+0x2>
     1f4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <accy+0x3>
     1f8:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     1fc:	86 2f       	mov	r24, r22
     1fe:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     202:	08 95       	ret
		case ACCZ:
		computed_acceleration(0);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 48 05 	call	0xa90	; 0xa90 <computed_acceleration>
		USART_Transmit(accz);
     20a:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <accz>
     20e:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <accz+0x1>
     212:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <accz+0x2>
     216:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <accz+0x3>
     21a:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     21e:	86 2f       	mov	r24, r22
     220:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     224:	08 95       	ret
		case GYROX:
		computed_gyroscope(0);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 d2 05 	call	0xba4	; 0xba4 <computed_gyroscope>
		USART_Transmit(gyrox);
     22c:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <gyrox>
     230:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <gyrox+0x1>
     234:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <gyrox+0x2>
     238:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <gyrox+0x3>
     23c:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     240:	86 2f       	mov	r24, r22
     242:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     246:	08 95       	ret
		case GYROY:
		computed_gyroscope(0);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 d2 05 	call	0xba4	; 0xba4 <computed_gyroscope>
		USART_Transmit(gyroy);
     24e:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <gyroy>
     252:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <gyroy+0x1>
     256:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <gyroy+0x2>
     25a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <gyroy+0x3>
     25e:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     262:	86 2f       	mov	r24, r22
     264:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     268:	08 95       	ret
		case GYROZ:
		computed_gyroscope(0);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 d2 05 	call	0xba4	; 0xba4 <computed_gyroscope>
		USART_Transmit(gyroz);
     270:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <gyroz>
     274:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <gyroz+0x1>
     278:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <gyroz+0x2>
     27c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <gyroz+0x3>
     280:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     284:	86 2f       	mov	r24, r22
     286:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     28a:	08 95       	ret
		case TEMP:
		USART_Transmit(temperature(0));
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 22 05 	call	0xa44	; 0xa44 <temperature>
     292:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     296:	08 95       	ret
		case WHOIAM:
		USART_Transmit(IMU_who_i_am(0));
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 10 05 	call	0xa20	; 0xa20 <IMU_who_i_am>
     29e:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     2a2:	08 95       	ret
		case ANGLEACCX:
		USART_Transmit(Angle_X_Acc);
     2a4:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <Angle_X_Acc>
     2a8:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <Angle_X_Acc+0x1>
     2ac:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <Angle_X_Acc+0x2>
     2b0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <Angle_X_Acc+0x3>
     2b4:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     2b8:	86 2f       	mov	r24, r22
     2ba:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     2be:	08 95       	ret
		case ANGLEACCY:
		USART_Transmit(Angle_Y_Acc);
     2c0:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <Angle_Y_Acc>
     2c4:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <Angle_Y_Acc+0x1>
     2c8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Angle_Y_Acc+0x2>
     2cc:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Angle_Y_Acc+0x3>
     2d0:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     2d4:	86 2f       	mov	r24, r22
     2d6:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     2da:	08 95       	ret
		case ANGLEGYROX:
		USART_Transmit(Angle_X_Gyro);
     2dc:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Angle_X_Gyro>
     2e0:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <Angle_X_Gyro+0x1>
     2e4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Angle_X_Gyro+0x2>
     2e8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <Angle_X_Gyro+0x3>
     2ec:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     2f0:	86 2f       	mov	r24, r22
     2f2:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     2f6:	08 95       	ret
		case ANGLEGYROY:
		USART_Transmit(Angle_Y_Gyro);
     2f8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Angle_Y_Gyro>
     2fc:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <Angle_Y_Gyro+0x1>
     300:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Angle_Y_Gyro+0x2>
     304:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Angle_Y_Gyro+0x3>
     308:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     30c:	86 2f       	mov	r24, r22
     30e:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     312:	08 95       	ret
		case ANGLEX:
		USART_Transmit(AngleX);
     314:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <AngleX>
     318:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     31c:	08 95       	ret
		case ANGLEY:
		USART_Transmit(AngleY);
     31e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <AngleY>
     322:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     326:	08 95       	ret
		case TIME:
		USART_Transmit((uint8_t)system_tick_MG);
     328:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <system_tick_MG>
     32c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
     330:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     334:	08 95       	ret
		case THROTTLE:
		USART_Transmit(throttle);
     336:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <throttle>
     33a:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     33e:	08 95       	ret
		case PITCH:
		USART_Transmit(pitch);
     340:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <pitch>
     344:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     348:	08 95       	ret
		case ROLL:
		USART_Transmit(roll);
     34a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <roll>
     34e:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     352:	08 95       	ret
		case YAW:
		USART_Transmit(yaw);
     354:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <yaw>
     358:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     35c:	08 95       	ret
		case AUX1:
		USART_Transmit(aux1);
     35e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <aux1>
     362:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     366:	08 95       	ret
		case AUX2:
		break;
		case 255:
		USART_Transmit('p');
     368:	80 e7       	ldi	r24, 0x70	; 112
     36a:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     36e:	08 95       	ret
		case 0:
		USART_Transmit('q');
     370:	81 e7       	ldi	r24, 0x71	; 113
     372:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		break;
     376:	08 95       	ret
		default:
		USART_Transmit('e');
     378:	85 e6       	ldi	r24, 0x65	; 101
     37a:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     37e:	08 95       	ret

00000380 <TWI_init>:
		
	}
	
	TWI_stop();
	return 0;
}
     380:	8c e0       	ldi	r24, 0x0C	; 12
     382:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     386:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     38a:	08 95       	ret

0000038c <TWI_start>:
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	84 ea       	ldi	r24, 0xA4	; 164
     392:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     396:	ec eb       	ldi	r30, 0xBC	; 188
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	88 23       	and	r24, r24
     39e:	ec f7       	brge	.-6      	; 0x39a <TWI_start+0xe>
     3a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3a4:	88 7f       	andi	r24, 0xF8	; 248
     3a6:	88 30       	cpi	r24, 0x08	; 8
     3a8:	e1 f0       	breq	.+56     	; 0x3e2 <TWI_start+0x56>
     3aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3ae:	88 7f       	andi	r24, 0xF8	; 248
     3b0:	80 31       	cpi	r24, 0x10	; 16
     3b2:	c9 f0       	breq	.+50     	; 0x3e6 <TWI_start+0x5a>
     3b4:	68 e0       	ldi	r22, 0x08	; 8
     3b6:	87 e1       	ldi	r24, 0x17	; 23
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     3be:	67 e0       	ldi	r22, 0x07	; 7
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     3c8:	c9 eb       	ldi	r28, 0xB9	; 185
     3ca:	d0 e0       	ldi	r29, 0x00	; 0
     3cc:	88 81       	ld	r24, Y
     3ce:	88 7f       	andi	r24, 0xF8	; 248
     3d0:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     3d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3d8:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     3dc:	88 81       	ld	r24, Y
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <TWI_start+0x5c>
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <TWI_start+0x5c>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <TWI_address>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	80 6d       	ori	r24, 0xD0	; 208
     3f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3f8:	84 e8       	ldi	r24, 0x84	; 132
     3fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3fe:	ec eb       	ldi	r30, 0xBC	; 188
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	88 23       	and	r24, r24
     406:	ec f7       	brge	.-6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     408:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     40c:	88 7f       	andi	r24, 0xF8	; 248
     40e:	80 34       	cpi	r24, 0x40	; 64
     410:	e1 f0       	breq	.+56     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     412:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     416:	88 7f       	andi	r24, 0xF8	; 248
     418:	88 31       	cpi	r24, 0x18	; 24
     41a:	c9 f0       	breq	.+50     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     41c:	68 e0       	ldi	r22, 0x08	; 8
     41e:	87 e1       	ldi	r24, 0x17	; 23
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     426:	66 e0       	ldi	r22, 0x06	; 6
     428:	8a e0       	ldi	r24, 0x0A	; 10
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     430:	c9 eb       	ldi	r28, 0xB9	; 185
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	88 81       	ld	r24, Y
     436:	88 7f       	andi	r24, 0xF8	; 248
     438:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     43c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     440:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     444:	88 81       	ld	r24, Y
     446:	88 7f       	andi	r24, 0xF8	; 248
     448:	03 c0       	rjmp	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	01 c0       	rjmp	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <TWI_send>:
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     45e:	84 e8       	ldi	r24, 0x84	; 132
     460:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     464:	ec eb       	ldi	r30, 0xBC	; 188
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	88 23       	and	r24, r24
     46c:	ec f7       	brge	.-6      	; 0x468 <TWI_send+0x12>
     46e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	88 32       	cpi	r24, 0x28	; 40
     476:	b9 f0       	breq	.+46     	; 0x4a6 <TWI_send+0x50>
     478:	68 e0       	ldi	r22, 0x08	; 8
     47a:	87 e1       	ldi	r24, 0x17	; 23
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     482:	66 e0       	ldi	r22, 0x06	; 6
     484:	8a e0       	ldi	r24, 0x0A	; 10
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     48c:	c9 eb       	ldi	r28, 0xB9	; 185
     48e:	d0 e0       	ldi	r29, 0x00	; 0
     490:	88 81       	ld	r24, Y
     492:	88 7f       	andi	r24, 0xF8	; 248
     494:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     498:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     49c:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     4a0:	88 81       	ld	r24, Y
     4a2:	88 7f       	andi	r24, 0xF8	; 248
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <TWI_send+0x52>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <TWI_receive_ack>:
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	84 ec       	ldi	r24, 0xC4	; 196
     4b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4b8:	ec eb       	ldi	r30, 0xBC	; 188
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	88 23       	and	r24, r24
     4c0:	ec f7       	brge	.-6      	; 0x4bc <TWI_receive_ack+0xe>
     4c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4c6:	88 7f       	andi	r24, 0xF8	; 248
     4c8:	80 35       	cpi	r24, 0x50	; 80
     4ca:	19 f4       	brne	.+6      	; 0x4d2 <TWI_receive_ack+0x24>
     4cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     4d0:	16 c0       	rjmp	.+44     	; 0x4fe <TWI_receive_ack+0x50>
     4d2:	68 e0       	ldi	r22, 0x08	; 8
     4d4:	87 e1       	ldi	r24, 0x17	; 23
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     4dc:	69 e0       	ldi	r22, 0x09	; 9
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     4e6:	c9 eb       	ldi	r28, 0xB9	; 185
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
     4ea:	88 81       	ld	r24, Y
     4ec:	88 7f       	andi	r24, 0xF8	; 248
     4ee:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     4f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4f6:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     4fa:	88 81       	ld	r24, Y
     4fc:	88 7f       	andi	r24, 0xF8	; 248
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <TWI_receive_nack>:
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	84 e8       	ldi	r24, 0x84	; 132
     50a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     50e:	ec eb       	ldi	r30, 0xBC	; 188
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	88 23       	and	r24, r24
     516:	ec f7       	brge	.-6      	; 0x512 <TWI_receive_nack+0xe>
     518:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     51c:	88 7f       	andi	r24, 0xF8	; 248
     51e:	88 35       	cpi	r24, 0x58	; 88
     520:	19 f4       	brne	.+6      	; 0x528 <TWI_receive_nack+0x24>
     522:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     526:	16 c0       	rjmp	.+44     	; 0x554 <TWI_receive_nack+0x50>
     528:	68 e0       	ldi	r22, 0x08	; 8
     52a:	87 e1       	ldi	r24, 0x17	; 23
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     532:	69 e0       	ldi	r22, 0x09	; 9
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 aa 10 	call	0x2154	; 0x2154 <USART_String>
     53c:	c9 eb       	ldi	r28, 0xB9	; 185
     53e:	d0 e0       	ldi	r29, 0x00	; 0
     540:	88 81       	ld	r24, Y
     542:	88 7f       	andi	r24, 0xF8	; 248
     544:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     548:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     54c:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
     550:	88 81       	ld	r24, Y
     552:	88 7f       	andi	r24, 0xF8	; 248
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <TWI_stop>:
     55a:	84 e9       	ldi	r24, 0x94	; 148
     55c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     560:	08 95       	ret

00000562 <TWI_send_16bit>:
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	c8 2f       	mov	r28, r24
     568:	d6 2f       	mov	r29, r22
     56a:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     574:	88 23       	and	r24, r24
     576:	21 f0       	breq	.+8      	; 0x580 <TWI_send_16bit+0x1e>
     578:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     57c:	88 7f       	andi	r24, 0xF8	; 248
     57e:	15 c0       	rjmp	.+42     	; 0x5aa <TWI_send_16bit+0x48>
     580:	8c 2f       	mov	r24, r28
     582:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     586:	88 23       	and	r24, r24
     588:	21 f0       	breq	.+8      	; 0x592 <TWI_send_16bit+0x30>
     58a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     58e:	88 7f       	andi	r24, 0xF8	; 248
     590:	0c c0       	rjmp	.+24     	; 0x5aa <TWI_send_16bit+0x48>
     592:	8d 2f       	mov	r24, r29
     594:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     598:	88 23       	and	r24, r24
     59a:	21 f0       	breq	.+8      	; 0x5a4 <TWI_send_16bit+0x42>
     59c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a0:	88 7f       	andi	r24, 0xF8	; 248
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <TWI_send_16bit+0x48>
     5a4:	94 e9       	ldi	r25, 0x94	; 148
     5a6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <TWI_receive_8bit>:


uint8_t TWI_receive_8bit(uint8_t registro){
     5b0:	cf 93       	push	r28
     5b2:	c8 2f       	mov	r28, r24
	if (TWI_start()!= 0){ //masking for prescaler bits|
     5b4:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     5b8:	88 23       	and	r24, r24
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <TWI_receive_8bit+0x14>
		return TWSR & 0xF8;
     5bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5c0:	88 7f       	andi	r24, 0xF8	; 248
     5c2:	28 c0       	rjmp	.+80     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_address(0) != 0){
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     5ca:	88 23       	and	r24, r24
     5cc:	21 f0       	breq	.+8      	; 0x5d6 <TWI_receive_8bit+0x26>
		return TWSR & 0xF8;
     5ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5d2:	88 7f       	andi	r24, 0xF8	; 248
     5d4:	1f c0       	rjmp	.+62     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_send(registro) != 0){
     5d6:	8c 2f       	mov	r24, r28
     5d8:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     5dc:	88 23       	and	r24, r24
     5de:	21 f0       	breq	.+8      	; 0x5e8 <TWI_receive_8bit+0x38>
		return TWSR & 0xF8;
     5e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5e4:	88 7f       	andi	r24, 0xF8	; 248
     5e6:	16 c0       	rjmp	.+44     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	
	if (TWI_start()!= 0){
     5e8:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     5ec:	88 23       	and	r24, r24
     5ee:	21 f0       	breq	.+8      	; 0x5f8 <TWI_receive_8bit+0x48>
		return TWSR & 0xF8;
     5f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5f4:	88 7f       	andi	r24, 0xF8	; 248
     5f6:	0e c0       	rjmp	.+28     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_address(1) != 0){
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     5fe:	88 23       	and	r24, r24
     600:	21 f0       	breq	.+8      	; 0x60a <TWI_receive_8bit+0x5a>
		return TWSR & 0xF8;
     602:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     606:	88 7f       	andi	r24, 0xF8	; 248
     608:	05 c0       	rjmp	.+10     	; 0x614 <TWI_receive_8bit+0x64>
	}

	uint8_t data = 0;
	data = TWI_receive_nack();
     60a:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
		return TWSR & 0xF8;
	}
}

void TWI_stop(){
	TWCR =	(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     60e:	94 e9       	ldi	r25, 0x94	; 148
     610:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	uint8_t data = 0;
	data = TWI_receive_nack();
	TWI_stop();
	return data;
}
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <TWI_receive_16bit>:

uint16_t TWI_receive_16bit(uint8_t registro){
     618:	cf 93       	push	r28
     61a:	c8 2f       	mov	r28, r24
	if (TWI_start()!= 0){
     61c:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     620:	88 23       	and	r24, r24
     622:	29 f0       	breq	.+10     	; 0x62e <TWI_receive_16bit+0x16>
		return TWSR & 0xF8;
     624:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     628:	88 7f       	andi	r24, 0xF8	; 248
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	2f c0       	rjmp	.+94     	; 0x68c <TWI_receive_16bit+0x74>
	}
	
	if (TWI_address(0) != 0){
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     634:	88 23       	and	r24, r24
     636:	29 f0       	breq	.+10     	; 0x642 <TWI_receive_16bit+0x2a>
		return TWSR & 0xF8;
     638:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     63c:	88 7f       	andi	r24, 0xF8	; 248
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	25 c0       	rjmp	.+74     	; 0x68c <TWI_receive_16bit+0x74>
	}

	if (TWI_send(registro) != 0){
     642:	8c 2f       	mov	r24, r28
     644:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     648:	88 23       	and	r24, r24
     64a:	29 f0       	breq	.+10     	; 0x656 <TWI_receive_16bit+0x3e>
		return TWSR & 0xF8;
     64c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     650:	88 7f       	andi	r24, 0xF8	; 248
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	1b c0       	rjmp	.+54     	; 0x68c <TWI_receive_16bit+0x74>
	}

	if (TWI_start()!= 0){
     656:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     65a:	88 23       	and	r24, r24
     65c:	29 f0       	breq	.+10     	; 0x668 <TWI_receive_16bit+0x50>
		return TWSR & 0xF8;
     65e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     662:	88 7f       	andi	r24, 0xF8	; 248
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	12 c0       	rjmp	.+36     	; 0x68c <TWI_receive_16bit+0x74>
	}
	
	if (TWI_address(1) != 0){
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     66e:	88 23       	and	r24, r24
     670:	29 f0       	breq	.+10     	; 0x67c <TWI_receive_16bit+0x64>
		return TWSR & 0xF8;
     672:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     676:	88 7f       	andi	r24, 0xF8	; 248
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	08 c0       	rjmp	.+16     	; 0x68c <TWI_receive_16bit+0x74>
	}


	uint16_t data = 0;
	data = TWI_receive_ack()<<8;
     67c:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
	data = TWI_receive_nack();
     680:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
		return TWSR & 0xF8;
	}
}

void TWI_stop(){
	TWCR =	(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     684:	94 e9       	ldi	r25, 0x94	; 148
     686:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	uint16_t data = 0;
	data = TWI_receive_ack()<<8;
	data = TWI_receive_nack();
	TWI_stop();
	return data;
     68a:	90 e0       	ldi	r25, 0x00	; 0
}
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <read_acceleration>:
	
	return register_value;
}


int8_t read_acceleration(uint8_t calibrate_acc){
     690:	cf 93       	push	r28
     692:	c8 2f       	mov	r28, r24
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     694:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     698:	81 11       	cpse	r24, r1
     69a:	95 c0       	rjmp	.+298    	; 0x7c6 <read_acceleration+0x136>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     69c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     6a0:	81 11       	cpse	r24, r1
     6a2:	93 c0       	rjmp	.+294    	; 0x7ca <read_acceleration+0x13a>
		return -1;
	}

	if (TWI_send(0x3B) != 0){
     6a4:	8b e3       	ldi	r24, 0x3B	; 59
     6a6:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     6aa:	81 11       	cpse	r24, r1
     6ac:	90 c0       	rjmp	.+288    	; 0x7ce <read_acceleration+0x13e>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     6ae:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     6b2:	81 11       	cpse	r24, r1
     6b4:	8e c0       	rjmp	.+284    	; 0x7d2 <read_acceleration+0x142>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     6bc:	81 11       	cpse	r24, r1
     6be:	8b c0       	rjmp	.+278    	; 0x7d6 <read_acceleration+0x146>
	acceleration.acceleration_y = TWI_receive_ack() << 8;
	acceleration.acceleration_y = acceleration.acceleration_y | TWI_receive_ack();
	acceleration.acceleration_z = TWI_receive_ack() << 8;
	acceleration.acceleration_z = acceleration.acceleration_z | TWI_receive_nack();*/

	acceleration_x = TWI_receive_ack() << 8;
     6c0:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	98 2f       	mov	r25, r24
     6c8:	88 27       	eor	r24, r24
     6ca:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <acceleration_x+0x1>
     6ce:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <acceleration_x>
	acceleration_x = acceleration_x | TWI_receive_ack();
     6d2:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     6d6:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <acceleration_x>
     6da:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <acceleration_x+0x1>
     6de:	28 2b       	or	r18, r24
     6e0:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <acceleration_x+0x1>
     6e4:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <acceleration_x>
	acceleration_y = TWI_receive_ack() << 8;
     6e8:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	98 2f       	mov	r25, r24
     6f0:	88 27       	eor	r24, r24
     6f2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <acceleration_y+0x1>
     6f6:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <acceleration_y>
	acceleration_y = acceleration_y | TWI_receive_ack();
     6fa:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     6fe:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <acceleration_y>
     702:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <acceleration_y+0x1>
     706:	28 2b       	or	r18, r24
     708:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <acceleration_y+0x1>
     70c:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <acceleration_y>
	acceleration_z = TWI_receive_ack() << 8;
     710:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	98 2f       	mov	r25, r24
     718:	88 27       	eor	r24, r24
     71a:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <acceleration_z+0x1>
     71e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <acceleration_z>
	acceleration_z = acceleration_z | TWI_receive_nack();
     722:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
     726:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <acceleration_z>
     72a:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <acceleration_z+0x1>
     72e:	28 2b       	or	r18, r24
     730:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <acceleration_z+0x1>
     734:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <acceleration_z>
	TWI_stop();
     738:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_stop>
	
	if (calibrate_acc == 1)
     73c:	c1 30       	cpi	r28, 0x01	; 1
     73e:	09 f0       	breq	.+2      	; 0x742 <read_acceleration+0xb2>
     740:	4c c0       	rjmp	.+152    	; 0x7da <read_acceleration+0x14a>
	{

		acceleration_x = acceleration_x - x_offset_acc;
     742:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <acceleration_x>
     746:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <acceleration_x+0x1>
     74a:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <x_offset_acc>
     74e:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <x_offset_acc+0x1>
     752:	82 1b       	sub	r24, r18
     754:	93 0b       	sbc	r25, r19
     756:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <acceleration_x+0x1>
     75a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <acceleration_x>
		
		acceleration_y = acceleration_y - y_offset_acc;
     75e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <acceleration_y>
     762:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <acceleration_y+0x1>
     766:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <y_offset_acc>
     76a:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <y_offset_acc+0x1>
     76e:	82 1b       	sub	r24, r18
     770:	93 0b       	sbc	r25, r19
     772:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <acceleration_y+0x1>
     776:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <acceleration_y>

		
		if (acceleration_z > z_offset_acc)
     77a:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <acceleration_z>
     77e:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <acceleration_z+0x1>
     782:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     786:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     78a:	82 17       	cp	r24, r18
     78c:	93 07       	cpc	r25, r19
     78e:	6c f4       	brge	.+26     	; 0x7aa <read_acceleration+0x11a>
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
     790:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <acceleration_z>
     794:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <acceleration_z+0x1>
     798:	30 52       	subi	r19, 0x20	; 32
     79a:	82 0f       	add	r24, r18
     79c:	93 1f       	adc	r25, r19
     79e:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <acceleration_z+0x1>
     7a2:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <acceleration_z>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	19 c0       	rjmp	.+50     	; 0x7dc <read_acceleration+0x14c>
		
		if (acceleration_z > z_offset_acc)
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
			}else{
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
     7aa:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <acceleration_z>
     7ae:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <acceleration_z+0x1>
     7b2:	30 5e       	subi	r19, 0xE0	; 224
     7b4:	a9 01       	movw	r20, r18
     7b6:	48 1b       	sub	r20, r24
     7b8:	59 0b       	sbc	r21, r25
     7ba:	50 93 88 01 	sts	0x0188, r21	; 0x800188 <acceleration_z+0x1>
     7be:	40 93 87 01 	sts	0x0187, r20	; 0x800187 <acceleration_z>
		}
		
	}
	
	return 0;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0b c0       	rjmp	.+22     	; 0x7dc <read_acceleration+0x14c>


int8_t read_acceleration(uint8_t calibrate_acc){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	09 c0       	rjmp	.+18     	; 0x7dc <read_acceleration+0x14c>
	}
	
	if (TWI_address(0) != 0){
		return -1;
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	07 c0       	rjmp	.+14     	; 0x7dc <read_acceleration+0x14c>
	}

	if (TWI_send(0x3B) != 0){
		return -1;
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	05 c0       	rjmp	.+10     	; 0x7dc <read_acceleration+0x14c>
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	03 c0       	rjmp	.+6      	; 0x7dc <read_acceleration+0x14c>
	}
	
	if (TWI_address(1) != 0){
		return -1;
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <read_acceleration+0x14c>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     7da:	80 e0       	ldi	r24, 0x00	; 0
}
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <read_gyroscope>:

int8_t read_gyroscope(uint8_t calibrate_gyro){
     7e0:	cf 93       	push	r28
     7e2:	c8 2f       	mov	r28, r24
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     7e4:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     7e8:	81 11       	cpse	r24, r1
     7ea:	7e c0       	rjmp	.+252    	; 0x8e8 <read_gyroscope+0x108>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     7ec:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     7f0:	81 11       	cpse	r24, r1
     7f2:	7c c0       	rjmp	.+248    	; 0x8ec <read_gyroscope+0x10c>
		return -1;
	}

	if (TWI_send(0x43) != 0){
     7f4:	83 e4       	ldi	r24, 0x43	; 67
     7f6:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     7fa:	81 11       	cpse	r24, r1
     7fc:	79 c0       	rjmp	.+242    	; 0x8f0 <read_gyroscope+0x110>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     7fe:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     802:	81 11       	cpse	r24, r1
     804:	77 c0       	rjmp	.+238    	; 0x8f4 <read_gyroscope+0x114>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     80c:	81 11       	cpse	r24, r1
     80e:	74 c0       	rjmp	.+232    	; 0x8f8 <read_gyroscope+0x118>
	gyroscope.gyroscope_y = TWI_receive_ack() << 8;
	gyroscope.gyroscope_y = gyroscope.gyroscope_y | TWI_receive_ack();
	gyroscope.gyroscope_z = TWI_receive_ack() << 8;
	gyroscope.gyroscope_z = gyroscope.gyroscope_z | TWI_receive_nack();*/

	gyroscope_x = TWI_receive_ack() << 8;
     810:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	98 2f       	mov	r25, r24
     818:	88 27       	eor	r24, r24
     81a:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <gyroscope_x+0x1>
     81e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <gyroscope_x>
	gyroscope_x = gyroscope_x | TWI_receive_ack();
     822:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     826:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <gyroscope_x>
     82a:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <gyroscope_x+0x1>
     82e:	28 2b       	or	r18, r24
     830:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <gyroscope_x+0x1>
     834:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <gyroscope_x>
	gyroscope_y = TWI_receive_ack() << 8;
     838:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	98 2f       	mov	r25, r24
     840:	88 27       	eor	r24, r24
     842:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <gyroscope_y+0x1>
     846:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <gyroscope_y>
	gyroscope_y = gyroscope_y | TWI_receive_ack();
     84a:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     84e:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <gyroscope_y>
     852:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <gyroscope_y+0x1>
     856:	28 2b       	or	r18, r24
     858:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <gyroscope_y+0x1>
     85c:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <gyroscope_y>
	gyroscope_z = TWI_receive_ack() << 8;
     860:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	98 2f       	mov	r25, r24
     868:	88 27       	eor	r24, r24
     86a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <gyroscope_z+0x1>
     86e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <gyroscope_z>
	gyroscope_z = gyroscope_z | TWI_receive_nack();
     872:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
     876:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <gyroscope_z>
     87a:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <gyroscope_z+0x1>
     87e:	28 2b       	or	r18, r24
     880:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <gyroscope_z+0x1>
     884:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <gyroscope_z>
	
		if (calibrate_gyro == 1)
     888:	c1 30       	cpi	r28, 0x01	; 1
     88a:	51 f5       	brne	.+84     	; 0x8e0 <read_gyroscope+0x100>
		{
			gyroscope_x = gyroscope_x - x_offset_gyro;
     88c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gyroscope_x>
     890:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <gyroscope_x+0x1>
     894:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <x_offset_gyro>
     898:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <x_offset_gyro+0x1>
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <gyroscope_x+0x1>
     8a4:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <gyroscope_x>
			gyroscope_y = gyroscope_y - y_offset_gyro;
     8a8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <gyroscope_y>
     8ac:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <gyroscope_y+0x1>
     8b0:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <y_offset_gyro>
     8b4:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <y_offset_gyro+0x1>
     8b8:	82 1b       	sub	r24, r18
     8ba:	93 0b       	sbc	r25, r19
     8bc:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <gyroscope_y+0x1>
     8c0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <gyroscope_y>
			gyroscope_z = gyroscope_z - z_offset_gyro;	
     8c4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <gyroscope_z>
     8c8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <gyroscope_z+0x1>
     8cc:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <z_offset_gyro>
     8d0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <z_offset_gyro+0x1>
     8d4:	82 1b       	sub	r24, r18
     8d6:	93 0b       	sbc	r25, r19
     8d8:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <gyroscope_z+0x1>
     8dc:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <gyroscope_z>
		}

	
	TWI_stop();
     8e0:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_stop>
	
	return 0;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <read_gyroscope+0x11a>
}

int8_t read_gyroscope(uint8_t calibrate_gyro){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	07 c0       	rjmp	.+14     	; 0x8fa <read_gyroscope+0x11a>
	}
	
	if (TWI_address(0) != 0){
		return -1;
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <read_gyroscope+0x11a>
	}

	if (TWI_send(0x43) != 0){
		return -1;
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <read_gyroscope+0x11a>
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <read_gyroscope+0x11a>
	}
	
	if (TWI_address(1) != 0){
		return -1;
     8f8:	8f ef       	ldi	r24, 0xFF	; 255

	
	TWI_stop();
	
	return 0;
}
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <IMU_Init>:

int8_t IMU_Init(){
	uint8_t register_value;
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
     8fe:	62 e0       	ldi	r22, 0x02	; 2
     900:	8a e1       	ldi	r24, 0x1A	; 26
     902:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     906:	81 11       	cpse	r24, r1
     908:	77 c0       	rjmp	.+238    	; 0x9f8 <IMU_Init+0xfa>
	{
		return -1;
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
     90a:	68 e0       	ldi	r22, 0x08	; 8
     90c:	8b e1       	ldi	r24, 0x1B	; 27
     90e:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     912:	81 11       	cpse	r24, r1
     914:	73 c0       	rjmp	.+230    	; 0x9fc <IMU_Init+0xfe>
	{
		return -1;
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
     916:	68 e0       	ldi	r22, 0x08	; 8
     918:	8c e1       	ldi	r24, 0x1C	; 28
     91a:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     91e:	81 11       	cpse	r24, r1
     920:	6f c0       	rjmp	.+222    	; 0xa00 <IMU_Init+0x102>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	83 e2       	ldi	r24, 0x23	; 35
     926:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     92a:	81 11       	cpse	r24, r1
     92c:	6b c0       	rjmp	.+214    	; 0xa04 <IMU_Init+0x106>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	84 e2       	ldi	r24, 0x24	; 36
     932:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     936:	81 11       	cpse	r24, r1
     938:	67 c0       	rjmp	.+206    	; 0xa08 <IMU_Init+0x10a>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	87 e3       	ldi	r24, 0x37	; 55
     93e:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     942:	81 11       	cpse	r24, r1
     944:	63 c0       	rjmp	.+198    	; 0xa0c <IMU_Init+0x10e>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	88 e3       	ldi	r24, 0x38	; 56
     94a:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     94e:	81 11       	cpse	r24, r1
     950:	5f c0       	rjmp	.+190    	; 0xa10 <IMU_Init+0x112>
	{
		return -1;
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	8a e6       	ldi	r24, 0x6A	; 106
     956:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     95a:	81 11       	cpse	r24, r1
     95c:	5b c0       	rjmp	.+182    	; 0xa14 <IMU_Init+0x116>
	{
		return -1;
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	8b e6       	ldi	r24, 0x6B	; 107
     962:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     966:	81 11       	cpse	r24, r1
     968:	57 c0       	rjmp	.+174    	; 0xa18 <IMU_Init+0x11a>
	{
		return -1;
	}
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
     96a:	85 e7       	ldi	r24, 0x75	; 117
     96c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_receive_8bit>
	
	if (register_value != 0x68)
     970:	88 36       	cpi	r24, 0x68	; 104
     972:	09 f0       	breq	.+2      	; 0x976 <IMU_Init+0x78>
     974:	53 c0       	rjmp	.+166    	; 0xa1c <IMU_Init+0x11e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	83 ec       	ldi	r24, 0xC3	; 195
     97a:	99 e0       	ldi	r25, 0x09	; 9
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	80 40       	sbci	r24, 0x00	; 0
     980:	90 40       	sbci	r25, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <IMU_Init+0x7e>
     984:	00 c0       	rjmp	.+0      	; 0x986 <IMU_Init+0x88>
     986:	00 00       	nop
		return -2;
	}
	
	_delay_ms(200);
	
	read_acceleration(0);
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 48 03 	call	0x690	; 0x690 <read_acceleration>
	x_offset_acc = acceleration_x;
     98e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <acceleration_x>
     992:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <acceleration_x+0x1>
     996:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <x_offset_acc+0x1>
     99a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <x_offset_acc>
	y_offset_acc = acceleration_y;
     99e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <acceleration_y>
     9a2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <acceleration_y+0x1>
     9a6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <y_offset_acc+0x1>
     9aa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <y_offset_acc>
	z_offset_acc = acceleration_z;
     9ae:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <acceleration_z>
     9b2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <acceleration_z+0x1>
     9b6:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
     9ba:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	
	read_gyroscope(0);
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <read_gyroscope>
	x_offset_gyro = gyroscope_x;
     9c4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gyroscope_x>
     9c8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <gyroscope_x+0x1>
     9cc:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <x_offset_gyro+0x1>
     9d0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <x_offset_gyro>
	y_offset_gyro = gyroscope_y;
     9d4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <gyroscope_y>
     9d8:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <gyroscope_y+0x1>
     9dc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <y_offset_gyro+0x1>
     9e0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <y_offset_gyro>
	z_offset_gyro = gyroscope_z;
     9e4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <gyroscope_z>
     9e8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <gyroscope_z+0x1>
     9ec:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <z_offset_gyro+0x1>
     9f0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <z_offset_gyro>
	
	return register_value;
     9f4:	88 e6       	ldi	r24, 0x68	; 104
     9f6:	08 95       	ret
	uint8_t register_value;
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
	{
		return -1;
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	08 95       	ret
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
	{
		return -1;
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	08 95       	ret
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
	{
		return -1;
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	08 95       	ret
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
	{
		return -1;
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	08 95       	ret
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
	{
		return -1;
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
	{
		return -1;
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
	{
		return -1;
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	08 95       	ret
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
	{
		return -1;
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	08 95       	ret
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
	{
		return -1;
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	08 95       	ret
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
	
	if (register_value != 0x68)
	{
		return -2;
     a1c:	8e ef       	ldi	r24, 0xFE	; 254
	x_offset_gyro = gyroscope_x;
	y_offset_gyro = gyroscope_y;
	z_offset_gyro = gyroscope_z;
	
	return register_value;
}
     a1e:	08 95       	ret

00000a20 <IMU_who_i_am>:
	TWI_stop();
	
	return 0;
}

uint8_t IMU_who_i_am(uint8_t print){
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	d8 2f       	mov	r29, r24
	uint8_t whoiam = TWI_receive_8bit(0x75);
     a26:	85 e7       	ldi	r24, 0x75	; 117
     a28:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_receive_8bit>
     a2c:	c8 2f       	mov	r28, r24
	
	if (print == 1)
     a2e:	d1 30       	cpi	r29, 0x01	; 1
     a30:	29 f4       	brne	.+10     	; 0xa3c <IMU_who_i_am+0x1c>
	{
		USART_Transmit(whoiam);
     a32:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit('\n');
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
	}
	
	return whoiam;
}
     a3c:	8c 2f       	mov	r24, r28
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <temperature>:

int8_t temperature(uint8_t print){
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	d8 2f       	mov	r29, r24
	int8_t temperature_read = (((float) TWI_receive_16bit(0x3b))/340 + 36.53);
     a4a:	8b e3       	ldi	r24, 0x3B	; 59
     a4c:	0e 94 0c 03 	call	0x618	; 0x618 <TWI_receive_16bit>
     a50:	bc 01       	movw	r22, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	4a ea       	ldi	r20, 0xAA	; 170
     a60:	53 e4       	ldi	r21, 0x43	; 67
     a62:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     a66:	28 eb       	ldi	r18, 0xB8	; 184
     a68:	3e e1       	ldi	r19, 0x1E	; 30
     a6a:	42 e1       	ldi	r20, 0x12	; 18
     a6c:	52 e4       	ldi	r21, 0x42	; 66
     a6e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
     a72:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixsfsi>
     a76:	c6 2f       	mov	r28, r22
	
	if (print == 1)
     a78:	d1 30       	cpi	r29, 0x01	; 1
     a7a:	31 f4       	brne	.+12     	; 0xa88 <temperature+0x44>
	{
		USART_Transmit(temperature_read);
     a7c:	86 2f       	mov	r24, r22
     a7e:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit('\n');
     a82:	8a e0       	ldi	r24, 0x0A	; 10
     a84:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
	}
	
	return temperature_read;
}
     a88:	8c 2f       	mov	r24, r28
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <computed_acceleration>:

void computed_acceleration(uint8_t print){
     a90:	cf 93       	push	r28
     a92:	c8 2f       	mov	r28, r24
	accx = ((float) acceleration_x / 8192.0) * 98.1;
     a94:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <acceleration_x>
     a98:	70 91 8a 01 	lds	r23, 0x018A	; 0x80018a <acceleration_x+0x1>
     a9c:	07 2e       	mov	r0, r23
     a9e:	00 0c       	add	r0, r0
     aa0:	88 0b       	sbc	r24, r24
     aa2:	99 0b       	sbc	r25, r25
     aa4:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	59 e3       	ldi	r21, 0x39	; 57
     ab0:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     ab4:	23 e3       	ldi	r18, 0x33	; 51
     ab6:	33 e3       	ldi	r19, 0x33	; 51
     ab8:	44 ec       	ldi	r20, 0xC4	; 196
     aba:	52 e4       	ldi	r21, 0x42	; 66
     abc:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     ac0:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <accx>
     ac4:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <accx+0x1>
     ac8:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <accx+0x2>
     acc:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <accx+0x3>
	accy = ((float) acceleration_y / 8192.0) * 98.1;
     ad0:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <acceleration_y>
     ad4:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <acceleration_y+0x1>
     ad8:	07 2e       	mov	r0, r23
     ada:	00 0c       	add	r0, r0
     adc:	88 0b       	sbc	r24, r24
     ade:	99 0b       	sbc	r25, r25
     ae0:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	59 e3       	ldi	r21, 0x39	; 57
     aec:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     af0:	23 e3       	ldi	r18, 0x33	; 51
     af2:	33 e3       	ldi	r19, 0x33	; 51
     af4:	44 ec       	ldi	r20, 0xC4	; 196
     af6:	52 e4       	ldi	r21, 0x42	; 66
     af8:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     afc:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <accy>
     b00:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <accy+0x1>
     b04:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <accy+0x2>
     b08:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <accy+0x3>
	accz = ((float) acceleration_z / 8192.0) * 98.1;
     b0c:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <acceleration_z>
     b10:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <acceleration_z+0x1>
     b14:	07 2e       	mov	r0, r23
     b16:	00 0c       	add	r0, r0
     b18:	88 0b       	sbc	r24, r24
     b1a:	99 0b       	sbc	r25, r25
     b1c:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	59 e3       	ldi	r21, 0x39	; 57
     b28:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     b2c:	23 e3       	ldi	r18, 0x33	; 51
     b2e:	33 e3       	ldi	r19, 0x33	; 51
     b30:	44 ec       	ldi	r20, 0xC4	; 196
     b32:	52 e4       	ldi	r21, 0x42	; 66
     b34:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     b38:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <accz>
     b3c:	70 93 8d 01 	sts	0x018D, r23	; 0x80018d <accz+0x1>
     b40:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <accz+0x2>
     b44:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <accz+0x3>
	
	if (print == 1)
     b48:	c1 30       	cpi	r28, 0x01	; 1
     b4a:	51 f5       	brne	.+84     	; 0xba0 <__stack+0xa1>
	{
		USART_Transmit((uint8_t)accx);
     b4c:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <accx>
     b50:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <accx+0x1>
     b54:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <accx+0x2>
     b58:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <accx+0x3>
     b5c:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     b60:	86 2f       	mov	r24, r22
     b62:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit((uint8_t)accy);
     b66:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <accy>
     b6a:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <accy+0x1>
     b6e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <accy+0x2>
     b72:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <accy+0x3>
     b76:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     b7a:	86 2f       	mov	r24, r22
     b7c:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit((uint8_t)accz);
     b80:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <accz>
     b84:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <accz+0x1>
     b88:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <accz+0x2>
     b8c:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <accz+0x3>
     b90:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     b94:	86 2f       	mov	r24, r22
     b96:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit('\n');
     b9a:	8a e0       	ldi	r24, 0x0A	; 10
     b9c:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
	}
}
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <computed_gyroscope>:

void computed_gyroscope(uint8_t print){
     ba4:	cf 93       	push	r28
     ba6:	c8 2f       	mov	r28, r24
	gyrox = ((float) gyroscope_x / 65.0);
     ba8:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <gyroscope_x>
     bac:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <gyroscope_x+0x1>
     bb0:	07 2e       	mov	r0, r23
     bb2:	00 0c       	add	r0, r0
     bb4:	88 0b       	sbc	r24, r24
     bb6:	99 0b       	sbc	r25, r25
     bb8:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	42 e8       	ldi	r20, 0x82	; 130
     bc2:	52 e4       	ldi	r21, 0x42	; 66
     bc4:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     bc8:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <gyrox>
     bcc:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <gyrox+0x1>
     bd0:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <gyrox+0x2>
     bd4:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <gyrox+0x3>
	gyroy = ((float) gyroscope_y / 65.0);
     bd8:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <gyroscope_y>
     bdc:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <gyroscope_y+0x1>
     be0:	07 2e       	mov	r0, r23
     be2:	00 0c       	add	r0, r0
     be4:	88 0b       	sbc	r24, r24
     be6:	99 0b       	sbc	r25, r25
     be8:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	42 e8       	ldi	r20, 0x82	; 130
     bf2:	52 e4       	ldi	r21, 0x42	; 66
     bf4:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     bf8:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <gyroy>
     bfc:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <gyroy+0x1>
     c00:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <gyroy+0x2>
     c04:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <gyroy+0x3>
	gyroz = ((float) gyroscope_z / 65.0);
     c08:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <gyroscope_z>
     c0c:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <gyroscope_z+0x1>
     c10:	07 2e       	mov	r0, r23
     c12:	00 0c       	add	r0, r0
     c14:	88 0b       	sbc	r24, r24
     c16:	99 0b       	sbc	r25, r25
     c18:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	42 e8       	ldi	r20, 0x82	; 130
     c22:	52 e4       	ldi	r21, 0x42	; 66
     c24:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     c28:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <gyroz>
     c2c:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <gyroz+0x1>
     c30:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <gyroz+0x2>
     c34:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <gyroz+0x3>
	
	if (print == 1)
     c38:	c1 30       	cpi	r28, 0x01	; 1
     c3a:	51 f5       	brne	.+84     	; 0xc90 <computed_gyroscope+0xec>
	{
		USART_Transmit((uint8_t)gyrox);
     c3c:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <gyrox>
     c40:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <gyrox+0x1>
     c44:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <gyrox+0x2>
     c48:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <gyrox+0x3>
     c4c:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     c50:	86 2f       	mov	r24, r22
     c52:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit((uint8_t)gyroy);
     c56:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <gyroy>
     c5a:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <gyroy+0x1>
     c5e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <gyroy+0x2>
     c62:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <gyroy+0x3>
     c66:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     c6a:	86 2f       	mov	r24, r22
     c6c:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit((uint8_t)gyroz);
     c70:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <gyroz>
     c74:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <gyroz+0x1>
     c78:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <gyroz+0x2>
     c7c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <gyroz+0x3>
     c80:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     c84:	86 2f       	mov	r24, r22
     c86:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit('\n');
     c8a:	8a e0       	ldi	r24, 0x0A	; 10
     c8c:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
	}
}
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <compute_angle_acc>:

void compute_angle_acc(uint8_t print){
     c94:	4f 92       	push	r4
     c96:	5f 92       	push	r5
     c98:	6f 92       	push	r6
     c9a:	7f 92       	push	r7
     c9c:	8f 92       	push	r8
     c9e:	9f 92       	push	r9
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	2d 97       	sbiw	r28, 0x0d	; 13
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	8d 87       	std	Y+13, r24	; 0x0d
	
	Angle_X_Acc = (int8_t) (atan(accx/((float)sqrt(accy*accy+accz*accz)))*180.0/3.1415); //transform from radiants to degree
     cc2:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <accx>
     cc6:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <accx+0x1>
     cca:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <accx+0x2>
     cce:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <accx+0x3>
     cd2:	8d 83       	std	Y+5, r24	; 0x05
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	af 83       	std	Y+7, r26	; 0x07
     cd8:	b8 87       	std	Y+8, r27	; 0x08
     cda:	c0 90 78 01 	lds	r12, 0x0178	; 0x800178 <accy>
     cde:	d0 90 79 01 	lds	r13, 0x0179	; 0x800179 <accy+0x1>
     ce2:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <accy+0x2>
     ce6:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <accy+0x3>
     cea:	80 90 78 01 	lds	r8, 0x0178	; 0x800178 <accy>
     cee:	90 90 79 01 	lds	r9, 0x0179	; 0x800179 <accy+0x1>
     cf2:	a0 90 7a 01 	lds	r10, 0x017A	; 0x80017a <accy+0x2>
     cf6:	b0 90 7b 01 	lds	r11, 0x017B	; 0x80017b <accy+0x3>
     cfa:	40 90 8c 01 	lds	r4, 0x018C	; 0x80018c <accz>
     cfe:	50 90 8d 01 	lds	r5, 0x018D	; 0x80018d <accz+0x1>
     d02:	60 90 8e 01 	lds	r6, 0x018E	; 0x80018e <accz+0x2>
     d06:	70 90 8f 01 	lds	r7, 0x018F	; 0x80018f <accz+0x3>
     d0a:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <accz>
     d0e:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <accz+0x1>
     d12:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <accz+0x2>
     d16:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <accz+0x3>
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	ab 83       	std	Y+3, r26	; 0x03
     d20:	bc 83       	std	Y+4, r27	; 0x04
     d22:	a5 01       	movw	r20, r10
     d24:	94 01       	movw	r18, r8
     d26:	c7 01       	movw	r24, r14
     d28:	b6 01       	movw	r22, r12
     d2a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     d2e:	69 87       	std	Y+9, r22	; 0x09
     d30:	7a 87       	std	Y+10, r23	; 0x0a
     d32:	8b 87       	std	Y+11, r24	; 0x0b
     d34:	9c 87       	std	Y+12, r25	; 0x0c
     d36:	a5 01       	movw	r20, r10
     d38:	94 01       	movw	r18, r8
     d3a:	c7 01       	movw	r24, r14
     d3c:	b6 01       	movw	r22, r12
     d3e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     d42:	6b 01       	movw	r12, r22
     d44:	7c 01       	movw	r14, r24
     d46:	29 81       	ldd	r18, Y+1	; 0x01
     d48:	3a 81       	ldd	r19, Y+2	; 0x02
     d4a:	4b 81       	ldd	r20, Y+3	; 0x03
     d4c:	5c 81       	ldd	r21, Y+4	; 0x04
     d4e:	c3 01       	movw	r24, r6
     d50:	b2 01       	movw	r22, r4
     d52:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     d56:	9b 01       	movw	r18, r22
     d58:	ac 01       	movw	r20, r24
     d5a:	c7 01       	movw	r24, r14
     d5c:	b6 01       	movw	r22, r12
     d5e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
     d62:	0e 94 65 13 	call	0x26ca	; 0x26ca <sqrt>
     d66:	9b 01       	movw	r18, r22
     d68:	ac 01       	movw	r20, r24
     d6a:	6d 81       	ldd	r22, Y+5	; 0x05
     d6c:	7e 81       	ldd	r23, Y+6	; 0x06
     d6e:	8f 81       	ldd	r24, Y+7	; 0x07
     d70:	98 85       	ldd	r25, Y+8	; 0x08
     d72:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     d76:	0e 94 5e 11 	call	0x22bc	; 0x22bc <atan>
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	44 e3       	ldi	r20, 0x34	; 52
     d80:	53 e4       	ldi	r21, 0x43	; 67
     d82:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     d86:	26 e5       	ldi	r18, 0x56	; 86
     d88:	3e e0       	ldi	r19, 0x0E	; 14
     d8a:	49 e4       	ldi	r20, 0x49	; 73
     d8c:	50 e4       	ldi	r21, 0x40	; 64
     d8e:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     d92:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixsfsi>
     d96:	06 2e       	mov	r0, r22
     d98:	00 0c       	add	r0, r0
     d9a:	77 0b       	sbc	r23, r23
     d9c:	88 0b       	sbc	r24, r24
     d9e:	99 0b       	sbc	r25, r25
     da0:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
     da4:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <Angle_X_Acc>
     da8:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <Angle_X_Acc+0x1>
     dac:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <Angle_X_Acc+0x2>
     db0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <Angle_X_Acc+0x3>
	Angle_Y_Acc = (int8_t) (atan(accy/((float)sqrt(accx*accx+accz*accz)))*180.0/3.1415); //transform from radiants to degree
     db4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <accy>
     db8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <accy+0x1>
     dbc:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <accy+0x2>
     dc0:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <accy+0x3>
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	9e 83       	std	Y+6, r25	; 0x06
     dc8:	af 83       	std	Y+7, r26	; 0x07
     dca:	b8 87       	std	Y+8, r27	; 0x08
     dcc:	c0 90 94 01 	lds	r12, 0x0194	; 0x800194 <accx>
     dd0:	d0 90 95 01 	lds	r13, 0x0195	; 0x800195 <accx+0x1>
     dd4:	e0 90 96 01 	lds	r14, 0x0196	; 0x800196 <accx+0x2>
     dd8:	f0 90 97 01 	lds	r15, 0x0197	; 0x800197 <accx+0x3>
     ddc:	80 90 94 01 	lds	r8, 0x0194	; 0x800194 <accx>
     de0:	90 90 95 01 	lds	r9, 0x0195	; 0x800195 <accx+0x1>
     de4:	a0 90 96 01 	lds	r10, 0x0196	; 0x800196 <accx+0x2>
     de8:	b0 90 97 01 	lds	r11, 0x0197	; 0x800197 <accx+0x3>
     dec:	40 90 8c 01 	lds	r4, 0x018C	; 0x80018c <accz>
     df0:	50 90 8d 01 	lds	r5, 0x018D	; 0x80018d <accz+0x1>
     df4:	60 90 8e 01 	lds	r6, 0x018E	; 0x80018e <accz+0x2>
     df8:	70 90 8f 01 	lds	r7, 0x018F	; 0x80018f <accz+0x3>
     dfc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <accz>
     e00:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <accz+0x1>
     e04:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <accz+0x2>
     e08:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <accz+0x3>
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	9a 83       	std	Y+2, r25	; 0x02
     e10:	ab 83       	std	Y+3, r26	; 0x03
     e12:	bc 83       	std	Y+4, r27	; 0x04
     e14:	a5 01       	movw	r20, r10
     e16:	94 01       	movw	r18, r8
     e18:	c7 01       	movw	r24, r14
     e1a:	b6 01       	movw	r22, r12
     e1c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     e20:	69 87       	std	Y+9, r22	; 0x09
     e22:	7a 87       	std	Y+10, r23	; 0x0a
     e24:	8b 87       	std	Y+11, r24	; 0x0b
     e26:	9c 87       	std	Y+12, r25	; 0x0c
     e28:	a5 01       	movw	r20, r10
     e2a:	94 01       	movw	r18, r8
     e2c:	c7 01       	movw	r24, r14
     e2e:	b6 01       	movw	r22, r12
     e30:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     e34:	6b 01       	movw	r12, r22
     e36:	7c 01       	movw	r14, r24
     e38:	29 81       	ldd	r18, Y+1	; 0x01
     e3a:	3a 81       	ldd	r19, Y+2	; 0x02
     e3c:	4b 81       	ldd	r20, Y+3	; 0x03
     e3e:	5c 81       	ldd	r21, Y+4	; 0x04
     e40:	c3 01       	movw	r24, r6
     e42:	b2 01       	movw	r22, r4
     e44:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     e48:	9b 01       	movw	r18, r22
     e4a:	ac 01       	movw	r20, r24
     e4c:	c7 01       	movw	r24, r14
     e4e:	b6 01       	movw	r22, r12
     e50:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
     e54:	0e 94 65 13 	call	0x26ca	; 0x26ca <sqrt>
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	6d 81       	ldd	r22, Y+5	; 0x05
     e5e:	7e 81       	ldd	r23, Y+6	; 0x06
     e60:	8f 81       	ldd	r24, Y+7	; 0x07
     e62:	98 85       	ldd	r25, Y+8	; 0x08
     e64:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     e68:	0e 94 5e 11 	call	0x22bc	; 0x22bc <atan>
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	44 e3       	ldi	r20, 0x34	; 52
     e72:	53 e4       	ldi	r21, 0x43	; 67
     e74:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     e78:	26 e5       	ldi	r18, 0x56	; 86
     e7a:	3e e0       	ldi	r19, 0x0E	; 14
     e7c:	49 e4       	ldi	r20, 0x49	; 73
     e7e:	50 e4       	ldi	r21, 0x40	; 64
     e80:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     e84:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixsfsi>
     e88:	06 2e       	mov	r0, r22
     e8a:	00 0c       	add	r0, r0
     e8c:	77 0b       	sbc	r23, r23
     e8e:	88 0b       	sbc	r24, r24
     e90:	99 0b       	sbc	r25, r25
     e92:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
     e96:	60 93 81 01 	sts	0x0181, r22	; 0x800181 <Angle_Y_Acc>
     e9a:	70 93 82 01 	sts	0x0182, r23	; 0x800182 <Angle_Y_Acc+0x1>
     e9e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Angle_Y_Acc+0x2>
     ea2:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <Angle_Y_Acc+0x3>
	
	if (print == 1)
     ea6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ea8:	91 30       	cpi	r25, 0x01	; 1
     eaa:	e9 f4       	brne	.+58     	; 0xee6 <compute_angle_acc+0x252>
	{
		USART_Transmit((uint8_t)Angle_X_Acc);
     eac:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <Angle_X_Acc>
     eb0:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <Angle_X_Acc+0x1>
     eb4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <Angle_X_Acc+0x2>
     eb8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <Angle_X_Acc+0x3>
     ebc:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     ec0:	86 2f       	mov	r24, r22
     ec2:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit((uint8_t)Angle_Y_Acc);
     ec6:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <Angle_Y_Acc>
     eca:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <Angle_Y_Acc+0x1>
     ece:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Angle_Y_Acc+0x2>
     ed2:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Angle_Y_Acc+0x3>
     ed6:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
     eda:	86 2f       	mov	r24, r22
     edc:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit('\n');
     ee0:	8a e0       	ldi	r24, 0x0A	; 10
     ee2:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
	}
}
     ee6:	2d 96       	adiw	r28, 0x0d	; 13
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	9f 90       	pop	r9
     f04:	8f 90       	pop	r8
     f06:	7f 90       	pop	r7
     f08:	6f 90       	pop	r6
     f0a:	5f 90       	pop	r5
     f0c:	4f 90       	pop	r4
     f0e:	08 95       	ret

00000f10 <compute_angle_gyro>:

void compute_angle_gyro(uint8_t print){
     f10:	8f 92       	push	r8
     f12:	9f 92       	push	r9
     f14:	af 92       	push	r10
     f16:	bf 92       	push	r11
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	cf 93       	push	r28
     f22:	c8 2f       	mov	r28, r24
	
	//gyrox = ((float) gyroscope_x / 65);
	//gyroy = ((float) gyroscope_y / 65);
	//gyroz = ((float) gyroscope_z / 65);
	
	float delta_time = time_precision(last_sample_gyro, last_sample_gyro_mod); // check ths
     f24:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <last_sample_gyro_mod>
     f28:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <last_sample_gyro_mod+0x1>
     f2c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <last_sample_gyro>
     f30:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <last_sample_gyro+0x1>
     f34:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <time_precision>
     f38:	bc 01       	movw	r22, r24
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
     f42:	6b 01       	movw	r12, r22
     f44:	7c 01       	movw	r14, r24
	
	Angle_X_Gyro = Angle_X_Gyro + (gyrox*((float)delta_time))/248000.0; //transform from radiants to degree
     f46:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <gyrox>
     f4a:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <gyrox+0x1>
     f4e:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <gyrox+0x2>
     f52:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <gyrox+0x3>
     f56:	80 90 3a 01 	lds	r8, 0x013A	; 0x80013a <Angle_X_Gyro>
     f5a:	90 90 3b 01 	lds	r9, 0x013B	; 0x80013b <Angle_X_Gyro+0x1>
     f5e:	a0 90 3c 01 	lds	r10, 0x013C	; 0x80013c <Angle_X_Gyro+0x2>
     f62:	b0 90 3d 01 	lds	r11, 0x013D	; 0x80013d <Angle_X_Gyro+0x3>
     f66:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e3       	ldi	r19, 0x30	; 48
     f6e:	42 e7       	ldi	r20, 0x72	; 114
     f70:	58 e4       	ldi	r21, 0x48	; 72
     f72:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     f76:	a5 01       	movw	r20, r10
     f78:	94 01       	movw	r18, r8
     f7a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
     f7e:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <Angle_X_Gyro>
     f82:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <Angle_X_Gyro+0x1>
     f86:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Angle_X_Gyro+0x2>
     f8a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <Angle_X_Gyro+0x3>
	Angle_Y_Gyro = Angle_Y_Gyro + (gyroy*((float)delta_time))/248000.0;  //transform from radiants to degree
     f8e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <gyroy>
     f92:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <gyroy+0x1>
     f96:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <gyroy+0x2>
     f9a:	50 91 9b 01 	lds	r21, 0x019B	; 0x80019b <gyroy+0x3>
     f9e:	80 90 36 01 	lds	r8, 0x0136	; 0x800136 <Angle_Y_Gyro>
     fa2:	90 90 37 01 	lds	r9, 0x0137	; 0x800137 <Angle_Y_Gyro+0x1>
     fa6:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <Angle_Y_Gyro+0x2>
     faa:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <Angle_Y_Gyro+0x3>
     fae:	c7 01       	movw	r24, r14
     fb0:	b6 01       	movw	r22, r12
     fb2:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e3       	ldi	r19, 0x30	; 48
     fba:	42 e7       	ldi	r20, 0x72	; 114
     fbc:	58 e4       	ldi	r21, 0x48	; 72
     fbe:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
     fc2:	a5 01       	movw	r20, r10
     fc4:	94 01       	movw	r18, r8
     fc6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
     fca:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <Angle_Y_Gyro>
     fce:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <Angle_Y_Gyro+0x1>
     fd2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Angle_Y_Gyro+0x2>
     fd6:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <Angle_Y_Gyro+0x3>

	last_sample_gyro = system_tick_MG_p;
     fda:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <system_tick_MG_p>
     fde:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <system_tick_MG_p+0x1>
     fe2:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <last_sample_gyro+0x1>
     fe6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <last_sample_gyro>
	last_sample_gyro_mod = system_tick_MG_p_mod;
     fea:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <system_tick_MG_p_mod>
     fee:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <system_tick_MG_p_mod+0x1>
     ff2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <last_sample_gyro_mod+0x1>
     ff6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <last_sample_gyro_mod>
	
	if (print == 1)
     ffa:	c1 30       	cpi	r28, 0x01	; 1
     ffc:	01 f5       	brne	.+64     	; 0x103e <compute_angle_gyro+0x12e>
	{
		USART_Transmit((uint8_t)-Angle_Y_Gyro);
     ffe:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Angle_Y_Gyro>
    1002:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Angle_Y_Gyro+0x1>
    1006:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <Angle_Y_Gyro+0x2>
    100a:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <Angle_Y_Gyro+0x3>
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	90 58       	subi	r25, 0x80	; 128
    1014:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    1018:	86 2f       	mov	r24, r22
    101a:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit((uint8_t)Angle_X_Gyro);
    101e:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Angle_X_Gyro>
    1022:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <Angle_X_Gyro+0x1>
    1026:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Angle_X_Gyro+0x2>
    102a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <Angle_X_Gyro+0x3>
    102e:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    1032:	86 2f       	mov	r24, r22
    1034:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit('\n');
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
	}
}
    103e:	cf 91       	pop	r28
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	df 90       	pop	r13
    1046:	cf 90       	pop	r12
    1048:	bf 90       	pop	r11
    104a:	af 90       	pop	r10
    104c:	9f 90       	pop	r9
    104e:	8f 90       	pop	r8
    1050:	08 95       	ret

00001052 <angle_filtered>:
volatile int8_t AngleX;
volatile int8_t AngleY;

float acc_contribution = 0.1;

void angle_filtered(uint8_t print){
    1052:	4f 92       	push	r4
    1054:	5f 92       	push	r5
    1056:	6f 92       	push	r6
    1058:	7f 92       	push	r7
    105a:	8f 92       	push	r8
    105c:	9f 92       	push	r9
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	00 d0       	rcall	.+0      	; 0x1070 <angle_filtered+0x1e>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <angle_filtered+0x20>
    1072:	1f 92       	push	r1
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	8d 83       	std	Y+5, r24	; 0x05
	AngleX = acc_contribution*Angle_X_Acc - (1-acc_contribution)*Angle_Y_Gyro; //Right math, wrong variable names - to correct in future version
    107a:	c0 90 1f 01 	lds	r12, 0x011F	; 0x80011f <acc_contribution>
    107e:	d0 90 20 01 	lds	r13, 0x0120	; 0x800120 <acc_contribution+0x1>
    1082:	e0 90 21 01 	lds	r14, 0x0121	; 0x800121 <acc_contribution+0x2>
    1086:	f0 90 22 01 	lds	r15, 0x0122	; 0x800122 <acc_contribution+0x3>
    108a:	40 90 7c 01 	lds	r4, 0x017C	; 0x80017c <Angle_X_Acc>
    108e:	50 90 7d 01 	lds	r5, 0x017D	; 0x80017d <Angle_X_Acc+0x1>
    1092:	60 90 7e 01 	lds	r6, 0x017E	; 0x80017e <Angle_X_Acc+0x2>
    1096:	70 90 7f 01 	lds	r7, 0x017F	; 0x80017f <Angle_X_Acc+0x3>
    109a:	a7 01       	movw	r20, r14
    109c:	96 01       	movw	r18, r12
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	80 e8       	ldi	r24, 0x80	; 128
    10a4:	9f e3       	ldi	r25, 0x3F	; 63
    10a6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    10aa:	69 83       	std	Y+1, r22	; 0x01
    10ac:	7a 83       	std	Y+2, r23	; 0x02
    10ae:	8b 83       	std	Y+3, r24	; 0x03
    10b0:	9c 83       	std	Y+4, r25	; 0x04
    10b2:	80 90 36 01 	lds	r8, 0x0136	; 0x800136 <Angle_Y_Gyro>
    10b6:	90 90 37 01 	lds	r9, 0x0137	; 0x800137 <Angle_Y_Gyro+0x1>
    10ba:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <Angle_Y_Gyro+0x2>
    10be:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <Angle_Y_Gyro+0x3>
    10c2:	a3 01       	movw	r20, r6
    10c4:	92 01       	movw	r18, r4
    10c6:	c7 01       	movw	r24, r14
    10c8:	b6 01       	movw	r22, r12
    10ca:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    10ce:	2b 01       	movw	r4, r22
    10d0:	3c 01       	movw	r6, r24
    10d2:	a5 01       	movw	r20, r10
    10d4:	94 01       	movw	r18, r8
    10d6:	69 81       	ldd	r22, Y+1	; 0x01
    10d8:	7a 81       	ldd	r23, Y+2	; 0x02
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    10e2:	9b 01       	movw	r18, r22
    10e4:	ac 01       	movw	r20, r24
    10e6:	c3 01       	movw	r24, r6
    10e8:	b2 01       	movw	r22, r4
    10ea:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    10ee:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixsfsi>
    10f2:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <AngleX>
	AngleY = acc_contribution*Angle_Y_Acc + (1-acc_contribution)*Angle_X_Gyro; //Right math, wrong variable names - to correct in future version
    10f6:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <Angle_Y_Acc>
    10fa:	30 91 82 01 	lds	r19, 0x0182	; 0x800182 <Angle_Y_Acc+0x1>
    10fe:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <Angle_Y_Acc+0x2>
    1102:	50 91 84 01 	lds	r21, 0x0184	; 0x800184 <Angle_Y_Acc+0x3>
    1106:	40 90 3a 01 	lds	r4, 0x013A	; 0x80013a <Angle_X_Gyro>
    110a:	50 90 3b 01 	lds	r5, 0x013B	; 0x80013b <Angle_X_Gyro+0x1>
    110e:	60 90 3c 01 	lds	r6, 0x013C	; 0x80013c <Angle_X_Gyro+0x2>
    1112:	70 90 3d 01 	lds	r7, 0x013D	; 0x80013d <Angle_X_Gyro+0x3>
    1116:	c7 01       	movw	r24, r14
    1118:	b6 01       	movw	r22, r12
    111a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    111e:	6b 01       	movw	r12, r22
    1120:	7c 01       	movw	r14, r24
    1122:	a3 01       	movw	r20, r6
    1124:	92 01       	movw	r18, r4
    1126:	69 81       	ldd	r22, Y+1	; 0x01
    1128:	7a 81       	ldd	r23, Y+2	; 0x02
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1132:	9b 01       	movw	r18, r22
    1134:	ac 01       	movw	r20, r24
    1136:	c7 01       	movw	r24, r14
    1138:	b6 01       	movw	r22, r12
    113a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    113e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixsfsi>
    1142:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <AngleY>

	if (print == 1)
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	59 f4       	brne	.+22     	; 0x1162 <angle_filtered+0x110>
	{
		USART_Transmit((uint8_t)AngleX);
    114c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <AngleX>
    1150:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit((uint8_t)AngleY);
    1154:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <AngleY>
    1158:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
		USART_Transmit('\n');
    115c:	8a e0       	ldi	r24, 0x0A	; 10
    115e:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
	}
	
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	9f 90       	pop	r9
    117e:	8f 90       	pop	r8
    1180:	7f 90       	pop	r7
    1182:	6f 90       	pop	r6
    1184:	5f 90       	pop	r5
    1186:	4f 90       	pop	r4
    1188:	08 95       	ret

0000118a <main>:
volatile uint8_t ISR_USART_Receive = 0;


int main(void)
{
	DDRD = 0b00000000; //Makes PORTD as Input
    118a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00001111; //Internal Pull Up enabled
    118c:	8f e0       	ldi	r24, 0x0F	; 15
    118e:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0b11111111;
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	84 b9       	out	0x04, r24	; 4


	timer_init();
    1194:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <timer_init>
	
	TWI_init();
    1198:	0e 94 c0 01 	call	0x380	; 0x380 <TWI_init>
	USART_Init(57600);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	91 ee       	ldi	r25, 0xE1	; 225
    11a0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <USART_Init>
	
	USART_Transmit(IMU_Init());
    11a4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <IMU_Init>
    11a8:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
	
	interrupt_init();
    11ac:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <interrupt_init>
	
	sei(); //cli(); countermeasure
    11b0:	78 94       	sei
	while (1)
	{
		aux1 = 50; //for development purpose only
		if (aux1 > 25) //taking some noise into account
		{
			is_started = 1;
    11b2:	11 e0       	ldi	r17, 0x01	; 1
	sei(); //cli(); countermeasure
	
	
	while (1)
	{
		aux1 = 50; //for development purpose only
    11b4:	c2 e3       	ldi	r28, 0x32	; 50
		if (aux1 > 25) //taking some noise into account
		{
			is_started = 1;
    11b6:	d1 2f       	mov	r29, r17
	sei(); //cli(); countermeasure
	
	
	while (1)
	{
		aux1 = 50; //for development purpose only
    11b8:	c0 93 61 01 	sts	0x0161, r28	; 0x800161 <aux1>
		if (aux1 > 25) //taking some noise into account
    11bc:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <aux1>
    11c0:	8a 31       	cpi	r24, 0x1A	; 26
    11c2:	18 f0       	brcs	.+6      	; 0x11ca <main+0x40>
		{
			is_started = 1;
    11c4:	d0 93 58 01 	sts	0x0158, r29	; 0x800158 <is_started>
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <main+0x44>
			}else{
			is_started = 0;
    11ca:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <is_started>
		}
		
		if (is_started == 1)
    11ce:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <is_started>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	89 f7       	brne	.-30     	; 0x11b8 <main+0x2e>
		{
			read_acceleration(1); //refresh acc reading
    11d6:	81 2f       	mov	r24, r17
    11d8:	0e 94 48 03 	call	0x690	; 0x690 <read_acceleration>
			read_gyroscope(1); //refresh gyro reading
    11dc:	81 2f       	mov	r24, r17
    11de:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <read_gyroscope>
			
			computed_acceleration(0); //compute acc reading
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	0e 94 48 05 	call	0xa90	; 0xa90 <computed_acceleration>
			computed_gyroscope(0); //compute gyro reading
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 d2 05 	call	0xba4	; 0xba4 <computed_gyroscope>
			
			compute_angle_acc(0); //compute angle by acc information
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 4a 06 	call	0xc94	; 0xc94 <compute_angle_acc>
			compute_angle_gyro(0); //compute angle by gyro information
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 88 07 	call	0xf10	; 0xf10 <compute_angle_gyro>
			
			angle_filtered(1); //compute angle filtered btw acc and gyro
    11fa:	81 2f       	mov	r24, r17
    11fc:	0e 94 29 08 	call	0x1052	; 0x1052 <angle_filtered>
						
			update_PIDs(); //compute new motor speed values with PID controllers
    1200:	0e 94 95 0b 	call	0x172a	; 0x172a <update_PIDs>
			update_motors(); //update motor speeds
    1204:	0e 94 cd 0b 	call	0x179a	; 0x179a <update_motors>
    1208:	d7 cf       	rjmp	.-82     	; 0x11b8 <main+0x2e>

0000120a <PID_Pitch>:
volatile uint8_t motor3 = 0;
volatile uint8_t motor4 = 0;

uint8_t PID[3];

void PID_Pitch(){
    120a:	4f 92       	push	r4
    120c:	5f 92       	push	r5
    120e:	6f 92       	push	r6
    1210:	7f 92       	push	r7
    1212:	af 92       	push	r10
    1214:	bf 92       	push	r11
    1216:	cf 92       	push	r12
    1218:	df 92       	push	r13
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29

	error_pitch = map_values(AngleX, 0, 90, 0, 100) - pitch;
    1226:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <AngleX>
    122a:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <pitch>
    122e:	34 e6       	ldi	r19, 0x64	; 100
    1230:	83 02       	muls	r24, r19
    1232:	c0 01       	movw	r24, r0
    1234:	11 24       	eor	r1, r1
    1236:	6a e5       	ldi	r22, 0x5A	; 90
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	0e 94 be 13 	call	0x277c	; 0x277c <__divmodhi4>
    123e:	c6 2f       	mov	r28, r22
    1240:	c2 1b       	sub	r28, r18
    1242:	c0 93 a0 01 	sts	0x01A0, r28	; 0x8001a0 <error_pitch>

	/*Next the proportional value of the PID is just a proportional constant
	*multiplied by the error*/

	pid_p = k_pitch[0]*error_pitch;
    1246:	06 e2       	ldi	r16, 0x26	; 38
    1248:	11 e0       	ldi	r17, 0x01	; 1
    124a:	f8 01       	movw	r30, r16
    124c:	b0 80       	ld	r11, Z
    124e:	cb 9d       	mul	r28, r11
    1250:	b0 2c       	mov	r11, r0
    1252:	11 24       	eor	r1, r1
    1254:	b0 92 a6 01 	sts	0x01A6, r11	; 0x8001a6 <pid_p>
	
	delta_time_PID = system_tick_MG + 0.0000041*(float)TCNT0 - last_sample_pitch;
    1258:	e0 90 aa 01 	lds	r14, 0x01AA	; 0x8001aa <system_tick_MG>
    125c:	f0 90 ab 01 	lds	r15, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    1260:	66 b5       	in	r22, 0x26	; 38
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    126c:	2b eb       	ldi	r18, 0xBB	; 187
    126e:	32 e9       	ldi	r19, 0x92	; 146
    1270:	49 e8       	ldi	r20, 0x89	; 137
    1272:	56 e3       	ldi	r21, 0x36	; 54
    1274:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1278:	2b 01       	movw	r4, r22
    127a:	3c 01       	movw	r6, r24
    127c:	b7 01       	movw	r22, r14
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1286:	9b 01       	movw	r18, r22
    1288:	ac 01       	movw	r20, r24
    128a:	c3 01       	movw	r24, r6
    128c:	b2 01       	movw	r22, r4
    128e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    1292:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <last_sample_pitch>
    1296:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <last_sample_pitch+0x1>
    129a:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <last_sample_pitch+0x2>
    129e:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <last_sample_pitch+0x3>
    12a2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    12a6:	6b 01       	movw	r12, r22
    12a8:	7c 01       	movw	r14, r24
    12aa:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <delta_time_PID>
    12ae:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <delta_time_PID+0x1>
    12b2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <delta_time_PID+0x2>
    12b6:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <delta_time_PID+0x3>

	pid_i = pid_i+(k_pitch[1]*error_pitch)*delta_time_PID;
    12ba:	d0 e0       	ldi	r29, 0x00	; 0
    12bc:	f8 01       	movw	r30, r16
    12be:	81 81       	ldd	r24, Z+1	; 0x01
    12c0:	8c 9f       	mul	r24, r28
    12c2:	b0 01       	movw	r22, r0
    12c4:	8d 9f       	mul	r24, r29
    12c6:	70 0d       	add	r23, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	07 2e       	mov	r0, r23
    12cc:	00 0c       	add	r0, r0
    12ce:	88 0b       	sbc	r24, r24
    12d0:	99 0b       	sbc	r25, r25
    12d2:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    12d6:	a7 01       	movw	r20, r14
    12d8:	96 01       	movw	r18, r12
    12da:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    12de:	2b 01       	movw	r4, r22
    12e0:	3c 01       	movw	r6, r24
    12e2:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <pid_i>
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    12f0:	9b 01       	movw	r18, r22
    12f2:	ac 01       	movw	r20, r24
    12f4:	c3 01       	movw	r24, r6
    12f6:	b2 01       	movw	r22, r4
    12f8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    12fc:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    1300:	a6 2e       	mov	r10, r22
    1302:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <pid_i>

	pid_d = k_pitch[2]*((error_pitch - error_pitch_previous)/delta_time_PID);
    1306:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <error_pitch_previous>
    130a:	be 01       	movw	r22, r28
    130c:	68 1b       	sub	r22, r24
    130e:	71 09       	sbc	r23, r1
    1310:	07 2e       	mov	r0, r23
    1312:	00 0c       	add	r0, r0
    1314:	88 0b       	sbc	r24, r24
    1316:	99 0b       	sbc	r25, r25
    1318:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    131c:	a7 01       	movw	r20, r14
    131e:	96 01       	movw	r18, r12
    1320:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
    1324:	6b 01       	movw	r12, r22
    1326:	7c 01       	movw	r14, r24
    1328:	f8 01       	movw	r30, r16
    132a:	62 81       	ldd	r22, Z+2	; 0x02
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	c7 01       	movw	r24, r14
    133c:	b6 01       	movw	r22, r12
    133e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1342:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    1346:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <pid_d>

	/*The final PID values is the sum of each of this 3 parts*/
	PID[0] = pid_p + pid_i + pid_d;
    134a:	6a 0d       	add	r22, r10
    134c:	b6 0e       	add	r11, r22
    134e:	b0 92 9c 01 	sts	0x019C, r11	; 0x80019c <PID>
	
	last_sample_pitch = system_tick_MG + 0.0000041*(float)TCNT0;
    1352:	c0 91 aa 01 	lds	r28, 0x01AA	; 0x8001aa <system_tick_MG>
    1356:	d0 91 ab 01 	lds	r29, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    135a:	66 b5       	in	r22, 0x26	; 38
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1366:	2b eb       	ldi	r18, 0xBB	; 187
    1368:	32 e9       	ldi	r19, 0x92	; 146
    136a:	49 e8       	ldi	r20, 0x89	; 137
    136c:	56 e3       	ldi	r21, 0x36	; 54
    136e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1372:	6b 01       	movw	r12, r22
    1374:	7c 01       	movw	r14, r24
    1376:	be 01       	movw	r22, r28
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1380:	9b 01       	movw	r18, r22
    1382:	ac 01       	movw	r20, r24
    1384:	c7 01       	movw	r24, r14
    1386:	b6 01       	movw	r22, r12
    1388:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    138c:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <last_sample_pitch>
    1390:	70 93 50 01 	sts	0x0150, r23	; 0x800150 <last_sample_pitch+0x1>
    1394:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <last_sample_pitch+0x2>
    1398:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <last_sample_pitch+0x3>

}
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	df 90       	pop	r13
    13aa:	cf 90       	pop	r12
    13ac:	bf 90       	pop	r11
    13ae:	af 90       	pop	r10
    13b0:	7f 90       	pop	r7
    13b2:	6f 90       	pop	r6
    13b4:	5f 90       	pop	r5
    13b6:	4f 90       	pop	r4
    13b8:	08 95       	ret

000013ba <PID_Roll>:

void PID_Roll(){
    13ba:	4f 92       	push	r4
    13bc:	5f 92       	push	r5
    13be:	6f 92       	push	r6
    13c0:	7f 92       	push	r7
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29

	error_roll = map_values(AngleY, 0, 90, 0, 100) - roll;
    13d6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <AngleY>
    13da:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <roll>
    13de:	34 e6       	ldi	r19, 0x64	; 100
    13e0:	83 02       	muls	r24, r19
    13e2:	c0 01       	movw	r24, r0
    13e4:	11 24       	eor	r1, r1
    13e6:	6a e5       	ldi	r22, 0x5A	; 90
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	0e 94 be 13 	call	0x277c	; 0x277c <__divmodhi4>
    13ee:	c6 2f       	mov	r28, r22
    13f0:	c2 1b       	sub	r28, r18
    13f2:	c0 93 a7 01 	sts	0x01A7, r28	; 0x8001a7 <error_roll>

	/*Next the proportional value of the PID is just a proportional constant
	*multiplied by the error*/

	pid_p = k_roll[0]*error_roll;
    13f6:	03 e2       	ldi	r16, 0x23	; 35
    13f8:	11 e0       	ldi	r17, 0x01	; 1
    13fa:	f8 01       	movw	r30, r16
    13fc:	b0 80       	ld	r11, Z
    13fe:	cb 9d       	mul	r28, r11
    1400:	b0 2c       	mov	r11, r0
    1402:	11 24       	eor	r1, r1
    1404:	b0 92 a6 01 	sts	0x01A6, r11	; 0x8001a6 <pid_p>
	
	delta_time_PID = system_tick_MG + 0.0000041*(float)TCNT0 - last_sample_roll;
    1408:	e0 90 aa 01 	lds	r14, 0x01AA	; 0x8001aa <system_tick_MG>
    140c:	f0 90 ab 01 	lds	r15, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    1410:	66 b5       	in	r22, 0x26	; 38
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    141c:	2b eb       	ldi	r18, 0xBB	; 187
    141e:	32 e9       	ldi	r19, 0x92	; 146
    1420:	49 e8       	ldi	r20, 0x89	; 137
    1422:	56 e3       	ldi	r21, 0x36	; 54
    1424:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1428:	2b 01       	movw	r4, r22
    142a:	3c 01       	movw	r6, r24
    142c:	b7 01       	movw	r22, r14
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1436:	9b 01       	movw	r18, r22
    1438:	ac 01       	movw	r20, r24
    143a:	c3 01       	movw	r24, r6
    143c:	b2 01       	movw	r22, r4
    143e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    1442:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <last_sample_roll>
    1446:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <last_sample_roll+0x1>
    144a:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <last_sample_roll+0x2>
    144e:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <last_sample_roll+0x3>
    1452:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    1456:	6b 01       	movw	r12, r22
    1458:	7c 01       	movw	r14, r24
    145a:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <delta_time_PID>
    145e:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <delta_time_PID+0x1>
    1462:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <delta_time_PID+0x2>
    1466:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <delta_time_PID+0x3>

	pid_i = pid_i+(k_roll[1]*error_roll)*delta_time_PID;
    146a:	d0 e0       	ldi	r29, 0x00	; 0
    146c:	f8 01       	movw	r30, r16
    146e:	81 81       	ldd	r24, Z+1	; 0x01
    1470:	8c 9f       	mul	r24, r28
    1472:	b0 01       	movw	r22, r0
    1474:	8d 9f       	mul	r24, r29
    1476:	70 0d       	add	r23, r0
    1478:	11 24       	eor	r1, r1
    147a:	07 2e       	mov	r0, r23
    147c:	00 0c       	add	r0, r0
    147e:	88 0b       	sbc	r24, r24
    1480:	99 0b       	sbc	r25, r25
    1482:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    1486:	a7 01       	movw	r20, r14
    1488:	96 01       	movw	r18, r12
    148a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    148e:	2b 01       	movw	r4, r22
    1490:	3c 01       	movw	r6, r24
    1492:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <pid_i>
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    14a0:	9b 01       	movw	r18, r22
    14a2:	ac 01       	movw	r20, r24
    14a4:	c3 01       	movw	r24, r6
    14a6:	b2 01       	movw	r22, r4
    14a8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    14ac:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    14b0:	a6 2e       	mov	r10, r22
    14b2:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <pid_i>

	pid_d = k_roll[2]*((error_roll - error_roll_previous)/delta_time_PID);
    14b6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <error_roll_previous>
    14ba:	be 01       	movw	r22, r28
    14bc:	68 1b       	sub	r22, r24
    14be:	71 09       	sbc	r23, r1
    14c0:	07 2e       	mov	r0, r23
    14c2:	00 0c       	add	r0, r0
    14c4:	88 0b       	sbc	r24, r24
    14c6:	99 0b       	sbc	r25, r25
    14c8:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    14cc:	a7 01       	movw	r20, r14
    14ce:	96 01       	movw	r18, r12
    14d0:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
    14d4:	6b 01       	movw	r12, r22
    14d6:	7c 01       	movw	r14, r24
    14d8:	f8 01       	movw	r30, r16
    14da:	62 81       	ldd	r22, Z+2	; 0x02
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	c7 01       	movw	r24, r14
    14ec:	b6 01       	movw	r22, r12
    14ee:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    14f2:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    14f6:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <pid_d>

	/*The final PID values is the sum of each of this 3 parts*/
	PID[1] = pid_p + pid_i + pid_d;
    14fa:	6a 0d       	add	r22, r10
    14fc:	b6 0e       	add	r11, r22
    14fe:	b0 92 9d 01 	sts	0x019D, r11	; 0x80019d <PID+0x1>
	
	last_sample_roll = system_tick_MG + 0.0000041*(float)TCNT0;
    1502:	c0 91 aa 01 	lds	r28, 0x01AA	; 0x8001aa <system_tick_MG>
    1506:	d0 91 ab 01 	lds	r29, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    150a:	66 b5       	in	r22, 0x26	; 38
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1516:	2b eb       	ldi	r18, 0xBB	; 187
    1518:	32 e9       	ldi	r19, 0x92	; 146
    151a:	49 e8       	ldi	r20, 0x89	; 137
    151c:	56 e3       	ldi	r21, 0x36	; 54
    151e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1522:	6b 01       	movw	r12, r22
    1524:	7c 01       	movw	r14, r24
    1526:	be 01       	movw	r22, r28
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	c7 01       	movw	r24, r14
    1536:	b6 01       	movw	r22, r12
    1538:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    153c:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <last_sample_roll>
    1540:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <last_sample_roll+0x1>
    1544:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <last_sample_roll+0x2>
    1548:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <last_sample_roll+0x3>

}
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	df 90       	pop	r13
    155a:	cf 90       	pop	r12
    155c:	bf 90       	pop	r11
    155e:	af 90       	pop	r10
    1560:	7f 90       	pop	r7
    1562:	6f 90       	pop	r6
    1564:	5f 90       	pop	r5
    1566:	4f 90       	pop	r4
    1568:	08 95       	ret

0000156a <PID_Yaw>:

void PID_Yaw(){
    156a:	4f 92       	push	r4
    156c:	5f 92       	push	r5
    156e:	6f 92       	push	r6
    1570:	7f 92       	push	r7
    1572:	af 92       	push	r10
    1574:	bf 92       	push	r11
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29

	error_yaw = map_values(gyroz, 0, 90, 0, 100) - yaw;
    1586:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <gyroz>
    158a:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <gyroz+0x1>
    158e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <gyroz+0x2>
    1592:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <gyroz+0x3>
    1596:	d0 91 62 01 	lds	r29, 0x0162	; 0x800162 <yaw>
    159a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__fixsfsi>
    159e:	24 e6       	ldi	r18, 0x64	; 100
    15a0:	62 02       	muls	r22, r18
    15a2:	c0 01       	movw	r24, r0
    15a4:	11 24       	eor	r1, r1
    15a6:	6a e5       	ldi	r22, 0x5A	; 90
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	0e 94 be 13 	call	0x277c	; 0x277c <__divmodhi4>
    15ae:	c6 2f       	mov	r28, r22
    15b0:	cd 1b       	sub	r28, r29
    15b2:	c0 93 a4 01 	sts	0x01A4, r28	; 0x8001a4 <error_yaw>

	/*Next the proportional value of the PID is just a proportional constant
	*multiplied by the error*/

	pid_p = k_yaw[0]*error_yaw;
    15b6:	03 e5       	ldi	r16, 0x53	; 83
    15b8:	11 e0       	ldi	r17, 0x01	; 1
    15ba:	f8 01       	movw	r30, r16
    15bc:	b0 80       	ld	r11, Z
    15be:	cb 9d       	mul	r28, r11
    15c0:	b0 2c       	mov	r11, r0
    15c2:	11 24       	eor	r1, r1
    15c4:	b0 92 a6 01 	sts	0x01A6, r11	; 0x8001a6 <pid_p>
	
	delta_time_PID = system_tick_MG + 0.0000041*(float)TCNT0 - last_sample_yaw;
    15c8:	e0 90 aa 01 	lds	r14, 0x01AA	; 0x8001aa <system_tick_MG>
    15cc:	f0 90 ab 01 	lds	r15, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    15d0:	66 b5       	in	r22, 0x26	; 38
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    15dc:	2b eb       	ldi	r18, 0xBB	; 187
    15de:	32 e9       	ldi	r19, 0x92	; 146
    15e0:	49 e8       	ldi	r20, 0x89	; 137
    15e2:	56 e3       	ldi	r21, 0x36	; 54
    15e4:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    15e8:	2b 01       	movw	r4, r22
    15ea:	3c 01       	movw	r6, r24
    15ec:	b7 01       	movw	r22, r14
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    15f6:	9b 01       	movw	r18, r22
    15f8:	ac 01       	movw	r20, r24
    15fa:	c3 01       	movw	r24, r6
    15fc:	b2 01       	movw	r22, r4
    15fe:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    1602:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <last_sample_yaw>
    1606:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <last_sample_yaw+0x1>
    160a:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <last_sample_yaw+0x2>
    160e:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <last_sample_yaw+0x3>
    1612:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    1616:	6b 01       	movw	r12, r22
    1618:	7c 01       	movw	r14, r24
    161a:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <delta_time_PID>
    161e:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <delta_time_PID+0x1>
    1622:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <delta_time_PID+0x2>
    1626:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <delta_time_PID+0x3>

	pid_i = pid_i+(k_yaw[1]*error_yaw)*delta_time_PID;
    162a:	d0 e0       	ldi	r29, 0x00	; 0
    162c:	f8 01       	movw	r30, r16
    162e:	81 81       	ldd	r24, Z+1	; 0x01
    1630:	8c 9f       	mul	r24, r28
    1632:	b0 01       	movw	r22, r0
    1634:	8d 9f       	mul	r24, r29
    1636:	70 0d       	add	r23, r0
    1638:	11 24       	eor	r1, r1
    163a:	07 2e       	mov	r0, r23
    163c:	00 0c       	add	r0, r0
    163e:	88 0b       	sbc	r24, r24
    1640:	99 0b       	sbc	r25, r25
    1642:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    1646:	a7 01       	movw	r20, r14
    1648:	96 01       	movw	r18, r12
    164a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    164e:	2b 01       	movw	r4, r22
    1650:	3c 01       	movw	r6, r24
    1652:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <pid_i>
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	c3 01       	movw	r24, r6
    1666:	b2 01       	movw	r22, r4
    1668:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    166c:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    1670:	a6 2e       	mov	r10, r22
    1672:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <pid_i>

	pid_d = k_yaw[2]*((error_yaw - error_yaw_previous)/delta_time_PID);
    1676:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <error_yaw_previous>
    167a:	be 01       	movw	r22, r28
    167c:	68 1b       	sub	r22, r24
    167e:	71 09       	sbc	r23, r1
    1680:	07 2e       	mov	r0, r23
    1682:	00 0c       	add	r0, r0
    1684:	88 0b       	sbc	r24, r24
    1686:	99 0b       	sbc	r25, r25
    1688:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    168c:	a7 01       	movw	r20, r14
    168e:	96 01       	movw	r18, r12
    1690:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
    1694:	6b 01       	movw	r12, r22
    1696:	7c 01       	movw	r14, r24
    1698:	f8 01       	movw	r30, r16
    169a:	62 81       	ldd	r22, Z+2	; 0x02
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    16a6:	9b 01       	movw	r18, r22
    16a8:	ac 01       	movw	r20, r24
    16aa:	c7 01       	movw	r24, r14
    16ac:	b6 01       	movw	r22, r12
    16ae:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    16b2:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    16b6:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <pid_d>

	/*The final PID values is the sum of each of this 3 parts*/
	PID[2] = pid_p + pid_i + pid_d;
    16ba:	6a 0d       	add	r22, r10
    16bc:	b6 0e       	add	r11, r22
    16be:	b0 92 9e 01 	sts	0x019E, r11	; 0x80019e <PID+0x2>
	
	last_sample_yaw = system_tick_MG + 0.0000041*(float)TCNT0;
    16c2:	c0 91 aa 01 	lds	r28, 0x01AA	; 0x8001aa <system_tick_MG>
    16c6:	d0 91 ab 01 	lds	r29, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    16ca:	66 b5       	in	r22, 0x26	; 38
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    16d6:	2b eb       	ldi	r18, 0xBB	; 187
    16d8:	32 e9       	ldi	r19, 0x92	; 146
    16da:	49 e8       	ldi	r20, 0x89	; 137
    16dc:	56 e3       	ldi	r21, 0x36	; 54
    16de:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    16e2:	6b 01       	movw	r12, r22
    16e4:	7c 01       	movw	r14, r24
    16e6:	be 01       	movw	r22, r28
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	c7 01       	movw	r24, r14
    16f6:	b6 01       	movw	r22, r12
    16f8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    16fc:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <last_sample_yaw>
    1700:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <last_sample_yaw+0x1>
    1704:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <last_sample_yaw+0x2>
    1708:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <last_sample_yaw+0x3>

}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	df 90       	pop	r13
    171a:	cf 90       	pop	r12
    171c:	bf 90       	pop	r11
    171e:	af 90       	pop	r10
    1720:	7f 90       	pop	r7
    1722:	6f 90       	pop	r6
    1724:	5f 90       	pop	r5
    1726:	4f 90       	pop	r4
    1728:	08 95       	ret

0000172a <update_PIDs>:

void update_PIDs(){
	if (throttle > 5)
    172a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <throttle>
    172e:	86 30       	cpi	r24, 0x06	; 6
    1730:	50 f1       	brcs	.+84     	; 0x1786 <update_PIDs+0x5c>
	{
		PID_Pitch();
    1732:	0e 94 05 09 	call	0x120a	; 0x120a <PID_Pitch>
		PID_Roll();
    1736:	0e 94 dd 09 	call	0x13ba	; 0x13ba <PID_Roll>
		PID_Yaw();
    173a:	0e 94 b5 0a 	call	0x156a	; 0x156a <PID_Yaw>
		
		motor1 = throttle + PID[0] - PID[1] + PID[2];
    173e:	ec e9       	ldi	r30, 0x9C	; 156
    1740:	f1 e0       	ldi	r31, 0x01	; 1
    1742:	30 81       	ld	r19, Z
    1744:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <throttle>
    1748:	21 81       	ldd	r18, Z+1	; 0x01
    174a:	92 81       	ldd	r25, Z+2	; 0x02
    174c:	83 0f       	add	r24, r19
    174e:	89 0f       	add	r24, r25
    1750:	82 1b       	sub	r24, r18
    1752:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <motor1>
		motor2 = throttle + PID[0] + PID[1] - PID[2];
    1756:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <throttle>
    175a:	43 2f       	mov	r20, r19
    175c:	42 0f       	add	r20, r18
    175e:	84 0f       	add	r24, r20
    1760:	89 1b       	sub	r24, r25
    1762:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <motor2>
		motor3 = throttle - PID[0] + PID[1] + PID[2];
    1766:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <throttle>
    176a:	42 2f       	mov	r20, r18
    176c:	49 0f       	add	r20, r25
    176e:	84 0f       	add	r24, r20
    1770:	83 1b       	sub	r24, r19
    1772:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <motor3>
		motor4 = throttle - PID[0] - PID[1] - PID[2];
    1776:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <throttle>
    177a:	83 1b       	sub	r24, r19
    177c:	82 1b       	sub	r24, r18
    177e:	89 1b       	sub	r24, r25
    1780:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <motor4>
    1784:	08 95       	ret
		}else{
		motor1 = 5;
    1786:	85 e0       	ldi	r24, 0x05	; 5
    1788:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <motor1>
		motor2 = 5;
    178c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <motor2>
		motor3 = 5;
    1790:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <motor3>
		motor4 = 5;
    1794:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <motor4>
    1798:	08 95       	ret

0000179a <update_motors>:
	}
}

void update_motors(){
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    179e:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <motor3>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    17a2:	45 36       	cpi	r20, 0x65	; 101
    17a4:	1c f4       	brge	.+6      	; 0x17ac <update_motors+0x12>
	{
		return max;
		}else{
		if(value < min){
    17a6:	45 30       	cpi	r20, 0x05	; 5
    17a8:	24 f4       	brge	.+8      	; 0x17b2 <update_motors+0x18>
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <update_motors+0x16>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    17ac:	44 e6       	ldi	r20, 0x64	; 100
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <update_motors+0x18>
		}else{
		if(value < min){
			return min;
    17b0:	45 e0       	ldi	r20, 0x05	; 5
	}
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    17b2:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <motor1>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    17b6:	65 36       	cpi	r22, 0x65	; 101
    17b8:	1c f4       	brge	.+6      	; 0x17c0 <update_motors+0x26>
	{
		return max;
		}else{
		if(value < min){
    17ba:	65 30       	cpi	r22, 0x05	; 5
    17bc:	24 f4       	brge	.+8      	; 0x17c6 <update_motors+0x2c>
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <update_motors+0x2a>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    17c0:	64 e6       	ldi	r22, 0x64	; 100
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <update_motors+0x2c>
		}else{
		if(value < min){
			return min;
    17c4:	65 e0       	ldi	r22, 0x05	; 5
	}
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    17c6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <motor2>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    17ca:	85 36       	cpi	r24, 0x65	; 101
    17cc:	1c f4       	brge	.+6      	; 0x17d4 <update_motors+0x3a>
	{
		return max;
		}else{
		if(value < min){
    17ce:	85 30       	cpi	r24, 0x05	; 5
    17d0:	24 f4       	brge	.+8      	; 0x17da <update_motors+0x40>
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <update_motors+0x3e>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    17d4:	84 e6       	ldi	r24, 0x64	; 100
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <update_motors+0x40>
		}else{
		if(value < min){
			return min;
    17d8:	85 e0       	ldi	r24, 0x05	; 5
	}
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    17da:	01 e0       	ldi	r16, 0x01	; 1
    17dc:	10 e0       	ldi	r17, 0x00	; 0
    17de:	24 ef       	ldi	r18, 0xF4	; 244
    17e0:	31 e0       	ldi	r19, 0x01	; 1
    17e2:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <timer1_16bit_PWM_ABC>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
    17e6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <motor4>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    17ea:	85 36       	cpi	r24, 0x65	; 101
    17ec:	1c f4       	brge	.+6      	; 0x17f4 <update_motors+0x5a>
	{
		return max;
		}else{
		if(value < min){
    17ee:	85 30       	cpi	r24, 0x05	; 5
    17f0:	24 f4       	brge	.+8      	; 0x17fa <update_motors+0x60>
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <update_motors+0x5e>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    17f4:	84 e6       	ldi	r24, 0x64	; 100
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <update_motors+0x60>
		}else{
		if(value < min){
			return min;
    17f8:	85 e0       	ldi	r24, 0x05	; 5
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	64 ef       	ldi	r22, 0xF4	; 244
    1800:	71 e0       	ldi	r23, 0x01	; 1
    1802:	0e 94 21 10 	call	0x2042	; 0x2042 <timer3_16bit_PWM_A>
}
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	08 95       	ret

0000180c <Int_6_En>:
	PCMSK0 = reg;
	PCIFR = 1;
}

void Pin_Change_Disen(){
	PCICR = (0 << PCIE0);
    180c:	8f b7       	in	r24, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	e6 9a       	sbi	0x1c, 6	; 28
    1812:	ee 9a       	sbi	0x1d, 6	; 29
    1814:	8f bf       	out	0x3f, r24	; 63
    1816:	08 95       	ret

00001818 <Interrupt_Init_Rising_INT6>:
    1818:	cf 93       	push	r28
    181a:	cf b7       	in	r28, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	8c b3       	in	r24, 0x1c	; 28
    1820:	8c bb       	out	0x1c, r24	; 28
    1822:	ea e6       	ldi	r30, 0x6A	; 106
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 63       	ori	r24, 0x30	; 48
    182a:	80 83       	st	Z, r24
    182c:	0e 94 06 0c 	call	0x180c	; 0x180c <Int_6_En>
    1830:	cf bf       	out	0x3f, r28	; 63
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <Interrupt_Init_Falling_INT6>:
    1836:	cf 93       	push	r28
    1838:	cf b7       	in	r28, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	e6 9a       	sbi	0x1c, 6	; 28
    183e:	ea e6       	ldi	r30, 0x6A	; 106
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	8f 7e       	andi	r24, 0xEF	; 239
    1846:	80 83       	st	Z, r24
    1848:	0e 94 06 0c 	call	0x180c	; 0x180c <Int_6_En>
    184c:	cf bf       	out	0x3f, r28	; 63
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <Pin_Change_En>:
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1858:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    185c:	9b bb       	out	0x1b, r25	; 27
    185e:	08 95       	ret

00001860 <__vector_7>:
}




ISR(INT6_vect){
    1860:	1f 92       	push	r1
    1862:	0f 92       	push	r0
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	0f 92       	push	r0
    1868:	11 24       	eor	r1, r1
    186a:	4f 92       	push	r4
    186c:	5f 92       	push	r5
    186e:	6f 92       	push	r6
    1870:	7f 92       	push	r7
    1872:	8f 92       	push	r8
    1874:	9f 92       	push	r9
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	2f 93       	push	r18
    1884:	3f 93       	push	r19
    1886:	4f 93       	push	r20
    1888:	5f 93       	push	r21
    188a:	6f 93       	push	r22
    188c:	7f 93       	push	r23
    188e:	8f 93       	push	r24
    1890:	9f 93       	push	r25
    1892:	af 93       	push	r26
    1894:	bf 93       	push	r27
    1896:	cf 93       	push	r28
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
	if (flag_rx  == 0)
    189c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <flag_rx>
    18a0:	81 11       	cpse	r24, r1
    18a2:	5c c0       	rjmp	.+184    	; 0x195c <__vector_7+0xfc>
	{
		
		period = (system_tick_MG + 0.000004*TCNT0 - int_period);
    18a4:	e0 90 aa 01 	lds	r14, 0x01AA	; 0x8001aa <system_tick_MG>
    18a8:	f0 90 ab 01 	lds	r15, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    18ac:	66 b5       	in	r22, 0x26	; 38
    18ae:	80 90 5d 01 	lds	r8, 0x015D	; 0x80015d <int_period>
    18b2:	90 90 5e 01 	lds	r9, 0x015E	; 0x80015e <int_period+0x1>
    18b6:	a0 90 5f 01 	lds	r10, 0x015F	; 0x80015f <int_period+0x2>
    18ba:	b0 90 60 01 	lds	r11, 0x0160	; 0x800160 <int_period+0x3>
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    18c8:	2d eb       	ldi	r18, 0xBD	; 189
    18ca:	37 e3       	ldi	r19, 0x37	; 55
    18cc:	46 e8       	ldi	r20, 0x86	; 134
    18ce:	56 e3       	ldi	r21, 0x36	; 54
    18d0:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    18d4:	2b 01       	movw	r4, r22
    18d6:	3c 01       	movw	r6, r24
    18d8:	b7 01       	movw	r22, r14
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    18e2:	9b 01       	movw	r18, r22
    18e4:	ac 01       	movw	r20, r24
    18e6:	c3 01       	movw	r24, r6
    18e8:	b2 01       	movw	r22, r4
    18ea:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    18ee:	a5 01       	movw	r20, r10
    18f0:	94 01       	movw	r18, r8
    18f2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    18f6:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <period>
    18fa:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <period+0x1>
    18fe:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <period+0x2>
    1902:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <period+0x3>

		int_period = system_tick_MG + 0.000004*TCNT0; //To count the period of the wave in ms
    1906:	e0 90 aa 01 	lds	r14, 0x01AA	; 0x8001aa <system_tick_MG>
    190a:	f0 90 ab 01 	lds	r15, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    190e:	66 b5       	in	r22, 0x26	; 38
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    191a:	2d eb       	ldi	r18, 0xBD	; 189
    191c:	37 e3       	ldi	r19, 0x37	; 55
    191e:	46 e8       	ldi	r20, 0x86	; 134
    1920:	56 e3       	ldi	r21, 0x36	; 54
    1922:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1926:	4b 01       	movw	r8, r22
    1928:	5c 01       	movw	r10, r24
    192a:	b7 01       	movw	r22, r14
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1934:	9b 01       	movw	r18, r22
    1936:	ac 01       	movw	r20, r24
    1938:	c5 01       	movw	r24, r10
    193a:	b4 01       	movw	r22, r8
    193c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    1940:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <int_period>
    1944:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <int_period+0x1>
    1948:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <int_period+0x2>
    194c:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <int_period+0x3>
		
		Interrupt_Init_Falling_INT6();
    1950:	0e 94 1b 0c 	call	0x1836	; 0x1836 <Interrupt_Init_Falling_INT6>

		flag_rx = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <flag_rx>
    195a:	43 c0       	rjmp	.+134    	; 0x19e2 <__vector_7+0x182>

		}else{
		
		throttle = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    195c:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <system_tick_MG>
    1960:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    1964:	80 90 5d 01 	lds	r8, 0x015D	; 0x80015d <int_period>
    1968:	90 90 5e 01 	lds	r9, 0x015E	; 0x80015e <int_period+0x1>
    196c:	a0 90 5f 01 	lds	r10, 0x015F	; 0x80015f <int_period+0x2>
    1970:	b0 90 60 01 	lds	r11, 0x0160	; 0x800160 <int_period+0x3>
    1974:	c6 b5       	in	r28, 0x26	; 38
    1976:	c0 90 59 01 	lds	r12, 0x0159	; 0x800159 <period>
    197a:	d0 90 5a 01 	lds	r13, 0x015A	; 0x80015a <period+0x1>
    197e:	e0 90 5b 01 	lds	r14, 0x015B	; 0x80015b <period+0x2>
    1982:	f0 90 5c 01 	lds	r15, 0x015C	; 0x80015c <period+0x3>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    198e:	a5 01       	movw	r20, r10
    1990:	94 01       	movw	r18, r8
    1992:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    1996:	4b 01       	movw	r8, r22
    1998:	5c 01       	movw	r10, r24
    199a:	6c 2f       	mov	r22, r28
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    19a6:	2d eb       	ldi	r18, 0xBD	; 189
    19a8:	37 e3       	ldi	r19, 0x37	; 55
    19aa:	46 e8       	ldi	r20, 0x86	; 134
    19ac:	56 e3       	ldi	r21, 0x36	; 54
    19ae:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
    19b6:	c5 01       	movw	r24, r10
    19b8:	b4 01       	movw	r22, r8
    19ba:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	48 ec       	ldi	r20, 0xC8	; 200
    19c4:	52 e4       	ldi	r21, 0x42	; 66
    19c6:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    19ca:	a7 01       	movw	r20, r14
    19cc:	96 01       	movw	r18, r12
    19ce:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
    19d2:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    19d6:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <throttle>
		
		Interrupt_Init_Rising_INT6();
    19da:	0e 94 0c 0c 	call	0x1818	; 0x1818 <Interrupt_Init_Rising_INT6>

		flag_rx = 0;
    19de:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <flag_rx>
	}

}
    19e2:	ff 91       	pop	r31
    19e4:	ef 91       	pop	r30
    19e6:	cf 91       	pop	r28
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	9f 91       	pop	r25
    19ee:	8f 91       	pop	r24
    19f0:	7f 91       	pop	r23
    19f2:	6f 91       	pop	r22
    19f4:	5f 91       	pop	r21
    19f6:	4f 91       	pop	r20
    19f8:	3f 91       	pop	r19
    19fa:	2f 91       	pop	r18
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	bf 90       	pop	r11
    1a06:	af 90       	pop	r10
    1a08:	9f 90       	pop	r9
    1a0a:	8f 90       	pop	r8
    1a0c:	7f 90       	pop	r7
    1a0e:	6f 90       	pop	r6
    1a10:	5f 90       	pop	r5
    1a12:	4f 90       	pop	r4
    1a14:	0f 90       	pop	r0
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	0f 90       	pop	r0
    1a1a:	1f 90       	pop	r1
    1a1c:	18 95       	reti

00001a1e <__vector_9>:

ISR(PCINT0_vect){
    1a1e:	1f 92       	push	r1
    1a20:	0f 92       	push	r0
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	0f 92       	push	r0
    1a26:	11 24       	eor	r1, r1
    1a28:	8f 92       	push	r8
    1a2a:	9f 92       	push	r9
    1a2c:	af 92       	push	r10
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	cf 93       	push	r28
    1a4e:	ef 93       	push	r30
    1a50:	ff 93       	push	r31
	//check the ports, store before value, confront with actual
	//store new value
	
	uint8_t changedbits;
	uint8_t intreading = PINB;
    1a52:	93 b1       	in	r25, 0x03	; 3
	changedbits = intreading ^ portbhistory;
    1a54:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <portbhistory>
	portbhistory = intreading;
    1a58:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <portbhistory>
	if (flag_rx == 1)
    1a5c:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <flag_rx>
	{
		
	}
	

	switch(changedbits){
    1a60:	89 27       	eor	r24, r25
    1a62:	84 30       	cpi	r24, 0x04	; 4
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <__vector_9+0x4a>
    1a66:	50 c0       	rjmp	.+160    	; 0x1b08 <__vector_9+0xea>
    1a68:	18 f4       	brcc	.+6      	; 0x1a70 <__vector_9+0x52>
    1a6a:	82 30       	cpi	r24, 0x02	; 2
    1a6c:	41 f0       	breq	.+16     	; 0x1a7e <__vector_9+0x60>
    1a6e:	1a c1       	rjmp	.+564    	; 0x1ca4 <__vector_9+0x286>
    1a70:	88 30       	cpi	r24, 0x08	; 8
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <__vector_9+0x58>
    1a74:	8e c0       	rjmp	.+284    	; 0x1b92 <__vector_9+0x174>
    1a76:	80 31       	cpi	r24, 0x10	; 16
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <__vector_9+0x5e>
    1a7a:	d0 c0       	rjmp	.+416    	; 0x1c1c <__vector_9+0x1fe>
    1a7c:	13 c1       	rjmp	.+550    	; 0x1ca4 <__vector_9+0x286>
		case 1: //pcint0 changed
		break;

		case 2: //pcint1 changed
		//SCK - Yaw
		if (flag_rx == 1)
    1a7e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <flag_rx>
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <__vector_9+0x6a>
    1a86:	0e c1       	rjmp	.+540    	; 0x1ca4 <__vector_9+0x286>
		{
			yaw = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    1a88:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <system_tick_MG>
    1a8c:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    1a90:	80 90 5d 01 	lds	r8, 0x015D	; 0x80015d <int_period>
    1a94:	90 90 5e 01 	lds	r9, 0x015E	; 0x80015e <int_period+0x1>
    1a98:	a0 90 5f 01 	lds	r10, 0x015F	; 0x80015f <int_period+0x2>
    1a9c:	b0 90 60 01 	lds	r11, 0x0160	; 0x800160 <int_period+0x3>
    1aa0:	c6 b5       	in	r28, 0x26	; 38
    1aa2:	c0 90 59 01 	lds	r12, 0x0159	; 0x800159 <period>
    1aa6:	d0 90 5a 01 	lds	r13, 0x015A	; 0x80015a <period+0x1>
    1aaa:	e0 90 5b 01 	lds	r14, 0x015B	; 0x80015b <period+0x2>
    1aae:	f0 90 5c 01 	lds	r15, 0x015C	; 0x80015c <period+0x3>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1aba:	a5 01       	movw	r20, r10
    1abc:	94 01       	movw	r18, r8
    1abe:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    1ac2:	4b 01       	movw	r8, r22
    1ac4:	5c 01       	movw	r10, r24
    1ac6:	6c 2f       	mov	r22, r28
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    1ad2:	2d eb       	ldi	r18, 0xBD	; 189
    1ad4:	37 e3       	ldi	r19, 0x37	; 55
    1ad6:	46 e8       	ldi	r20, 0x86	; 134
    1ad8:	56 e3       	ldi	r21, 0x36	; 54
    1ada:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1ade:	9b 01       	movw	r18, r22
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	c5 01       	movw	r24, r10
    1ae4:	b4 01       	movw	r22, r8
    1ae6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	48 ec       	ldi	r20, 0xC8	; 200
    1af0:	52 e4       	ldi	r21, 0x42	; 66
    1af2:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1af6:	a7 01       	movw	r20, r14
    1af8:	96 01       	movw	r18, r12
    1afa:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
    1afe:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    1b02:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <yaw>
    1b06:	ce c0       	rjmp	.+412    	; 0x1ca4 <__vector_9+0x286>
		}
		break;

		case 4: //pcint2 changed
		//MOSI - Roll
		if (flag_rx == 1)
    1b08:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <flag_rx>
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <__vector_9+0xf4>
    1b10:	c9 c0       	rjmp	.+402    	; 0x1ca4 <__vector_9+0x286>
		{
			roll = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    1b12:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <system_tick_MG>
    1b16:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    1b1a:	80 90 5d 01 	lds	r8, 0x015D	; 0x80015d <int_period>
    1b1e:	90 90 5e 01 	lds	r9, 0x015E	; 0x80015e <int_period+0x1>
    1b22:	a0 90 5f 01 	lds	r10, 0x015F	; 0x80015f <int_period+0x2>
    1b26:	b0 90 60 01 	lds	r11, 0x0160	; 0x800160 <int_period+0x3>
    1b2a:	c6 b5       	in	r28, 0x26	; 38
    1b2c:	c0 90 59 01 	lds	r12, 0x0159	; 0x800159 <period>
    1b30:	d0 90 5a 01 	lds	r13, 0x015A	; 0x80015a <period+0x1>
    1b34:	e0 90 5b 01 	lds	r14, 0x015B	; 0x80015b <period+0x2>
    1b38:	f0 90 5c 01 	lds	r15, 0x015C	; 0x80015c <period+0x3>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1b44:	a5 01       	movw	r20, r10
    1b46:	94 01       	movw	r18, r8
    1b48:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    1b4c:	4b 01       	movw	r8, r22
    1b4e:	5c 01       	movw	r10, r24
    1b50:	6c 2f       	mov	r22, r28
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    1b5c:	2d eb       	ldi	r18, 0xBD	; 189
    1b5e:	37 e3       	ldi	r19, 0x37	; 55
    1b60:	46 e8       	ldi	r20, 0x86	; 134
    1b62:	56 e3       	ldi	r21, 0x36	; 54
    1b64:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1b68:	9b 01       	movw	r18, r22
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	c5 01       	movw	r24, r10
    1b6e:	b4 01       	movw	r22, r8
    1b70:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	48 ec       	ldi	r20, 0xC8	; 200
    1b7a:	52 e4       	ldi	r21, 0x42	; 66
    1b7c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1b80:	a7 01       	movw	r20, r14
    1b82:	96 01       	movw	r18, r12
    1b84:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
    1b88:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    1b8c:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <roll>
    1b90:	89 c0       	rjmp	.+274    	; 0x1ca4 <__vector_9+0x286>
		}
		break;

		case 8:  //pcint3 changed
		//MISO - Pitch
		if (flag_rx == 1)
    1b92:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <flag_rx>
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <__vector_9+0x17e>
    1b9a:	84 c0       	rjmp	.+264    	; 0x1ca4 <__vector_9+0x286>
		{
			pitch = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    1b9c:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <system_tick_MG>
    1ba0:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    1ba4:	80 90 5d 01 	lds	r8, 0x015D	; 0x80015d <int_period>
    1ba8:	90 90 5e 01 	lds	r9, 0x015E	; 0x80015e <int_period+0x1>
    1bac:	a0 90 5f 01 	lds	r10, 0x015F	; 0x80015f <int_period+0x2>
    1bb0:	b0 90 60 01 	lds	r11, 0x0160	; 0x800160 <int_period+0x3>
    1bb4:	c6 b5       	in	r28, 0x26	; 38
    1bb6:	c0 90 59 01 	lds	r12, 0x0159	; 0x800159 <period>
    1bba:	d0 90 5a 01 	lds	r13, 0x015A	; 0x80015a <period+0x1>
    1bbe:	e0 90 5b 01 	lds	r14, 0x015B	; 0x80015b <period+0x2>
    1bc2:	f0 90 5c 01 	lds	r15, 0x015C	; 0x80015c <period+0x3>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1bce:	a5 01       	movw	r20, r10
    1bd0:	94 01       	movw	r18, r8
    1bd2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    1bd6:	4b 01       	movw	r8, r22
    1bd8:	5c 01       	movw	r10, r24
    1bda:	6c 2f       	mov	r22, r28
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    1be6:	2d eb       	ldi	r18, 0xBD	; 189
    1be8:	37 e3       	ldi	r19, 0x37	; 55
    1bea:	46 e8       	ldi	r20, 0x86	; 134
    1bec:	56 e3       	ldi	r21, 0x36	; 54
    1bee:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1bf2:	9b 01       	movw	r18, r22
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	c5 01       	movw	r24, r10
    1bf8:	b4 01       	movw	r22, r8
    1bfa:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	48 ec       	ldi	r20, 0xC8	; 200
    1c04:	52 e4       	ldi	r21, 0x42	; 66
    1c06:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1c0a:	a7 01       	movw	r20, r14
    1c0c:	96 01       	movw	r18, r12
    1c0e:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
    1c12:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    1c16:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <pitch>
    1c1a:	44 c0       	rjmp	.+136    	; 0x1ca4 <__vector_9+0x286>
		}
		break;

		case 16: //pcint4 changed
		//PB4: AUX1
		if (flag_rx == 1)
    1c1c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <flag_rx>
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <__vector_9+0x208>
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <__vector_9+0x286>
		{
			aux1 = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    1c26:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <system_tick_MG>
    1c2a:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    1c2e:	80 90 5d 01 	lds	r8, 0x015D	; 0x80015d <int_period>
    1c32:	90 90 5e 01 	lds	r9, 0x015E	; 0x80015e <int_period+0x1>
    1c36:	a0 90 5f 01 	lds	r10, 0x015F	; 0x80015f <int_period+0x2>
    1c3a:	b0 90 60 01 	lds	r11, 0x0160	; 0x800160 <int_period+0x3>
    1c3e:	c6 b5       	in	r28, 0x26	; 38
    1c40:	c0 90 59 01 	lds	r12, 0x0159	; 0x800159 <period>
    1c44:	d0 90 5a 01 	lds	r13, 0x015A	; 0x80015a <period+0x1>
    1c48:	e0 90 5b 01 	lds	r14, 0x015B	; 0x80015b <period+0x2>
    1c4c:	f0 90 5c 01 	lds	r15, 0x015C	; 0x80015c <period+0x3>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 35 12 	call	0x246a	; 0x246a <__floatunsisf>
    1c58:	a5 01       	movw	r20, r10
    1c5a:	94 01       	movw	r18, r8
    1c5c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__subsf3>
    1c60:	4b 01       	movw	r8, r22
    1c62:	5c 01       	movw	r10, r24
    1c64:	6c 2f       	mov	r22, r28
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 37 12 	call	0x246e	; 0x246e <__floatsisf>
    1c70:	2d eb       	ldi	r18, 0xBD	; 189
    1c72:	37 e3       	ldi	r19, 0x37	; 55
    1c74:	46 e8       	ldi	r20, 0x86	; 134
    1c76:	56 e3       	ldi	r21, 0x36	; 54
    1c78:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1c7c:	9b 01       	movw	r18, r22
    1c7e:	ac 01       	movw	r20, r24
    1c80:	c5 01       	movw	r24, r10
    1c82:	b4 01       	movw	r22, r8
    1c84:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__addsf3>
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	48 ec       	ldi	r20, 0xC8	; 200
    1c8e:	52 e4       	ldi	r21, 0x42	; 66
    1c90:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__mulsf3>
    1c94:	a7 01       	movw	r20, r14
    1c96:	96 01       	movw	r18, r12
    1c98:	0e 94 8d 11 	call	0x231a	; 0x231a <__divsf3>
    1c9c:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    1ca0:	60 93 61 01 	sts	0x0161, r22	; 0x800161 <aux1>
		break;
		
		case 128: //pcint7 changed
		break;
	}
}
    1ca4:	ff 91       	pop	r31
    1ca6:	ef 91       	pop	r30
    1ca8:	cf 91       	pop	r28
    1caa:	bf 91       	pop	r27
    1cac:	af 91       	pop	r26
    1cae:	9f 91       	pop	r25
    1cb0:	8f 91       	pop	r24
    1cb2:	7f 91       	pop	r23
    1cb4:	6f 91       	pop	r22
    1cb6:	5f 91       	pop	r21
    1cb8:	4f 91       	pop	r20
    1cba:	3f 91       	pop	r19
    1cbc:	2f 91       	pop	r18
    1cbe:	ff 90       	pop	r15
    1cc0:	ef 90       	pop	r14
    1cc2:	df 90       	pop	r13
    1cc4:	cf 90       	pop	r12
    1cc6:	bf 90       	pop	r11
    1cc8:	af 90       	pop	r10
    1cca:	9f 90       	pop	r9
    1ccc:	8f 90       	pop	r8
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <interrupt_init>:

void interrupt_init(){
	Interrupt_Init_Rising_INT6();
    1cd8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <Interrupt_Init_Rising_INT6>
	Int_6_En();
    1cdc:	0e 94 06 0c 	call	0x180c	; 0x180c <Int_6_En>
	
	Pin_Change_En(0b10000000);
    1ce0:	80 e8       	ldi	r24, 0x80	; 128
    1ce2:	0e 94 29 0c 	call	0x1852	; 0x1852 <Pin_Change_En>
    1ce6:	08 95       	ret

00001ce8 <timer_8bit_setCLK>:
void timer_16bit_INT_init_3_TOP(){
	TIMSK3 |= (1 << ICIE3);
}

void timer_16bit_INT_init_3_BOTTOM(){
	TIMSK3 |= (1 << TOIE3);
    1ce8:	80 34       	cpi	r24, 0x40	; 64
    1cea:	91 05       	cpc	r25, r1
    1cec:	d1 f0       	breq	.+52     	; 0x1d22 <timer_8bit_setCLK+0x3a>
    1cee:	30 f4       	brcc	.+12     	; 0x1cfc <timer_8bit_setCLK+0x14>
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f0       	breq	.+26     	; 0x1d0e <timer_8bit_setCLK+0x26>
    1cf4:	88 30       	cpi	r24, 0x08	; 8
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	81 f0       	breq	.+32     	; 0x1d1a <timer_8bit_setCLK+0x32>
    1cfa:	1f c0       	rjmp	.+62     	; 0x1d3a <timer_8bit_setCLK+0x52>
    1cfc:	81 15       	cp	r24, r1
    1cfe:	21 e0       	ldi	r18, 0x01	; 1
    1d00:	92 07       	cpc	r25, r18
    1d02:	99 f0       	breq	.+38     	; 0x1d2a <timer_8bit_setCLK+0x42>
    1d04:	81 15       	cp	r24, r1
    1d06:	24 e0       	ldi	r18, 0x04	; 4
    1d08:	92 07       	cpc	r25, r18
    1d0a:	99 f0       	breq	.+38     	; 0x1d32 <timer_8bit_setCLK+0x4a>
    1d0c:	16 c0       	rjmp	.+44     	; 0x1d3a <timer_8bit_setCLK+0x52>
    1d0e:	85 b5       	in	r24, 0x25	; 37
    1d10:	81 60       	ori	r24, 0x01	; 1
    1d12:	85 bd       	out	0x25, r24	; 37
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	08 95       	ret
    1d1a:	25 b5       	in	r18, 0x25	; 37
    1d1c:	22 60       	ori	r18, 0x02	; 2
    1d1e:	25 bd       	out	0x25, r18	; 37
    1d20:	08 95       	ret
    1d22:	25 b5       	in	r18, 0x25	; 37
    1d24:	23 60       	ori	r18, 0x03	; 3
    1d26:	25 bd       	out	0x25, r18	; 37
    1d28:	08 95       	ret
    1d2a:	25 b5       	in	r18, 0x25	; 37
    1d2c:	24 60       	ori	r18, 0x04	; 4
    1d2e:	25 bd       	out	0x25, r18	; 37
    1d30:	08 95       	ret
    1d32:	25 b5       	in	r18, 0x25	; 37
    1d34:	26 60       	ori	r18, 0x06	; 6
    1d36:	25 bd       	out	0x25, r18	; 37
    1d38:	08 95       	ret
    1d3a:	85 b5       	in	r24, 0x25	; 37
    1d3c:	81 60       	ori	r24, 0x01	; 1
    1d3e:	85 bd       	out	0x25, r24	; 37
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	08 95       	ret

00001d46 <timer_8bit_CTC_init>:
    1d46:	cf 93       	push	r28
    1d48:	c8 2f       	mov	r28, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	22 e0       	ldi	r18, 0x02	; 2
    1d4e:	24 bd       	out	0x24, r18	; 36
    1d50:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <timer_8bit_setCLK>
    1d54:	c7 bd       	out	0x27, r28	; 39
    1d56:	cf 91       	pop	r28
    1d58:	08 95       	ret

00001d5a <timer_8bit_INT_init_COMPA>:
    1d5a:	ee e6       	ldi	r30, 0x6E	; 110
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	82 60       	ori	r24, 0x02	; 2
    1d62:	80 83       	st	Z, r24
    1d64:	08 95       	ret

00001d66 <__vector_21>:
    1d66:	1f 92       	push	r1
    1d68:	0f 92       	push	r0
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	0f 92       	push	r0
    1d6e:	11 24       	eor	r1, r1
    1d70:	2f 93       	push	r18
    1d72:	8f 93       	push	r24
    1d74:	9f 93       	push	r25
    1d76:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <system_tick_MG>
    1d7a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <system_tick_MG+0x1>
    1d84:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <system_tick_MG>
    1d88:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <system_tick_MG_p>
    1d8c:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <system_tick_MG_p+0x1>
    1d90:	88 50       	subi	r24, 0x08	; 8
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <system_tick_MG_p+0x1>
    1d98:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <system_tick_MG_p>
    1d9c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <system_tick_MG_p>
    1da0:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <system_tick_MG_p+0x1>
    1da4:	87 30       	cpi	r24, 0x07	; 7
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	48 f0       	brcs	.+18     	; 0x1dbc <__vector_21+0x56>
    1daa:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <system_tick_MG_p_mod>
    1dae:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <system_tick_MG_p_mod+0x1>
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <system_tick_MG_p_mod+0x1>
    1db8:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <system_tick_MG_p_mod>
    1dbc:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <system_tick_MG>
    1dc0:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <system_tick_MG+0x1>
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	49 f4       	brne	.+18     	; 0x1dda <__vector_21+0x74>
    1dc8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <system_tick_MG_mod>
    1dcc:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <system_tick_MG_mod+0x1>
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <system_tick_MG_mod+0x1>
    1dd6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <system_tick_MG_mod>
    1dda:	88 b1       	in	r24, 0x08	; 8
    1ddc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <__vector_21+0x7e>
    1de0:	18 b8       	out	0x08, r1	; 8
    1de2:	05 c0       	rjmp	.+10     	; 0x1dee <__vector_21+0x88>
    1de4:	88 b1       	in	r24, 0x08	; 8
    1de6:	81 11       	cpse	r24, r1
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <__vector_21+0x88>
    1dea:	8f ef       	ldi	r24, 0xFF	; 255
    1dec:	88 b9       	out	0x08, r24	; 8
    1dee:	9f 91       	pop	r25
    1df0:	8f 91       	pop	r24
    1df2:	2f 91       	pop	r18
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	0f 90       	pop	r0
    1dfa:	1f 90       	pop	r1
    1dfc:	18 95       	reti

00001dfe <time_precision>:
    1dfe:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <system_tick_MG_p_mod>
    1e02:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <system_tick_MG_p_mod+0x1>
    1e06:	e6 b5       	in	r30, 0x26	; 38
    1e08:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <system_tick_MG_p>
    1e0c:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <system_tick_MG_p+0x1>
    1e10:	2e 0f       	add	r18, r30
    1e12:	31 1d       	adc	r19, r1
    1e14:	f9 01       	movw	r30, r18
    1e16:	e8 1b       	sub	r30, r24
    1e18:	f9 0b       	sbc	r31, r25
    1e1a:	cf 01       	movw	r24, r30
    1e1c:	46 1b       	sub	r20, r22
    1e1e:	57 0b       	sbc	r21, r23
    1e20:	84 1b       	sub	r24, r20
    1e22:	95 0b       	sbc	r25, r21
    1e24:	08 95       	ret

00001e26 <timer1_16bit_PWM_initABC>:
    1e26:	84 b1       	in	r24, 0x04	; 4
    1e28:	80 6e       	ori	r24, 0xE0	; 224
    1e2a:	84 b9       	out	0x04, r24	; 4
    1e2c:	e0 e8       	ldi	r30, 0x80	; 128
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	88 6a       	ori	r24, 0xA8	; 168
    1e34:	80 83       	st	Z, r24
    1e36:	80 e1       	ldi	r24, 0x10	; 16
    1e38:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1e3c:	08 95       	ret

00001e3e <timer_1_setCLK>:
    1e3e:	80 34       	cpi	r24, 0x40	; 64
    1e40:	91 05       	cpc	r25, r1
    1e42:	f1 f0       	breq	.+60     	; 0x1e80 <timer_1_setCLK+0x42>
    1e44:	30 f4       	brcc	.+12     	; 0x1e52 <timer_1_setCLK+0x14>
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f0       	breq	.+26     	; 0x1e64 <timer_1_setCLK+0x26>
    1e4a:	88 30       	cpi	r24, 0x08	; 8
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	91 f0       	breq	.+36     	; 0x1e74 <timer_1_setCLK+0x36>
    1e50:	29 c0       	rjmp	.+82     	; 0x1ea4 <timer_1_setCLK+0x66>
    1e52:	81 15       	cp	r24, r1
    1e54:	21 e0       	ldi	r18, 0x01	; 1
    1e56:	92 07       	cpc	r25, r18
    1e58:	c9 f0       	breq	.+50     	; 0x1e8c <timer_1_setCLK+0x4e>
    1e5a:	81 15       	cp	r24, r1
    1e5c:	24 e0       	ldi	r18, 0x04	; 4
    1e5e:	92 07       	cpc	r25, r18
    1e60:	d9 f0       	breq	.+54     	; 0x1e98 <timer_1_setCLK+0x5a>
    1e62:	20 c0       	rjmp	.+64     	; 0x1ea4 <timer_1_setCLK+0x66>
    1e64:	e1 e8       	ldi	r30, 0x81	; 129
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	81 60       	ori	r24, 0x01	; 1
    1e6c:	80 83       	st	Z, r24
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	08 95       	ret
    1e74:	e1 e8       	ldi	r30, 0x81	; 129
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	20 81       	ld	r18, Z
    1e7a:	22 60       	ori	r18, 0x02	; 2
    1e7c:	20 83       	st	Z, r18
    1e7e:	08 95       	ret
    1e80:	e1 e8       	ldi	r30, 0x81	; 129
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	20 81       	ld	r18, Z
    1e86:	23 60       	ori	r18, 0x03	; 3
    1e88:	20 83       	st	Z, r18
    1e8a:	08 95       	ret
    1e8c:	e1 e8       	ldi	r30, 0x81	; 129
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	20 81       	ld	r18, Z
    1e92:	24 60       	ori	r18, 0x04	; 4
    1e94:	20 83       	st	Z, r18
    1e96:	08 95       	ret
    1e98:	e1 e8       	ldi	r30, 0x81	; 129
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	20 81       	ld	r18, Z
    1e9e:	26 60       	ori	r18, 0x06	; 6
    1ea0:	20 83       	st	Z, r18
    1ea2:	08 95       	ret
    1ea4:	e1 e8       	ldi	r30, 0x81	; 129
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	81 60       	ori	r24, 0x01	; 1
    1eac:	80 83       	st	Z, r24
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	08 95       	ret

00001eb4 <timer1_16bit_PWM_ABC>:
    1eb4:	8f 92       	push	r8
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	d8 2e       	mov	r13, r24
    1ecc:	e6 2e       	mov	r14, r22
    1ece:	f4 2e       	mov	r15, r20
    1ed0:	e9 01       	movw	r28, r18
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <timer_1_setCLK>
    1ed8:	cc 0f       	add	r28, r28
    1eda:	dd 1f       	adc	r29, r29
    1edc:	9c 01       	movw	r18, r24
    1ede:	c2 9f       	mul	r28, r18
    1ee0:	c0 01       	movw	r24, r0
    1ee2:	c3 9f       	mul	r28, r19
    1ee4:	90 0d       	add	r25, r0
    1ee6:	d2 9f       	mul	r29, r18
    1ee8:	90 0d       	add	r25, r0
    1eea:	11 24       	eor	r1, r1
    1eec:	9c 01       	movw	r18, r24
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	74 e2       	ldi	r23, 0x24	; 36
    1ef6:	84 ef       	ldi	r24, 0xF4	; 244
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodsi4>
    1efe:	49 01       	movw	r8, r18
    1f00:	5a 01       	movw	r10, r20
    1f02:	36 95       	lsr	r19
    1f04:	27 95       	ror	r18
    1f06:	36 95       	lsr	r19
    1f08:	27 95       	ror	r18
    1f0a:	ab e7       	ldi	r26, 0x7B	; 123
    1f0c:	b4 e1       	ldi	r27, 0x14	; 20
    1f0e:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__umulhisi3>
    1f12:	96 95       	lsr	r25
    1f14:	87 95       	ror	r24
    1f16:	d8 9e       	mul	r13, r24
    1f18:	b0 01       	movw	r22, r0
    1f1a:	d9 9e       	mul	r13, r25
    1f1c:	70 0d       	add	r23, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	e8 9e       	mul	r14, r24
    1f22:	a0 01       	movw	r20, r0
    1f24:	e9 9e       	mul	r14, r25
    1f26:	50 0d       	add	r21, r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	f8 9e       	mul	r15, r24
    1f2c:	90 01       	movw	r18, r0
    1f2e:	f9 9e       	mul	r15, r25
    1f30:	30 0d       	add	r19, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	8f b7       	in	r24, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	90 92 87 00 	sts	0x0087, r9	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1f3c:	80 92 86 00 	sts	0x0086, r8	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1f40:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f44:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f48:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f4c:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f50:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
    1f54:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
    1f58:	8f bf       	out	0x3f, r24	; 63
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	bf 90       	pop	r11
    1f6a:	af 90       	pop	r10
    1f6c:	9f 90       	pop	r9
    1f6e:	8f 90       	pop	r8
    1f70:	08 95       	ret

00001f72 <__vector_20>:
    1f72:	1f 92       	push	r1
    1f74:	0f 92       	push	r0
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	0f 92       	push	r0
    1f7a:	11 24       	eor	r1, r1
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	0f 90       	pop	r0
    1f82:	1f 90       	pop	r1
    1f84:	18 95       	reti

00001f86 <__vector_16>:
    1f86:	1f 92       	push	r1
    1f88:	0f 92       	push	r0
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	0f 92       	push	r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	0f 90       	pop	r0
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	0f 90       	pop	r0
    1f96:	1f 90       	pop	r1
    1f98:	18 95       	reti

00001f9a <timer3_16bit_PWM_initA>:
    1f9a:	80 e4       	ldi	r24, 0x40	; 64
    1f9c:	87 b9       	out	0x07, r24	; 7
    1f9e:	e0 e9       	ldi	r30, 0x90	; 144
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	80 68       	ori	r24, 0x80	; 128
    1fa6:	80 83       	st	Z, r24
    1fa8:	e1 e9       	ldi	r30, 0x91	; 145
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	80 61       	ori	r24, 0x10	; 16
    1fb0:	80 83       	st	Z, r24
    1fb2:	08 95       	ret

00001fb4 <timer_init>:
    1fb4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <timer1_16bit_PWM_initABC>
    1fb8:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <timer3_16bit_PWM_initA>
    1fbc:	60 e4       	ldi	r22, 0x40	; 64
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	88 ef       	ldi	r24, 0xF8	; 248
    1fc2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <timer_8bit_CTC_init>
    1fc6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <timer_8bit_INT_init_COMPA>
    1fca:	08 95       	ret

00001fcc <timer_3_setCLK>:
    1fcc:	80 34       	cpi	r24, 0x40	; 64
    1fce:	91 05       	cpc	r25, r1
    1fd0:	f1 f0       	breq	.+60     	; 0x200e <timer_3_setCLK+0x42>
    1fd2:	30 f4       	brcc	.+12     	; 0x1fe0 <timer_3_setCLK+0x14>
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f0       	breq	.+26     	; 0x1ff2 <timer_3_setCLK+0x26>
    1fd8:	88 30       	cpi	r24, 0x08	; 8
    1fda:	91 05       	cpc	r25, r1
    1fdc:	91 f0       	breq	.+36     	; 0x2002 <timer_3_setCLK+0x36>
    1fde:	29 c0       	rjmp	.+82     	; 0x2032 <timer_3_setCLK+0x66>
    1fe0:	81 15       	cp	r24, r1
    1fe2:	21 e0       	ldi	r18, 0x01	; 1
    1fe4:	92 07       	cpc	r25, r18
    1fe6:	c9 f0       	breq	.+50     	; 0x201a <timer_3_setCLK+0x4e>
    1fe8:	81 15       	cp	r24, r1
    1fea:	24 e0       	ldi	r18, 0x04	; 4
    1fec:	92 07       	cpc	r25, r18
    1fee:	d9 f0       	breq	.+54     	; 0x2026 <timer_3_setCLK+0x5a>
    1ff0:	20 c0       	rjmp	.+64     	; 0x2032 <timer_3_setCLK+0x66>
    1ff2:	e1 e9       	ldi	r30, 0x91	; 145
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	81 60       	ori	r24, 0x01	; 1
    1ffa:	80 83       	st	Z, r24
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	08 95       	ret
    2002:	e1 e9       	ldi	r30, 0x91	; 145
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	20 81       	ld	r18, Z
    2008:	22 60       	ori	r18, 0x02	; 2
    200a:	20 83       	st	Z, r18
    200c:	08 95       	ret
    200e:	e1 e9       	ldi	r30, 0x91	; 145
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	20 81       	ld	r18, Z
    2014:	23 60       	ori	r18, 0x03	; 3
    2016:	20 83       	st	Z, r18
    2018:	08 95       	ret
    201a:	e1 e9       	ldi	r30, 0x91	; 145
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	20 81       	ld	r18, Z
    2020:	24 60       	ori	r18, 0x04	; 4
    2022:	20 83       	st	Z, r18
    2024:	08 95       	ret
    2026:	e1 e9       	ldi	r30, 0x91	; 145
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	20 81       	ld	r18, Z
    202c:	26 60       	ori	r18, 0x06	; 6
    202e:	20 83       	st	Z, r18
    2030:	08 95       	ret
    2032:	e1 e9       	ldi	r30, 0x91	; 145
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	81 60       	ori	r24, 0x01	; 1
    203a:	80 83       	st	Z, r24
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	08 95       	ret

00002042 <timer3_16bit_PWM_A>:
    2042:	cf 92       	push	r12
    2044:	df 92       	push	r13
    2046:	ef 92       	push	r14
    2048:	ff 92       	push	r15
    204a:	1f 93       	push	r17
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	18 2f       	mov	r17, r24
    2052:	eb 01       	movw	r28, r22
    2054:	ca 01       	movw	r24, r20
    2056:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <timer_3_setCLK>
    205a:	cc 0f       	add	r28, r28
    205c:	dd 1f       	adc	r29, r29
    205e:	9c 01       	movw	r18, r24
    2060:	c2 9f       	mul	r28, r18
    2062:	c0 01       	movw	r24, r0
    2064:	c3 9f       	mul	r28, r19
    2066:	90 0d       	add	r25, r0
    2068:	d2 9f       	mul	r29, r18
    206a:	90 0d       	add	r25, r0
    206c:	11 24       	eor	r1, r1
    206e:	9c 01       	movw	r18, r24
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	74 e2       	ldi	r23, 0x24	; 36
    2078:	84 ef       	ldi	r24, 0xF4	; 244
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodsi4>
    2080:	69 01       	movw	r12, r18
    2082:	7a 01       	movw	r14, r20
    2084:	36 95       	lsr	r19
    2086:	27 95       	ror	r18
    2088:	36 95       	lsr	r19
    208a:	27 95       	ror	r18
    208c:	ab e7       	ldi	r26, 0x7B	; 123
    208e:	b4 e1       	ldi	r27, 0x14	; 20
    2090:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__umulhisi3>
    2094:	96 95       	lsr	r25
    2096:	87 95       	ror	r24
    2098:	18 9f       	mul	r17, r24
    209a:	90 01       	movw	r18, r0
    209c:	19 9f       	mul	r17, r25
    209e:	30 0d       	add	r19, r0
    20a0:	11 24       	eor	r1, r1
    20a2:	8f b7       	in	r24, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	d0 92 97 00 	sts	0x0097, r13	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
    20aa:	c0 92 96 00 	sts	0x0096, r12	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
    20ae:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    20b2:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    20b6:	8f bf       	out	0x3f, r24	; 63
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	df 90       	pop	r13
    20c4:	cf 90       	pop	r12
    20c6:	08 95       	ret

000020c8 <__vector_35>:
}

ISR(TIMER3_OVF_vect){
    20c8:	1f 92       	push	r1
    20ca:	0f 92       	push	r0
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	0f 92       	push	r0
    20d0:	11 24       	eor	r1, r1
	
}
    20d2:	0f 90       	pop	r0
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	0f 90       	pop	r0
    20d8:	1f 90       	pop	r1
    20da:	18 95       	reti

000020dc <__vector_31>:

ISR(TIMER3_CAPT_vect){
    20dc:	1f 92       	push	r1
    20de:	0f 92       	push	r0
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	0f 92       	push	r0
    20e4:	11 24       	eor	r1, r1
	//system_tick_MG++;
    20e6:	0f 90       	pop	r0
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	0f 90       	pop	r0
    20ec:	1f 90       	pop	r1
    20ee:	18 95       	reti

000020f0 <USART_Init>:
    20f0:	a0 e0       	ldi	r26, 0x00	; 0
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	aa 1f       	adc	r26, r26
    20fa:	bb 1f       	adc	r27, r27
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	aa 1f       	adc	r26, r26
    2102:	bb 1f       	adc	r27, r27
    2104:	9c 01       	movw	r18, r24
    2106:	ad 01       	movw	r20, r26
    2108:	22 0f       	add	r18, r18
    210a:	33 1f       	adc	r19, r19
    210c:	44 1f       	adc	r20, r20
    210e:	55 1f       	adc	r21, r21
    2110:	22 0f       	add	r18, r18
    2112:	33 1f       	adc	r19, r19
    2114:	44 1f       	adc	r20, r20
    2116:	55 1f       	adc	r21, r21
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	74 e2       	ldi	r23, 0x24	; 36
    211c:	84 ef       	ldi	r24, 0xF4	; 244
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodsi4>
    2124:	21 50       	subi	r18, 0x01	; 1
    2126:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    212a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    212e:	e9 ec       	ldi	r30, 0xC9	; 201
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 e8       	ldi	r24, 0x80	; 128
    2134:	80 83       	st	Z, r24
    2136:	86 e0       	ldi	r24, 0x06	; 6
    2138:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    213c:	80 81       	ld	r24, Z
    213e:	88 61       	ori	r24, 0x18	; 24
    2140:	80 83       	st	Z, r24
    2142:	08 95       	ret

00002144 <USART_Transmit>:
    2144:	e8 ec       	ldi	r30, 0xC8	; 200
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	90 81       	ld	r25, Z
    214a:	95 ff       	sbrs	r25, 5
    214c:	fd cf       	rjmp	.-6      	; 0x2148 <USART_Transmit+0x4>
    214e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    2152:	08 95       	ret

00002154 <USART_String>:
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	66 23       	and	r22, r22
    215e:	51 f0       	breq	.+20     	; 0x2174 <USART_String+0x20>
    2160:	8c 01       	movw	r16, r24
    2162:	ec 01       	movw	r28, r24
    2164:	06 0f       	add	r16, r22
    2166:	11 1d       	adc	r17, r1
    2168:	89 91       	ld	r24, Y+
    216a:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
    216e:	c0 17       	cp	r28, r16
    2170:	d1 07       	cpc	r29, r17
    2172:	d1 f7       	brne	.-12     	; 0x2168 <USART_String+0x14>
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	08 95       	ret

0000217e <__vector_25>:
    217e:	1f 92       	push	r1
    2180:	0f 92       	push	r0
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	0f 92       	push	r0
    2186:	11 24       	eor	r1, r1
    2188:	2f 93       	push	r18
    218a:	3f 93       	push	r19
    218c:	4f 93       	push	r20
    218e:	5f 93       	push	r21
    2190:	6f 93       	push	r22
    2192:	7f 93       	push	r23
    2194:	8f 93       	push	r24
    2196:	9f 93       	push	r25
    2198:	af 93       	push	r26
    219a:	bf 93       	push	r27
    219c:	ef 93       	push	r30
    219e:	ff 93       	push	r31
    21a0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    21a4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <ISR_USART_Receive>
    21a8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ISR_USART_Receive>
    21ac:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
    21b0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ISR_USART_Receive>
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 8c 00 	call	0x118	; 0x118 <selected_value>
    21ba:	8a e0       	ldi	r24, 0x0A	; 10
    21bc:	0e 94 a2 10 	call	0x2144	; 0x2144 <USART_Transmit>
    21c0:	ff 91       	pop	r31
    21c2:	ef 91       	pop	r30
    21c4:	bf 91       	pop	r27
    21c6:	af 91       	pop	r26
    21c8:	9f 91       	pop	r25
    21ca:	8f 91       	pop	r24
    21cc:	7f 91       	pop	r23
    21ce:	6f 91       	pop	r22
    21d0:	5f 91       	pop	r21
    21d2:	4f 91       	pop	r20
    21d4:	3f 91       	pop	r19
    21d6:	2f 91       	pop	r18
    21d8:	0f 90       	pop	r0
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	0f 90       	pop	r0
    21de:	1f 90       	pop	r1
    21e0:	18 95       	reti

000021e2 <__subsf3>:
    21e2:	50 58       	subi	r21, 0x80	; 128

000021e4 <__addsf3>:
    21e4:	bb 27       	eor	r27, r27
    21e6:	aa 27       	eor	r26, r26
    21e8:	0e 94 09 11 	call	0x2212	; 0x2212 <__addsf3x>
    21ec:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__fp_round>
    21f0:	0e 94 a2 12 	call	0x2544	; 0x2544 <__fp_pscA>
    21f4:	38 f0       	brcs	.+14     	; 0x2204 <__addsf3+0x20>
    21f6:	0e 94 a9 12 	call	0x2552	; 0x2552 <__fp_pscB>
    21fa:	20 f0       	brcs	.+8      	; 0x2204 <__addsf3+0x20>
    21fc:	39 f4       	brne	.+14     	; 0x220c <__addsf3+0x28>
    21fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2200:	19 f4       	brne	.+6      	; 0x2208 <__addsf3+0x24>
    2202:	26 f4       	brtc	.+8      	; 0x220c <__addsf3+0x28>
    2204:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_nan>
    2208:	0e f4       	brtc	.+2      	; 0x220c <__addsf3+0x28>
    220a:	e0 95       	com	r30
    220c:	e7 fb       	bst	r30, 7
    220e:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_inf>

00002212 <__addsf3x>:
    2212:	e9 2f       	mov	r30, r25
    2214:	0e 94 c1 12 	call	0x2582	; 0x2582 <__fp_split3>
    2218:	58 f3       	brcs	.-42     	; 0x21f0 <__addsf3+0xc>
    221a:	ba 17       	cp	r27, r26
    221c:	62 07       	cpc	r22, r18
    221e:	73 07       	cpc	r23, r19
    2220:	84 07       	cpc	r24, r20
    2222:	95 07       	cpc	r25, r21
    2224:	20 f0       	brcs	.+8      	; 0x222e <__addsf3x+0x1c>
    2226:	79 f4       	brne	.+30     	; 0x2246 <__addsf3x+0x34>
    2228:	a6 f5       	brtc	.+104    	; 0x2292 <__addsf3x+0x80>
    222a:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__fp_zero>
    222e:	0e f4       	brtc	.+2      	; 0x2232 <__addsf3x+0x20>
    2230:	e0 95       	com	r30
    2232:	0b 2e       	mov	r0, r27
    2234:	ba 2f       	mov	r27, r26
    2236:	a0 2d       	mov	r26, r0
    2238:	0b 01       	movw	r0, r22
    223a:	b9 01       	movw	r22, r18
    223c:	90 01       	movw	r18, r0
    223e:	0c 01       	movw	r0, r24
    2240:	ca 01       	movw	r24, r20
    2242:	a0 01       	movw	r20, r0
    2244:	11 24       	eor	r1, r1
    2246:	ff 27       	eor	r31, r31
    2248:	59 1b       	sub	r21, r25
    224a:	99 f0       	breq	.+38     	; 0x2272 <__addsf3x+0x60>
    224c:	59 3f       	cpi	r21, 0xF9	; 249
    224e:	50 f4       	brcc	.+20     	; 0x2264 <__addsf3x+0x52>
    2250:	50 3e       	cpi	r21, 0xE0	; 224
    2252:	68 f1       	brcs	.+90     	; 0x22ae <__addsf3x+0x9c>
    2254:	1a 16       	cp	r1, r26
    2256:	f0 40       	sbci	r31, 0x00	; 0
    2258:	a2 2f       	mov	r26, r18
    225a:	23 2f       	mov	r18, r19
    225c:	34 2f       	mov	r19, r20
    225e:	44 27       	eor	r20, r20
    2260:	58 5f       	subi	r21, 0xF8	; 248
    2262:	f3 cf       	rjmp	.-26     	; 0x224a <__addsf3x+0x38>
    2264:	46 95       	lsr	r20
    2266:	37 95       	ror	r19
    2268:	27 95       	ror	r18
    226a:	a7 95       	ror	r26
    226c:	f0 40       	sbci	r31, 0x00	; 0
    226e:	53 95       	inc	r21
    2270:	c9 f7       	brne	.-14     	; 0x2264 <__addsf3x+0x52>
    2272:	7e f4       	brtc	.+30     	; 0x2292 <__addsf3x+0x80>
    2274:	1f 16       	cp	r1, r31
    2276:	ba 0b       	sbc	r27, r26
    2278:	62 0b       	sbc	r22, r18
    227a:	73 0b       	sbc	r23, r19
    227c:	84 0b       	sbc	r24, r20
    227e:	ba f0       	brmi	.+46     	; 0x22ae <__addsf3x+0x9c>
    2280:	91 50       	subi	r25, 0x01	; 1
    2282:	a1 f0       	breq	.+40     	; 0x22ac <__addsf3x+0x9a>
    2284:	ff 0f       	add	r31, r31
    2286:	bb 1f       	adc	r27, r27
    2288:	66 1f       	adc	r22, r22
    228a:	77 1f       	adc	r23, r23
    228c:	88 1f       	adc	r24, r24
    228e:	c2 f7       	brpl	.-16     	; 0x2280 <__addsf3x+0x6e>
    2290:	0e c0       	rjmp	.+28     	; 0x22ae <__addsf3x+0x9c>
    2292:	ba 0f       	add	r27, r26
    2294:	62 1f       	adc	r22, r18
    2296:	73 1f       	adc	r23, r19
    2298:	84 1f       	adc	r24, r20
    229a:	48 f4       	brcc	.+18     	; 0x22ae <__addsf3x+0x9c>
    229c:	87 95       	ror	r24
    229e:	77 95       	ror	r23
    22a0:	67 95       	ror	r22
    22a2:	b7 95       	ror	r27
    22a4:	f7 95       	ror	r31
    22a6:	9e 3f       	cpi	r25, 0xFE	; 254
    22a8:	08 f0       	brcs	.+2      	; 0x22ac <__addsf3x+0x9a>
    22aa:	b0 cf       	rjmp	.-160    	; 0x220c <__addsf3+0x28>
    22ac:	93 95       	inc	r25
    22ae:	88 0f       	add	r24, r24
    22b0:	08 f0       	brcs	.+2      	; 0x22b4 <__addsf3x+0xa2>
    22b2:	99 27       	eor	r25, r25
    22b4:	ee 0f       	add	r30, r30
    22b6:	97 95       	ror	r25
    22b8:	87 95       	ror	r24
    22ba:	08 95       	ret

000022bc <atan>:
    22bc:	df 93       	push	r29
    22be:	dd 27       	eor	r29, r29
    22c0:	b9 2f       	mov	r27, r25
    22c2:	bf 77       	andi	r27, 0x7F	; 127
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	16 16       	cp	r1, r22
    22ca:	17 06       	cpc	r1, r23
    22cc:	48 07       	cpc	r20, r24
    22ce:	5b 07       	cpc	r21, r27
    22d0:	18 f4       	brcc	.+6      	; 0x22d8 <atan+0x1c>
    22d2:	d9 2f       	mov	r29, r25
    22d4:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <inverse>
    22d8:	9f 93       	push	r25
    22da:	8f 93       	push	r24
    22dc:	7f 93       	push	r23
    22de:	6f 93       	push	r22
    22e0:	0e 94 a5 13 	call	0x274a	; 0x274a <square>
    22e4:	ec ea       	ldi	r30, 0xAC	; 172
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__fp_powser>
    22ec:	0e 94 b0 12 	call	0x2560	; 0x2560 <__fp_round>
    22f0:	2f 91       	pop	r18
    22f2:	3f 91       	pop	r19
    22f4:	4f 91       	pop	r20
    22f6:	5f 91       	pop	r21
    22f8:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3x>
    22fc:	dd 23       	and	r29, r29
    22fe:	51 f0       	breq	.+20     	; 0x2314 <atan+0x58>
    2300:	90 58       	subi	r25, 0x80	; 128
    2302:	a2 ea       	ldi	r26, 0xA2	; 162
    2304:	2a ed       	ldi	r18, 0xDA	; 218
    2306:	3f e0       	ldi	r19, 0x0F	; 15
    2308:	49 ec       	ldi	r20, 0xC9	; 201
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	d0 78       	andi	r29, 0x80	; 128
    230e:	5d 27       	eor	r21, r29
    2310:	0e 94 09 11 	call	0x2212	; 0x2212 <__addsf3x>
    2314:	df 91       	pop	r29
    2316:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__fp_round>

0000231a <__divsf3>:
    231a:	0e 94 a1 11 	call	0x2342	; 0x2342 <__divsf3x>
    231e:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__fp_round>
    2322:	0e 94 a9 12 	call	0x2552	; 0x2552 <__fp_pscB>
    2326:	58 f0       	brcs	.+22     	; 0x233e <__divsf3+0x24>
    2328:	0e 94 a2 12 	call	0x2544	; 0x2544 <__fp_pscA>
    232c:	40 f0       	brcs	.+16     	; 0x233e <__divsf3+0x24>
    232e:	29 f4       	brne	.+10     	; 0x233a <__divsf3+0x20>
    2330:	5f 3f       	cpi	r21, 0xFF	; 255
    2332:	29 f0       	breq	.+10     	; 0x233e <__divsf3+0x24>
    2334:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_inf>
    2338:	51 11       	cpse	r21, r1
    233a:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__fp_szero>
    233e:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_nan>

00002342 <__divsf3x>:
    2342:	0e 94 c1 12 	call	0x2582	; 0x2582 <__fp_split3>
    2346:	68 f3       	brcs	.-38     	; 0x2322 <__divsf3+0x8>

00002348 <__divsf3_pse>:
    2348:	99 23       	and	r25, r25
    234a:	b1 f3       	breq	.-20     	; 0x2338 <__divsf3+0x1e>
    234c:	55 23       	and	r21, r21
    234e:	91 f3       	breq	.-28     	; 0x2334 <__divsf3+0x1a>
    2350:	95 1b       	sub	r25, r21
    2352:	55 0b       	sbc	r21, r21
    2354:	bb 27       	eor	r27, r27
    2356:	aa 27       	eor	r26, r26
    2358:	62 17       	cp	r22, r18
    235a:	73 07       	cpc	r23, r19
    235c:	84 07       	cpc	r24, r20
    235e:	38 f0       	brcs	.+14     	; 0x236e <__divsf3_pse+0x26>
    2360:	9f 5f       	subi	r25, 0xFF	; 255
    2362:	5f 4f       	sbci	r21, 0xFF	; 255
    2364:	22 0f       	add	r18, r18
    2366:	33 1f       	adc	r19, r19
    2368:	44 1f       	adc	r20, r20
    236a:	aa 1f       	adc	r26, r26
    236c:	a9 f3       	breq	.-22     	; 0x2358 <__divsf3_pse+0x10>
    236e:	35 d0       	rcall	.+106    	; 0x23da <__divsf3_pse+0x92>
    2370:	0e 2e       	mov	r0, r30
    2372:	3a f0       	brmi	.+14     	; 0x2382 <__divsf3_pse+0x3a>
    2374:	e0 e8       	ldi	r30, 0x80	; 128
    2376:	32 d0       	rcall	.+100    	; 0x23dc <__divsf3_pse+0x94>
    2378:	91 50       	subi	r25, 0x01	; 1
    237a:	50 40       	sbci	r21, 0x00	; 0
    237c:	e6 95       	lsr	r30
    237e:	00 1c       	adc	r0, r0
    2380:	ca f7       	brpl	.-14     	; 0x2374 <__divsf3_pse+0x2c>
    2382:	2b d0       	rcall	.+86     	; 0x23da <__divsf3_pse+0x92>
    2384:	fe 2f       	mov	r31, r30
    2386:	29 d0       	rcall	.+82     	; 0x23da <__divsf3_pse+0x92>
    2388:	66 0f       	add	r22, r22
    238a:	77 1f       	adc	r23, r23
    238c:	88 1f       	adc	r24, r24
    238e:	bb 1f       	adc	r27, r27
    2390:	26 17       	cp	r18, r22
    2392:	37 07       	cpc	r19, r23
    2394:	48 07       	cpc	r20, r24
    2396:	ab 07       	cpc	r26, r27
    2398:	b0 e8       	ldi	r27, 0x80	; 128
    239a:	09 f0       	breq	.+2      	; 0x239e <__divsf3_pse+0x56>
    239c:	bb 0b       	sbc	r27, r27
    239e:	80 2d       	mov	r24, r0
    23a0:	bf 01       	movw	r22, r30
    23a2:	ff 27       	eor	r31, r31
    23a4:	93 58       	subi	r25, 0x83	; 131
    23a6:	5f 4f       	sbci	r21, 0xFF	; 255
    23a8:	3a f0       	brmi	.+14     	; 0x23b8 <__divsf3_pse+0x70>
    23aa:	9e 3f       	cpi	r25, 0xFE	; 254
    23ac:	51 05       	cpc	r21, r1
    23ae:	78 f0       	brcs	.+30     	; 0x23ce <__divsf3_pse+0x86>
    23b0:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_inf>
    23b4:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__fp_szero>
    23b8:	5f 3f       	cpi	r21, 0xFF	; 255
    23ba:	e4 f3       	brlt	.-8      	; 0x23b4 <__divsf3_pse+0x6c>
    23bc:	98 3e       	cpi	r25, 0xE8	; 232
    23be:	d4 f3       	brlt	.-12     	; 0x23b4 <__divsf3_pse+0x6c>
    23c0:	86 95       	lsr	r24
    23c2:	77 95       	ror	r23
    23c4:	67 95       	ror	r22
    23c6:	b7 95       	ror	r27
    23c8:	f7 95       	ror	r31
    23ca:	9f 5f       	subi	r25, 0xFF	; 255
    23cc:	c9 f7       	brne	.-14     	; 0x23c0 <__divsf3_pse+0x78>
    23ce:	88 0f       	add	r24, r24
    23d0:	91 1d       	adc	r25, r1
    23d2:	96 95       	lsr	r25
    23d4:	87 95       	ror	r24
    23d6:	97 f9       	bld	r25, 7
    23d8:	08 95       	ret
    23da:	e1 e0       	ldi	r30, 0x01	; 1
    23dc:	66 0f       	add	r22, r22
    23de:	77 1f       	adc	r23, r23
    23e0:	88 1f       	adc	r24, r24
    23e2:	bb 1f       	adc	r27, r27
    23e4:	62 17       	cp	r22, r18
    23e6:	73 07       	cpc	r23, r19
    23e8:	84 07       	cpc	r24, r20
    23ea:	ba 07       	cpc	r27, r26
    23ec:	20 f0       	brcs	.+8      	; 0x23f6 <__divsf3_pse+0xae>
    23ee:	62 1b       	sub	r22, r18
    23f0:	73 0b       	sbc	r23, r19
    23f2:	84 0b       	sbc	r24, r20
    23f4:	ba 0b       	sbc	r27, r26
    23f6:	ee 1f       	adc	r30, r30
    23f8:	88 f7       	brcc	.-30     	; 0x23dc <__divsf3_pse+0x94>
    23fa:	e0 95       	com	r30
    23fc:	08 95       	ret

000023fe <__fixsfsi>:
    23fe:	0e 94 06 12 	call	0x240c	; 0x240c <__fixunssfsi>
    2402:	68 94       	set
    2404:	b1 11       	cpse	r27, r1
    2406:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__fp_szero>
    240a:	08 95       	ret

0000240c <__fixunssfsi>:
    240c:	0e 94 c9 12 	call	0x2592	; 0x2592 <__fp_splitA>
    2410:	88 f0       	brcs	.+34     	; 0x2434 <__fixunssfsi+0x28>
    2412:	9f 57       	subi	r25, 0x7F	; 127
    2414:	98 f0       	brcs	.+38     	; 0x243c <__fixunssfsi+0x30>
    2416:	b9 2f       	mov	r27, r25
    2418:	99 27       	eor	r25, r25
    241a:	b7 51       	subi	r27, 0x17	; 23
    241c:	b0 f0       	brcs	.+44     	; 0x244a <__fixunssfsi+0x3e>
    241e:	e1 f0       	breq	.+56     	; 0x2458 <__fixunssfsi+0x4c>
    2420:	66 0f       	add	r22, r22
    2422:	77 1f       	adc	r23, r23
    2424:	88 1f       	adc	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	1a f0       	brmi	.+6      	; 0x2430 <__fixunssfsi+0x24>
    242a:	ba 95       	dec	r27
    242c:	c9 f7       	brne	.-14     	; 0x2420 <__fixunssfsi+0x14>
    242e:	14 c0       	rjmp	.+40     	; 0x2458 <__fixunssfsi+0x4c>
    2430:	b1 30       	cpi	r27, 0x01	; 1
    2432:	91 f0       	breq	.+36     	; 0x2458 <__fixunssfsi+0x4c>
    2434:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__fp_zero>
    2438:	b1 e0       	ldi	r27, 0x01	; 1
    243a:	08 95       	ret
    243c:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__fp_zero>
    2440:	67 2f       	mov	r22, r23
    2442:	78 2f       	mov	r23, r24
    2444:	88 27       	eor	r24, r24
    2446:	b8 5f       	subi	r27, 0xF8	; 248
    2448:	39 f0       	breq	.+14     	; 0x2458 <__fixunssfsi+0x4c>
    244a:	b9 3f       	cpi	r27, 0xF9	; 249
    244c:	cc f3       	brlt	.-14     	; 0x2440 <__fixunssfsi+0x34>
    244e:	86 95       	lsr	r24
    2450:	77 95       	ror	r23
    2452:	67 95       	ror	r22
    2454:	b3 95       	inc	r27
    2456:	d9 f7       	brne	.-10     	; 0x244e <__fixunssfsi+0x42>
    2458:	3e f4       	brtc	.+14     	; 0x2468 <__fixunssfsi+0x5c>
    245a:	90 95       	com	r25
    245c:	80 95       	com	r24
    245e:	70 95       	com	r23
    2460:	61 95       	neg	r22
    2462:	7f 4f       	sbci	r23, 0xFF	; 255
    2464:	8f 4f       	sbci	r24, 0xFF	; 255
    2466:	9f 4f       	sbci	r25, 0xFF	; 255
    2468:	08 95       	ret

0000246a <__floatunsisf>:
    246a:	e8 94       	clt
    246c:	09 c0       	rjmp	.+18     	; 0x2480 <__floatsisf+0x12>

0000246e <__floatsisf>:
    246e:	97 fb       	bst	r25, 7
    2470:	3e f4       	brtc	.+14     	; 0x2480 <__floatsisf+0x12>
    2472:	90 95       	com	r25
    2474:	80 95       	com	r24
    2476:	70 95       	com	r23
    2478:	61 95       	neg	r22
    247a:	7f 4f       	sbci	r23, 0xFF	; 255
    247c:	8f 4f       	sbci	r24, 0xFF	; 255
    247e:	9f 4f       	sbci	r25, 0xFF	; 255
    2480:	99 23       	and	r25, r25
    2482:	a9 f0       	breq	.+42     	; 0x24ae <__floatsisf+0x40>
    2484:	f9 2f       	mov	r31, r25
    2486:	96 e9       	ldi	r25, 0x96	; 150
    2488:	bb 27       	eor	r27, r27
    248a:	93 95       	inc	r25
    248c:	f6 95       	lsr	r31
    248e:	87 95       	ror	r24
    2490:	77 95       	ror	r23
    2492:	67 95       	ror	r22
    2494:	b7 95       	ror	r27
    2496:	f1 11       	cpse	r31, r1
    2498:	f8 cf       	rjmp	.-16     	; 0x248a <__floatsisf+0x1c>
    249a:	fa f4       	brpl	.+62     	; 0x24da <__floatsisf+0x6c>
    249c:	bb 0f       	add	r27, r27
    249e:	11 f4       	brne	.+4      	; 0x24a4 <__floatsisf+0x36>
    24a0:	60 ff       	sbrs	r22, 0
    24a2:	1b c0       	rjmp	.+54     	; 0x24da <__floatsisf+0x6c>
    24a4:	6f 5f       	subi	r22, 0xFF	; 255
    24a6:	7f 4f       	sbci	r23, 0xFF	; 255
    24a8:	8f 4f       	sbci	r24, 0xFF	; 255
    24aa:	9f 4f       	sbci	r25, 0xFF	; 255
    24ac:	16 c0       	rjmp	.+44     	; 0x24da <__floatsisf+0x6c>
    24ae:	88 23       	and	r24, r24
    24b0:	11 f0       	breq	.+4      	; 0x24b6 <__floatsisf+0x48>
    24b2:	96 e9       	ldi	r25, 0x96	; 150
    24b4:	11 c0       	rjmp	.+34     	; 0x24d8 <__floatsisf+0x6a>
    24b6:	77 23       	and	r23, r23
    24b8:	21 f0       	breq	.+8      	; 0x24c2 <__floatsisf+0x54>
    24ba:	9e e8       	ldi	r25, 0x8E	; 142
    24bc:	87 2f       	mov	r24, r23
    24be:	76 2f       	mov	r23, r22
    24c0:	05 c0       	rjmp	.+10     	; 0x24cc <__floatsisf+0x5e>
    24c2:	66 23       	and	r22, r22
    24c4:	71 f0       	breq	.+28     	; 0x24e2 <__floatsisf+0x74>
    24c6:	96 e8       	ldi	r25, 0x86	; 134
    24c8:	86 2f       	mov	r24, r22
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	2a f0       	brmi	.+10     	; 0x24da <__floatsisf+0x6c>
    24d0:	9a 95       	dec	r25
    24d2:	66 0f       	add	r22, r22
    24d4:	77 1f       	adc	r23, r23
    24d6:	88 1f       	adc	r24, r24
    24d8:	da f7       	brpl	.-10     	; 0x24d0 <__floatsisf+0x62>
    24da:	88 0f       	add	r24, r24
    24dc:	96 95       	lsr	r25
    24de:	87 95       	ror	r24
    24e0:	97 f9       	bld	r25, 7
    24e2:	08 95       	ret

000024e4 <__fp_inf>:
    24e4:	97 f9       	bld	r25, 7
    24e6:	9f 67       	ori	r25, 0x7F	; 127
    24e8:	80 e8       	ldi	r24, 0x80	; 128
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	08 95       	ret

000024f0 <__fp_nan>:
    24f0:	9f ef       	ldi	r25, 0xFF	; 255
    24f2:	80 ec       	ldi	r24, 0xC0	; 192
    24f4:	08 95       	ret

000024f6 <__fp_powser>:
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	1f 93       	push	r17
    24fc:	0f 93       	push	r16
    24fe:	ff 92       	push	r15
    2500:	ef 92       	push	r14
    2502:	df 92       	push	r13
    2504:	7b 01       	movw	r14, r22
    2506:	8c 01       	movw	r16, r24
    2508:	68 94       	set
    250a:	06 c0       	rjmp	.+12     	; 0x2518 <__fp_powser+0x22>
    250c:	da 2e       	mov	r13, r26
    250e:	ef 01       	movw	r28, r30
    2510:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3x>
    2514:	fe 01       	movw	r30, r28
    2516:	e8 94       	clt
    2518:	a5 91       	lpm	r26, Z+
    251a:	25 91       	lpm	r18, Z+
    251c:	35 91       	lpm	r19, Z+
    251e:	45 91       	lpm	r20, Z+
    2520:	55 91       	lpm	r21, Z+
    2522:	a6 f3       	brts	.-24     	; 0x250c <__fp_powser+0x16>
    2524:	ef 01       	movw	r28, r30
    2526:	0e 94 09 11 	call	0x2212	; 0x2212 <__addsf3x>
    252a:	fe 01       	movw	r30, r28
    252c:	97 01       	movw	r18, r14
    252e:	a8 01       	movw	r20, r16
    2530:	da 94       	dec	r13
    2532:	69 f7       	brne	.-38     	; 0x250e <__fp_powser+0x18>
    2534:	df 90       	pop	r13
    2536:	ef 90       	pop	r14
    2538:	ff 90       	pop	r15
    253a:	0f 91       	pop	r16
    253c:	1f 91       	pop	r17
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <__fp_pscA>:
    2544:	00 24       	eor	r0, r0
    2546:	0a 94       	dec	r0
    2548:	16 16       	cp	r1, r22
    254a:	17 06       	cpc	r1, r23
    254c:	18 06       	cpc	r1, r24
    254e:	09 06       	cpc	r0, r25
    2550:	08 95       	ret

00002552 <__fp_pscB>:
    2552:	00 24       	eor	r0, r0
    2554:	0a 94       	dec	r0
    2556:	12 16       	cp	r1, r18
    2558:	13 06       	cpc	r1, r19
    255a:	14 06       	cpc	r1, r20
    255c:	05 06       	cpc	r0, r21
    255e:	08 95       	ret

00002560 <__fp_round>:
    2560:	09 2e       	mov	r0, r25
    2562:	03 94       	inc	r0
    2564:	00 0c       	add	r0, r0
    2566:	11 f4       	brne	.+4      	; 0x256c <__fp_round+0xc>
    2568:	88 23       	and	r24, r24
    256a:	52 f0       	brmi	.+20     	; 0x2580 <__fp_round+0x20>
    256c:	bb 0f       	add	r27, r27
    256e:	40 f4       	brcc	.+16     	; 0x2580 <__fp_round+0x20>
    2570:	bf 2b       	or	r27, r31
    2572:	11 f4       	brne	.+4      	; 0x2578 <__fp_round+0x18>
    2574:	60 ff       	sbrs	r22, 0
    2576:	04 c0       	rjmp	.+8      	; 0x2580 <__fp_round+0x20>
    2578:	6f 5f       	subi	r22, 0xFF	; 255
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	8f 4f       	sbci	r24, 0xFF	; 255
    257e:	9f 4f       	sbci	r25, 0xFF	; 255
    2580:	08 95       	ret

00002582 <__fp_split3>:
    2582:	57 fd       	sbrc	r21, 7
    2584:	90 58       	subi	r25, 0x80	; 128
    2586:	44 0f       	add	r20, r20
    2588:	55 1f       	adc	r21, r21
    258a:	59 f0       	breq	.+22     	; 0x25a2 <__fp_splitA+0x10>
    258c:	5f 3f       	cpi	r21, 0xFF	; 255
    258e:	71 f0       	breq	.+28     	; 0x25ac <__fp_splitA+0x1a>
    2590:	47 95       	ror	r20

00002592 <__fp_splitA>:
    2592:	88 0f       	add	r24, r24
    2594:	97 fb       	bst	r25, 7
    2596:	99 1f       	adc	r25, r25
    2598:	61 f0       	breq	.+24     	; 0x25b2 <__fp_splitA+0x20>
    259a:	9f 3f       	cpi	r25, 0xFF	; 255
    259c:	79 f0       	breq	.+30     	; 0x25bc <__fp_splitA+0x2a>
    259e:	87 95       	ror	r24
    25a0:	08 95       	ret
    25a2:	12 16       	cp	r1, r18
    25a4:	13 06       	cpc	r1, r19
    25a6:	14 06       	cpc	r1, r20
    25a8:	55 1f       	adc	r21, r21
    25aa:	f2 cf       	rjmp	.-28     	; 0x2590 <__fp_split3+0xe>
    25ac:	46 95       	lsr	r20
    25ae:	f1 df       	rcall	.-30     	; 0x2592 <__fp_splitA>
    25b0:	08 c0       	rjmp	.+16     	; 0x25c2 <__fp_splitA+0x30>
    25b2:	16 16       	cp	r1, r22
    25b4:	17 06       	cpc	r1, r23
    25b6:	18 06       	cpc	r1, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	f1 cf       	rjmp	.-30     	; 0x259e <__fp_splitA+0xc>
    25bc:	86 95       	lsr	r24
    25be:	71 05       	cpc	r23, r1
    25c0:	61 05       	cpc	r22, r1
    25c2:	08 94       	sec
    25c4:	08 95       	ret

000025c6 <__fp_zero>:
    25c6:	e8 94       	clt

000025c8 <__fp_szero>:
    25c8:	bb 27       	eor	r27, r27
    25ca:	66 27       	eor	r22, r22
    25cc:	77 27       	eor	r23, r23
    25ce:	cb 01       	movw	r24, r22
    25d0:	97 f9       	bld	r25, 7
    25d2:	08 95       	ret

000025d4 <inverse>:
    25d4:	9b 01       	movw	r18, r22
    25d6:	ac 01       	movw	r20, r24
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	80 e8       	ldi	r24, 0x80	; 128
    25de:	9f e3       	ldi	r25, 0x3F	; 63
    25e0:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__divsf3>

000025e4 <__mulsf3>:
    25e4:	0e 94 05 13 	call	0x260a	; 0x260a <__mulsf3x>
    25e8:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__fp_round>
    25ec:	0e 94 a2 12 	call	0x2544	; 0x2544 <__fp_pscA>
    25f0:	38 f0       	brcs	.+14     	; 0x2600 <__mulsf3+0x1c>
    25f2:	0e 94 a9 12 	call	0x2552	; 0x2552 <__fp_pscB>
    25f6:	20 f0       	brcs	.+8      	; 0x2600 <__mulsf3+0x1c>
    25f8:	95 23       	and	r25, r21
    25fa:	11 f0       	breq	.+4      	; 0x2600 <__mulsf3+0x1c>
    25fc:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_inf>
    2600:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_nan>
    2604:	11 24       	eor	r1, r1
    2606:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__fp_szero>

0000260a <__mulsf3x>:
    260a:	0e 94 c1 12 	call	0x2582	; 0x2582 <__fp_split3>
    260e:	70 f3       	brcs	.-36     	; 0x25ec <__mulsf3+0x8>

00002610 <__mulsf3_pse>:
    2610:	95 9f       	mul	r25, r21
    2612:	c1 f3       	breq	.-16     	; 0x2604 <__mulsf3+0x20>
    2614:	95 0f       	add	r25, r21
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	55 1f       	adc	r21, r21
    261a:	62 9f       	mul	r22, r18
    261c:	f0 01       	movw	r30, r0
    261e:	72 9f       	mul	r23, r18
    2620:	bb 27       	eor	r27, r27
    2622:	f0 0d       	add	r31, r0
    2624:	b1 1d       	adc	r27, r1
    2626:	63 9f       	mul	r22, r19
    2628:	aa 27       	eor	r26, r26
    262a:	f0 0d       	add	r31, r0
    262c:	b1 1d       	adc	r27, r1
    262e:	aa 1f       	adc	r26, r26
    2630:	64 9f       	mul	r22, r20
    2632:	66 27       	eor	r22, r22
    2634:	b0 0d       	add	r27, r0
    2636:	a1 1d       	adc	r26, r1
    2638:	66 1f       	adc	r22, r22
    263a:	82 9f       	mul	r24, r18
    263c:	22 27       	eor	r18, r18
    263e:	b0 0d       	add	r27, r0
    2640:	a1 1d       	adc	r26, r1
    2642:	62 1f       	adc	r22, r18
    2644:	73 9f       	mul	r23, r19
    2646:	b0 0d       	add	r27, r0
    2648:	a1 1d       	adc	r26, r1
    264a:	62 1f       	adc	r22, r18
    264c:	83 9f       	mul	r24, r19
    264e:	a0 0d       	add	r26, r0
    2650:	61 1d       	adc	r22, r1
    2652:	22 1f       	adc	r18, r18
    2654:	74 9f       	mul	r23, r20
    2656:	33 27       	eor	r19, r19
    2658:	a0 0d       	add	r26, r0
    265a:	61 1d       	adc	r22, r1
    265c:	23 1f       	adc	r18, r19
    265e:	84 9f       	mul	r24, r20
    2660:	60 0d       	add	r22, r0
    2662:	21 1d       	adc	r18, r1
    2664:	82 2f       	mov	r24, r18
    2666:	76 2f       	mov	r23, r22
    2668:	6a 2f       	mov	r22, r26
    266a:	11 24       	eor	r1, r1
    266c:	9f 57       	subi	r25, 0x7F	; 127
    266e:	50 40       	sbci	r21, 0x00	; 0
    2670:	9a f0       	brmi	.+38     	; 0x2698 <__mulsf3_pse+0x88>
    2672:	f1 f0       	breq	.+60     	; 0x26b0 <__mulsf3_pse+0xa0>
    2674:	88 23       	and	r24, r24
    2676:	4a f0       	brmi	.+18     	; 0x268a <__mulsf3_pse+0x7a>
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	bb 1f       	adc	r27, r27
    267e:	66 1f       	adc	r22, r22
    2680:	77 1f       	adc	r23, r23
    2682:	88 1f       	adc	r24, r24
    2684:	91 50       	subi	r25, 0x01	; 1
    2686:	50 40       	sbci	r21, 0x00	; 0
    2688:	a9 f7       	brne	.-22     	; 0x2674 <__mulsf3_pse+0x64>
    268a:	9e 3f       	cpi	r25, 0xFE	; 254
    268c:	51 05       	cpc	r21, r1
    268e:	80 f0       	brcs	.+32     	; 0x26b0 <__mulsf3_pse+0xa0>
    2690:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_inf>
    2694:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__fp_szero>
    2698:	5f 3f       	cpi	r21, 0xFF	; 255
    269a:	e4 f3       	brlt	.-8      	; 0x2694 <__mulsf3_pse+0x84>
    269c:	98 3e       	cpi	r25, 0xE8	; 232
    269e:	d4 f3       	brlt	.-12     	; 0x2694 <__mulsf3_pse+0x84>
    26a0:	86 95       	lsr	r24
    26a2:	77 95       	ror	r23
    26a4:	67 95       	ror	r22
    26a6:	b7 95       	ror	r27
    26a8:	f7 95       	ror	r31
    26aa:	e7 95       	ror	r30
    26ac:	9f 5f       	subi	r25, 0xFF	; 255
    26ae:	c1 f7       	brne	.-16     	; 0x26a0 <__mulsf3_pse+0x90>
    26b0:	fe 2b       	or	r31, r30
    26b2:	88 0f       	add	r24, r24
    26b4:	91 1d       	adc	r25, r1
    26b6:	96 95       	lsr	r25
    26b8:	87 95       	ror	r24
    26ba:	97 f9       	bld	r25, 7
    26bc:	08 95       	ret
    26be:	19 f4       	brne	.+6      	; 0x26c6 <__mulsf3_pse+0xb6>
    26c0:	16 f4       	brtc	.+4      	; 0x26c6 <__mulsf3_pse+0xb6>
    26c2:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_nan>
    26c6:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__fp_mpack>

000026ca <sqrt>:
    26ca:	0e 94 c9 12 	call	0x2592	; 0x2592 <__fp_splitA>
    26ce:	b8 f3       	brcs	.-18     	; 0x26be <__mulsf3_pse+0xae>
    26d0:	99 23       	and	r25, r25
    26d2:	c9 f3       	breq	.-14     	; 0x26c6 <__mulsf3_pse+0xb6>
    26d4:	b6 f3       	brts	.-20     	; 0x26c2 <__mulsf3_pse+0xb2>
    26d6:	9f 57       	subi	r25, 0x7F	; 127
    26d8:	55 0b       	sbc	r21, r21
    26da:	87 ff       	sbrs	r24, 7
    26dc:	0e 94 b7 13 	call	0x276e	; 0x276e <__fp_norm2>
    26e0:	00 24       	eor	r0, r0
    26e2:	a0 e6       	ldi	r26, 0x60	; 96
    26e4:	40 ea       	ldi	r20, 0xA0	; 160
    26e6:	90 01       	movw	r18, r0
    26e8:	80 58       	subi	r24, 0x80	; 128
    26ea:	56 95       	lsr	r21
    26ec:	97 95       	ror	r25
    26ee:	28 f4       	brcc	.+10     	; 0x26fa <sqrt+0x30>
    26f0:	80 5c       	subi	r24, 0xC0	; 192
    26f2:	66 0f       	add	r22, r22
    26f4:	77 1f       	adc	r23, r23
    26f6:	88 1f       	adc	r24, r24
    26f8:	20 f0       	brcs	.+8      	; 0x2702 <sqrt+0x38>
    26fa:	26 17       	cp	r18, r22
    26fc:	37 07       	cpc	r19, r23
    26fe:	48 07       	cpc	r20, r24
    2700:	30 f4       	brcc	.+12     	; 0x270e <sqrt+0x44>
    2702:	62 1b       	sub	r22, r18
    2704:	73 0b       	sbc	r23, r19
    2706:	84 0b       	sbc	r24, r20
    2708:	20 29       	or	r18, r0
    270a:	31 29       	or	r19, r1
    270c:	4a 2b       	or	r20, r26
    270e:	a6 95       	lsr	r26
    2710:	17 94       	ror	r1
    2712:	07 94       	ror	r0
    2714:	20 25       	eor	r18, r0
    2716:	31 25       	eor	r19, r1
    2718:	4a 27       	eor	r20, r26
    271a:	58 f7       	brcc	.-42     	; 0x26f2 <sqrt+0x28>
    271c:	66 0f       	add	r22, r22
    271e:	77 1f       	adc	r23, r23
    2720:	88 1f       	adc	r24, r24
    2722:	20 f0       	brcs	.+8      	; 0x272c <sqrt+0x62>
    2724:	26 17       	cp	r18, r22
    2726:	37 07       	cpc	r19, r23
    2728:	48 07       	cpc	r20, r24
    272a:	30 f4       	brcc	.+12     	; 0x2738 <sqrt+0x6e>
    272c:	62 0b       	sbc	r22, r18
    272e:	73 0b       	sbc	r23, r19
    2730:	84 0b       	sbc	r24, r20
    2732:	20 0d       	add	r18, r0
    2734:	31 1d       	adc	r19, r1
    2736:	41 1d       	adc	r20, r1
    2738:	a0 95       	com	r26
    273a:	81 f7       	brne	.-32     	; 0x271c <sqrt+0x52>
    273c:	b9 01       	movw	r22, r18
    273e:	84 2f       	mov	r24, r20
    2740:	91 58       	subi	r25, 0x81	; 129
    2742:	88 0f       	add	r24, r24
    2744:	96 95       	lsr	r25
    2746:	87 95       	ror	r24
    2748:	08 95       	ret

0000274a <square>:
    274a:	9b 01       	movw	r18, r22
    274c:	ac 01       	movw	r20, r24
    274e:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__mulsf3>

00002752 <__fp_mpack>:
    2752:	9f 3f       	cpi	r25, 0xFF	; 255
    2754:	31 f0       	breq	.+12     	; 0x2762 <__fp_mpack_finite+0xc>

00002756 <__fp_mpack_finite>:
    2756:	91 50       	subi	r25, 0x01	; 1
    2758:	20 f4       	brcc	.+8      	; 0x2762 <__fp_mpack_finite+0xc>
    275a:	87 95       	ror	r24
    275c:	77 95       	ror	r23
    275e:	67 95       	ror	r22
    2760:	b7 95       	ror	r27
    2762:	88 0f       	add	r24, r24
    2764:	91 1d       	adc	r25, r1
    2766:	96 95       	lsr	r25
    2768:	87 95       	ror	r24
    276a:	97 f9       	bld	r25, 7
    276c:	08 95       	ret

0000276e <__fp_norm2>:
    276e:	91 50       	subi	r25, 0x01	; 1
    2770:	50 40       	sbci	r21, 0x00	; 0
    2772:	66 0f       	add	r22, r22
    2774:	77 1f       	adc	r23, r23
    2776:	88 1f       	adc	r24, r24
    2778:	d2 f7       	brpl	.-12     	; 0x276e <__fp_norm2>
    277a:	08 95       	ret

0000277c <__divmodhi4>:
    277c:	97 fb       	bst	r25, 7
    277e:	07 2e       	mov	r0, r23
    2780:	16 f4       	brtc	.+4      	; 0x2786 <__divmodhi4+0xa>
    2782:	00 94       	com	r0
    2784:	07 d0       	rcall	.+14     	; 0x2794 <__divmodhi4_neg1>
    2786:	77 fd       	sbrc	r23, 7
    2788:	09 d0       	rcall	.+18     	; 0x279c <__divmodhi4_neg2>
    278a:	0e 94 03 14 	call	0x2806	; 0x2806 <__udivmodhi4>
    278e:	07 fc       	sbrc	r0, 7
    2790:	05 d0       	rcall	.+10     	; 0x279c <__divmodhi4_neg2>
    2792:	3e f4       	brtc	.+14     	; 0x27a2 <__divmodhi4_exit>

00002794 <__divmodhi4_neg1>:
    2794:	90 95       	com	r25
    2796:	81 95       	neg	r24
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	08 95       	ret

0000279c <__divmodhi4_neg2>:
    279c:	70 95       	com	r23
    279e:	61 95       	neg	r22
    27a0:	7f 4f       	sbci	r23, 0xFF	; 255

000027a2 <__divmodhi4_exit>:
    27a2:	08 95       	ret

000027a4 <__udivmodsi4>:
    27a4:	a1 e2       	ldi	r26, 0x21	; 33
    27a6:	1a 2e       	mov	r1, r26
    27a8:	aa 1b       	sub	r26, r26
    27aa:	bb 1b       	sub	r27, r27
    27ac:	fd 01       	movw	r30, r26
    27ae:	0d c0       	rjmp	.+26     	; 0x27ca <__udivmodsi4_ep>

000027b0 <__udivmodsi4_loop>:
    27b0:	aa 1f       	adc	r26, r26
    27b2:	bb 1f       	adc	r27, r27
    27b4:	ee 1f       	adc	r30, r30
    27b6:	ff 1f       	adc	r31, r31
    27b8:	a2 17       	cp	r26, r18
    27ba:	b3 07       	cpc	r27, r19
    27bc:	e4 07       	cpc	r30, r20
    27be:	f5 07       	cpc	r31, r21
    27c0:	20 f0       	brcs	.+8      	; 0x27ca <__udivmodsi4_ep>
    27c2:	a2 1b       	sub	r26, r18
    27c4:	b3 0b       	sbc	r27, r19
    27c6:	e4 0b       	sbc	r30, r20
    27c8:	f5 0b       	sbc	r31, r21

000027ca <__udivmodsi4_ep>:
    27ca:	66 1f       	adc	r22, r22
    27cc:	77 1f       	adc	r23, r23
    27ce:	88 1f       	adc	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	1a 94       	dec	r1
    27d4:	69 f7       	brne	.-38     	; 0x27b0 <__udivmodsi4_loop>
    27d6:	60 95       	com	r22
    27d8:	70 95       	com	r23
    27da:	80 95       	com	r24
    27dc:	90 95       	com	r25
    27de:	9b 01       	movw	r18, r22
    27e0:	ac 01       	movw	r20, r24
    27e2:	bd 01       	movw	r22, r26
    27e4:	cf 01       	movw	r24, r30
    27e6:	08 95       	ret

000027e8 <__umulhisi3>:
    27e8:	a2 9f       	mul	r26, r18
    27ea:	b0 01       	movw	r22, r0
    27ec:	b3 9f       	mul	r27, r19
    27ee:	c0 01       	movw	r24, r0
    27f0:	a3 9f       	mul	r26, r19
    27f2:	70 0d       	add	r23, r0
    27f4:	81 1d       	adc	r24, r1
    27f6:	11 24       	eor	r1, r1
    27f8:	91 1d       	adc	r25, r1
    27fa:	b2 9f       	mul	r27, r18
    27fc:	70 0d       	add	r23, r0
    27fe:	81 1d       	adc	r24, r1
    2800:	11 24       	eor	r1, r1
    2802:	91 1d       	adc	r25, r1
    2804:	08 95       	ret

00002806 <__udivmodhi4>:
    2806:	aa 1b       	sub	r26, r26
    2808:	bb 1b       	sub	r27, r27
    280a:	51 e1       	ldi	r21, 0x11	; 17
    280c:	07 c0       	rjmp	.+14     	; 0x281c <__udivmodhi4_ep>

0000280e <__udivmodhi4_loop>:
    280e:	aa 1f       	adc	r26, r26
    2810:	bb 1f       	adc	r27, r27
    2812:	a6 17       	cp	r26, r22
    2814:	b7 07       	cpc	r27, r23
    2816:	10 f0       	brcs	.+4      	; 0x281c <__udivmodhi4_ep>
    2818:	a6 1b       	sub	r26, r22
    281a:	b7 0b       	sbc	r27, r23

0000281c <__udivmodhi4_ep>:
    281c:	88 1f       	adc	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	5a 95       	dec	r21
    2822:	a9 f7       	brne	.-22     	; 0x280e <__udivmodhi4_loop>
    2824:	80 95       	com	r24
    2826:	90 95       	com	r25
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	08 95       	ret

0000282e <_exit>:
    282e:	f8 94       	cli

00002830 <__stop_program>:
    2830:	ff cf       	rjmp	.-2      	; 0x2830 <__stop_program>
