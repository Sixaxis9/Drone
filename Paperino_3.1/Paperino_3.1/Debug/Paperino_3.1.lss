
Paperino_3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00002678  0000270c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  00800130  00800130  0000273c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000276c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003794  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001577  00000000  00000000  000062d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e23  00000000  00000000  00007847  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b10  00000000  00000000  0000966c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000103c  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022a0  00000000  00000000  0000b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000d458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__vector_9>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__vector_20>
      54:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__vector_21>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__vector_25>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__vector_31>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__vector_35>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 00       	.word	0x003f	; ????

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	da e0       	ldi	r29, 0x0A	; 10
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e8 e7       	ldi	r30, 0x78	; 120
      ee:	f6 e2       	ldi	r31, 0x26	; 38
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a0 33       	cpi	r26, 0x30	; 48
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a0 e3       	ldi	r26, 0x30	; 48
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	a3 3b       	cpi	r26, 0xB3	; 179
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 86 09 	call	0x130c	; 0x130c <main>
     110:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <selected_value>:
#include "IMU.h"
#include "USART.h"
#include "Timer.h"

void selected_value(uint8_t choise){
	switch(choise){
     118:	8b 36       	cpi	r24, 0x6B	; 107
     11a:	09 f4       	brne	.+2      	; 0x11e <selected_value+0x6>
     11c:	df c0       	rjmp	.+446    	; 0x2dc <selected_value+0x1c4>
     11e:	40 f5       	brcc	.+80     	; 0x170 <selected_value+0x58>
     120:	85 36       	cpi	r24, 0x65	; 101
     122:	09 f4       	brne	.+2      	; 0x126 <selected_value+0xe>
     124:	91 c0       	rjmp	.+290    	; 0x248 <selected_value+0x130>
     126:	90 f4       	brcc	.+36     	; 0x14c <selected_value+0x34>
     128:	82 36       	cpi	r24, 0x62	; 98
     12a:	09 f4       	brne	.+2      	; 0x12e <selected_value+0x16>
     12c:	5a c0       	rjmp	.+180    	; 0x1e2 <selected_value+0xca>
     12e:	38 f4       	brcc	.+14     	; 0x13e <selected_value+0x26>
     130:	88 23       	and	r24, r24
     132:	09 f4       	brne	.+2      	; 0x136 <selected_value+0x1e>
     134:	1d c1       	rjmp	.+570    	; 0x370 <selected_value+0x258>
     136:	81 36       	cpi	r24, 0x61	; 97
     138:	09 f4       	brne	.+2      	; 0x13c <selected_value+0x24>
     13a:	42 c0       	rjmp	.+132    	; 0x1c0 <selected_value+0xa8>
     13c:	1d c1       	rjmp	.+570    	; 0x378 <selected_value+0x260>
     13e:	83 36       	cpi	r24, 0x63	; 99
     140:	09 f4       	brne	.+2      	; 0x144 <selected_value+0x2c>
     142:	60 c0       	rjmp	.+192    	; 0x204 <selected_value+0xec>
     144:	84 36       	cpi	r24, 0x64	; 100
     146:	09 f4       	brne	.+2      	; 0x14a <selected_value+0x32>
     148:	6e c0       	rjmp	.+220    	; 0x226 <selected_value+0x10e>
     14a:	16 c1       	rjmp	.+556    	; 0x378 <selected_value+0x260>
     14c:	88 36       	cpi	r24, 0x68	; 104
     14e:	09 f4       	brne	.+2      	; 0x152 <selected_value+0x3a>
     150:	a3 c0       	rjmp	.+326    	; 0x298 <selected_value+0x180>
     152:	38 f4       	brcc	.+14     	; 0x162 <selected_value+0x4a>
     154:	86 36       	cpi	r24, 0x66	; 102
     156:	09 f4       	brne	.+2      	; 0x15a <selected_value+0x42>
     158:	88 c0       	rjmp	.+272    	; 0x26a <selected_value+0x152>
     15a:	87 36       	cpi	r24, 0x67	; 103
     15c:	09 f4       	brne	.+2      	; 0x160 <selected_value+0x48>
     15e:	96 c0       	rjmp	.+300    	; 0x28c <selected_value+0x174>
     160:	0b c1       	rjmp	.+534    	; 0x378 <selected_value+0x260>
     162:	89 36       	cpi	r24, 0x69	; 105
     164:	09 f4       	brne	.+2      	; 0x168 <selected_value+0x50>
     166:	9e c0       	rjmp	.+316    	; 0x2a4 <selected_value+0x18c>
     168:	8a 36       	cpi	r24, 0x6A	; 106
     16a:	09 f4       	brne	.+2      	; 0x16e <selected_value+0x56>
     16c:	a9 c0       	rjmp	.+338    	; 0x2c0 <selected_value+0x1a8>
     16e:	04 c1       	rjmp	.+520    	; 0x378 <selected_value+0x260>
     170:	81 37       	cpi	r24, 0x71	; 113
     172:	09 f4       	brne	.+2      	; 0x176 <selected_value+0x5e>
     174:	e5 c0       	rjmp	.+458    	; 0x340 <selected_value+0x228>
     176:	90 f4       	brcc	.+36     	; 0x19c <selected_value+0x84>
     178:	8e 36       	cpi	r24, 0x6E	; 110
     17a:	09 f4       	brne	.+2      	; 0x17e <selected_value+0x66>
     17c:	d0 c0       	rjmp	.+416    	; 0x31e <selected_value+0x206>
     17e:	38 f4       	brcc	.+14     	; 0x18e <selected_value+0x76>
     180:	8c 36       	cpi	r24, 0x6C	; 108
     182:	09 f4       	brne	.+2      	; 0x186 <selected_value+0x6e>
     184:	b9 c0       	rjmp	.+370    	; 0x2f8 <selected_value+0x1e0>
     186:	8d 36       	cpi	r24, 0x6D	; 109
     188:	09 f4       	brne	.+2      	; 0x18c <selected_value+0x74>
     18a:	c4 c0       	rjmp	.+392    	; 0x314 <selected_value+0x1fc>
     18c:	f5 c0       	rjmp	.+490    	; 0x378 <selected_value+0x260>
     18e:	8f 36       	cpi	r24, 0x6F	; 111
     190:	09 f4       	brne	.+2      	; 0x194 <selected_value+0x7c>
     192:	ca c0       	rjmp	.+404    	; 0x328 <selected_value+0x210>
     194:	80 37       	cpi	r24, 0x70	; 112
     196:	09 f4       	brne	.+2      	; 0x19a <selected_value+0x82>
     198:	ce c0       	rjmp	.+412    	; 0x336 <selected_value+0x21e>
     19a:	ee c0       	rjmp	.+476    	; 0x378 <selected_value+0x260>
     19c:	84 37       	cpi	r24, 0x74	; 116
     19e:	09 f4       	brne	.+2      	; 0x1a2 <selected_value+0x8a>
     1a0:	de c0       	rjmp	.+444    	; 0x35e <selected_value+0x246>
     1a2:	38 f4       	brcc	.+14     	; 0x1b2 <selected_value+0x9a>
     1a4:	82 37       	cpi	r24, 0x72	; 114
     1a6:	09 f4       	brne	.+2      	; 0x1aa <selected_value+0x92>
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <selected_value+0x232>
     1aa:	83 37       	cpi	r24, 0x73	; 115
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <selected_value+0x98>
     1ae:	d2 c0       	rjmp	.+420    	; 0x354 <selected_value+0x23c>
     1b0:	e3 c0       	rjmp	.+454    	; 0x378 <selected_value+0x260>
     1b2:	85 37       	cpi	r24, 0x75	; 117
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <selected_value+0xa0>
     1b6:	e3 c0       	rjmp	.+454    	; 0x37e <selected_value+0x266>
     1b8:	8f 3f       	cpi	r24, 0xFF	; 255
     1ba:	09 f4       	brne	.+2      	; 0x1be <selected_value+0xa6>
     1bc:	d5 c0       	rjmp	.+426    	; 0x368 <selected_value+0x250>
     1be:	dc c0       	rjmp	.+440    	; 0x378 <selected_value+0x260>
		case ACCX:
		computed_acceleration(0);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <computed_acceleration>
		USART_Transmit(accx);
     1c6:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <accx>
     1ca:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <accx+0x1>
     1ce:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <accx+0x2>
     1d2:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <accx+0x3>
     1d6:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     1da:	86 2f       	mov	r24, r22
     1dc:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     1e0:	08 95       	ret
		case ACCY:
		computed_acceleration(0);
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <computed_acceleration>
		USART_Transmit(accy);
     1e8:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <accy>
     1ec:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <accy+0x1>
     1f0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <accy+0x2>
     1f4:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <accy+0x3>
     1f8:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     1fc:	86 2f       	mov	r24, r22
     1fe:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     202:	08 95       	ret
		case ACCZ:
		computed_acceleration(0);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <computed_acceleration>
		USART_Transmit(accz);
     20a:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <accz>
     20e:	70 91 94 01 	lds	r23, 0x0194	; 0x800194 <accz+0x1>
     212:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <accz+0x2>
     216:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <accz+0x3>
     21a:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     21e:	86 2f       	mov	r24, r22
     220:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     224:	08 95       	ret
		case GYROX:
		computed_gyroscope(0);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 8c 06 	call	0xd18	; 0xd18 <computed_gyroscope>
		USART_Transmit(gyrox);
     22c:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <gyrox>
     230:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <gyrox+0x1>
     234:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <gyrox+0x2>
     238:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <gyrox+0x3>
     23c:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     240:	86 2f       	mov	r24, r22
     242:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     246:	08 95       	ret
		case GYROY:
		computed_gyroscope(0);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 8c 06 	call	0xd18	; 0xd18 <computed_gyroscope>
		USART_Transmit(gyroy);
     24e:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <gyroy>
     252:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <gyroy+0x1>
     256:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <gyroy+0x2>
     25a:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <gyroy+0x3>
     25e:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     262:	86 2f       	mov	r24, r22
     264:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     268:	08 95       	ret
		case GYROZ:
		computed_gyroscope(0);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 8c 06 	call	0xd18	; 0xd18 <computed_gyroscope>
		USART_Transmit(gyroz);
     270:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <gyroz>
     274:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <gyroz+0x1>
     278:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <gyroz+0x2>
     27c:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <gyroz+0x3>
     280:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     284:	86 2f       	mov	r24, r22
     286:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     28a:	08 95       	ret
		case TEMP:
		USART_Transmit(temperature(0));
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 cc 05 	call	0xb98	; 0xb98 <temperature>
     292:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     296:	08 95       	ret
		case WHOIAM:
		USART_Transmit(IMU_who_i_am(0));
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 ba 05 	call	0xb74	; 0xb74 <IMU_who_i_am>
     29e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     2a2:	08 95       	ret
		case ANGLEACCX:
		USART_Transmit(Angle_X_Acc);
     2a4:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <Angle_X_Acc>
     2a8:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <Angle_X_Acc+0x1>
     2ac:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Angle_X_Acc+0x2>
     2b0:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <Angle_X_Acc+0x3>
     2b4:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     2b8:	86 2f       	mov	r24, r22
     2ba:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     2be:	08 95       	ret
		case ANGLEACCY:
		USART_Transmit(Angle_Y_Acc);
     2c0:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <Angle_Y_Acc>
     2c4:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <Angle_Y_Acc+0x1>
     2c8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <Angle_Y_Acc+0x2>
     2cc:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <Angle_Y_Acc+0x3>
     2d0:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     2d4:	86 2f       	mov	r24, r22
     2d6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     2da:	08 95       	ret
		case ANGLEGYROX:
		USART_Transmit(Angle_X_Gyro);
     2dc:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <Angle_X_Gyro>
     2e0:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <Angle_X_Gyro+0x1>
     2e4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Angle_X_Gyro+0x2>
     2e8:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <Angle_X_Gyro+0x3>
     2ec:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     2f0:	86 2f       	mov	r24, r22
     2f2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     2f6:	08 95       	ret
		case ANGLEGYROY:
		USART_Transmit(Angle_Y_Gyro);
     2f8:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <Angle_Y_Gyro>
     2fc:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <Angle_Y_Gyro+0x1>
     300:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Angle_Y_Gyro+0x2>
     304:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Angle_Y_Gyro+0x3>
     308:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     30c:	86 2f       	mov	r24, r22
     30e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     312:	08 95       	ret
		case ANGLEX:
		USART_Transmit(AngleX);
     314:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <AngleX>
     318:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     31c:	08 95       	ret
		case ANGLEY:
		USART_Transmit(AngleY);
     31e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <AngleY>
     322:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     326:	08 95       	ret
		case TIME:
		USART_Transmit((uint8_t)system_tick_MG);
     328:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <system_tick_MG>
     32c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <system_tick_MG+0x1>
     330:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     334:	08 95       	ret
		case THROTTLE:
		USART_Transmit(throttle);
     336:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <throttle>
     33a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     33e:	08 95       	ret
		case PITCH:
		USART_Transmit(pitch);
     340:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <pitch>
     344:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     348:	08 95       	ret
		case ROLL:
		USART_Transmit(roll);
     34a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <roll>
     34e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     352:	08 95       	ret
		case YAW:
		USART_Transmit(yaw);
     354:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <yaw>
     358:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     35c:	08 95       	ret
		case AUX1:
		USART_Transmit(aux1);
     35e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <aux1>
     362:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     366:	08 95       	ret
		case AUX2:
		break;
		case 255:
		USART_Transmit('p');
     368:	80 e7       	ldi	r24, 0x70	; 112
     36a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     36e:	08 95       	ret
		case 0:
		USART_Transmit('q');
     370:	81 e7       	ldi	r24, 0x71	; 113
     372:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		break;
     376:	08 95       	ret
		default:
		USART_Transmit('e');
     378:	85 e6       	ldi	r24, 0x65	; 101
     37a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     37e:	08 95       	ret

00000380 <TWI_init>:
		
	}
	
	TWI_stop();
	return 0;
}
     380:	8c e0       	ldi	r24, 0x0C	; 12
     382:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     386:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     38a:	08 95       	ret

0000038c <TWI_start>:
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	84 ea       	ldi	r24, 0xA4	; 164
     392:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     396:	ec eb       	ldi	r30, 0xBC	; 188
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	88 23       	and	r24, r24
     39e:	ec f7       	brge	.-6      	; 0x39a <TWI_start+0xe>
     3a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3a4:	88 7f       	andi	r24, 0xF8	; 248
     3a6:	88 30       	cpi	r24, 0x08	; 8
     3a8:	e1 f0       	breq	.+56     	; 0x3e2 <TWI_start+0x56>
     3aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3ae:	88 7f       	andi	r24, 0xF8	; 248
     3b0:	80 31       	cpi	r24, 0x10	; 16
     3b2:	c9 f0       	breq	.+50     	; 0x3e6 <TWI_start+0x5a>
     3b4:	68 e0       	ldi	r22, 0x08	; 8
     3b6:	87 e1       	ldi	r24, 0x17	; 23
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     3be:	67 e0       	ldi	r22, 0x07	; 7
     3c0:	80 e1       	ldi	r24, 0x10	; 16
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     3c8:	c9 eb       	ldi	r28, 0xB9	; 185
     3ca:	d0 e0       	ldi	r29, 0x00	; 0
     3cc:	88 81       	ld	r24, Y
     3ce:	88 7f       	andi	r24, 0xF8	; 248
     3d0:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     3d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3d8:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     3dc:	88 81       	ld	r24, Y
     3de:	88 7f       	andi	r24, 0xF8	; 248
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <TWI_start+0x5c>
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <TWI_start+0x5c>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <TWI_address>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	80 6d       	ori	r24, 0xD0	; 208
     3f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3f8:	84 e8       	ldi	r24, 0x84	; 132
     3fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3fe:	ec eb       	ldi	r30, 0xBC	; 188
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	88 23       	and	r24, r24
     406:	ec f7       	brge	.-6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     408:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     40c:	88 7f       	andi	r24, 0xF8	; 248
     40e:	80 34       	cpi	r24, 0x40	; 64
     410:	e1 f0       	breq	.+56     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     412:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     416:	88 7f       	andi	r24, 0xF8	; 248
     418:	88 31       	cpi	r24, 0x18	; 24
     41a:	c9 f0       	breq	.+50     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     41c:	68 e0       	ldi	r22, 0x08	; 8
     41e:	87 e1       	ldi	r24, 0x17	; 23
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     426:	66 e0       	ldi	r22, 0x06	; 6
     428:	8a e0       	ldi	r24, 0x0A	; 10
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     430:	c9 eb       	ldi	r28, 0xB9	; 185
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	88 81       	ld	r24, Y
     436:	88 7f       	andi	r24, 0xF8	; 248
     438:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     43c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     440:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     444:	88 81       	ld	r24, Y
     446:	88 7f       	andi	r24, 0xF8	; 248
     448:	03 c0       	rjmp	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	01 c0       	rjmp	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <TWI_send>:
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     45e:	84 e8       	ldi	r24, 0x84	; 132
     460:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     464:	ec eb       	ldi	r30, 0xBC	; 188
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	88 23       	and	r24, r24
     46c:	ec f7       	brge	.-6      	; 0x468 <TWI_send+0x12>
     46e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	88 32       	cpi	r24, 0x28	; 40
     476:	b9 f0       	breq	.+46     	; 0x4a6 <TWI_send+0x50>
     478:	68 e0       	ldi	r22, 0x08	; 8
     47a:	87 e1       	ldi	r24, 0x17	; 23
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     482:	66 e0       	ldi	r22, 0x06	; 6
     484:	8a e0       	ldi	r24, 0x0A	; 10
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     48c:	c9 eb       	ldi	r28, 0xB9	; 185
     48e:	d0 e0       	ldi	r29, 0x00	; 0
     490:	88 81       	ld	r24, Y
     492:	88 7f       	andi	r24, 0xF8	; 248
     494:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     498:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     49c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     4a0:	88 81       	ld	r24, Y
     4a2:	88 7f       	andi	r24, 0xF8	; 248
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <TWI_send+0x52>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <TWI_receive_ack>:
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	84 ec       	ldi	r24, 0xC4	; 196
     4b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4b8:	ec eb       	ldi	r30, 0xBC	; 188
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	88 23       	and	r24, r24
     4c0:	ec f7       	brge	.-6      	; 0x4bc <TWI_receive_ack+0xe>
     4c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4c6:	88 7f       	andi	r24, 0xF8	; 248
     4c8:	80 35       	cpi	r24, 0x50	; 80
     4ca:	19 f4       	brne	.+6      	; 0x4d2 <TWI_receive_ack+0x24>
     4cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     4d0:	16 c0       	rjmp	.+44     	; 0x4fe <TWI_receive_ack+0x50>
     4d2:	68 e0       	ldi	r22, 0x08	; 8
     4d4:	87 e1       	ldi	r24, 0x17	; 23
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     4dc:	69 e0       	ldi	r22, 0x09	; 9
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     4e6:	c9 eb       	ldi	r28, 0xB9	; 185
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
     4ea:	88 81       	ld	r24, Y
     4ec:	88 7f       	andi	r24, 0xF8	; 248
     4ee:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     4f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4f6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     4fa:	88 81       	ld	r24, Y
     4fc:	88 7f       	andi	r24, 0xF8	; 248
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <TWI_receive_nack>:
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	84 e8       	ldi	r24, 0x84	; 132
     50a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     50e:	ec eb       	ldi	r30, 0xBC	; 188
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	88 23       	and	r24, r24
     516:	ec f7       	brge	.-6      	; 0x512 <TWI_receive_nack+0xe>
     518:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     51c:	88 7f       	andi	r24, 0xF8	; 248
     51e:	88 35       	cpi	r24, 0x58	; 88
     520:	19 f4       	brne	.+6      	; 0x528 <TWI_receive_nack+0x24>
     522:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     526:	16 c0       	rjmp	.+44     	; 0x554 <TWI_receive_nack+0x50>
     528:	68 e0       	ldi	r22, 0x08	; 8
     52a:	87 e1       	ldi	r24, 0x17	; 23
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     532:	69 e0       	ldi	r22, 0x09	; 9
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <USART_String>
     53c:	c9 eb       	ldi	r28, 0xB9	; 185
     53e:	d0 e0       	ldi	r29, 0x00	; 0
     540:	88 81       	ld	r24, Y
     542:	88 7f       	andi	r24, 0xF8	; 248
     544:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     548:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     54c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
     550:	88 81       	ld	r24, Y
     552:	88 7f       	andi	r24, 0xF8	; 248
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <TWI_stop>:
     55a:	84 e9       	ldi	r24, 0x94	; 148
     55c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     560:	08 95       	ret

00000562 <TWI_send_16bit>:
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	c8 2f       	mov	r28, r24
     568:	d6 2f       	mov	r29, r22
     56a:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     574:	88 23       	and	r24, r24
     576:	21 f0       	breq	.+8      	; 0x580 <TWI_send_16bit+0x1e>
     578:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     57c:	88 7f       	andi	r24, 0xF8	; 248
     57e:	15 c0       	rjmp	.+42     	; 0x5aa <TWI_send_16bit+0x48>
     580:	8c 2f       	mov	r24, r28
     582:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     586:	88 23       	and	r24, r24
     588:	21 f0       	breq	.+8      	; 0x592 <TWI_send_16bit+0x30>
     58a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     58e:	88 7f       	andi	r24, 0xF8	; 248
     590:	0c c0       	rjmp	.+24     	; 0x5aa <TWI_send_16bit+0x48>
     592:	8d 2f       	mov	r24, r29
     594:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     598:	88 23       	and	r24, r24
     59a:	21 f0       	breq	.+8      	; 0x5a4 <TWI_send_16bit+0x42>
     59c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a0:	88 7f       	andi	r24, 0xF8	; 248
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <TWI_send_16bit+0x48>
     5a4:	94 e9       	ldi	r25, 0x94	; 148
     5a6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <TWI_receive_8bit>:


uint8_t TWI_receive_8bit(uint8_t registro){
     5b0:	cf 93       	push	r28
     5b2:	c8 2f       	mov	r28, r24
	if (TWI_start()!= 0){ //masking for prescaler bits|
     5b4:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     5b8:	88 23       	and	r24, r24
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <TWI_receive_8bit+0x14>
		return TWSR & 0xF8;
     5bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5c0:	88 7f       	andi	r24, 0xF8	; 248
     5c2:	28 c0       	rjmp	.+80     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_address(0) != 0){
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     5ca:	88 23       	and	r24, r24
     5cc:	21 f0       	breq	.+8      	; 0x5d6 <TWI_receive_8bit+0x26>
		return TWSR & 0xF8;
     5ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5d2:	88 7f       	andi	r24, 0xF8	; 248
     5d4:	1f c0       	rjmp	.+62     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_send(registro) != 0){
     5d6:	8c 2f       	mov	r24, r28
     5d8:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     5dc:	88 23       	and	r24, r24
     5de:	21 f0       	breq	.+8      	; 0x5e8 <TWI_receive_8bit+0x38>
		return TWSR & 0xF8;
     5e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5e4:	88 7f       	andi	r24, 0xF8	; 248
     5e6:	16 c0       	rjmp	.+44     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	
	if (TWI_start()!= 0){
     5e8:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     5ec:	88 23       	and	r24, r24
     5ee:	21 f0       	breq	.+8      	; 0x5f8 <TWI_receive_8bit+0x48>
		return TWSR & 0xF8;
     5f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5f4:	88 7f       	andi	r24, 0xF8	; 248
     5f6:	0e c0       	rjmp	.+28     	; 0x614 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_address(1) != 0){
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     5fe:	88 23       	and	r24, r24
     600:	21 f0       	breq	.+8      	; 0x60a <TWI_receive_8bit+0x5a>
		return TWSR & 0xF8;
     602:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     606:	88 7f       	andi	r24, 0xF8	; 248
     608:	05 c0       	rjmp	.+10     	; 0x614 <TWI_receive_8bit+0x64>
	}

	uint8_t data = 0;
	data = TWI_receive_nack();
     60a:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
		return TWSR & 0xF8;
	}
}

void TWI_stop(){
	TWCR =	(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     60e:	94 e9       	ldi	r25, 0x94	; 148
     610:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	uint8_t data = 0;
	data = TWI_receive_nack();
	TWI_stop();
	return data;
}
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <TWI_receive_16bit>:

uint16_t TWI_receive_16bit(uint8_t registro){
     618:	cf 93       	push	r28
     61a:	c8 2f       	mov	r28, r24
	if (TWI_start()!= 0){
     61c:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     620:	88 23       	and	r24, r24
     622:	29 f0       	breq	.+10     	; 0x62e <TWI_receive_16bit+0x16>
		return TWSR & 0xF8;
     624:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     628:	88 7f       	andi	r24, 0xF8	; 248
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	2f c0       	rjmp	.+94     	; 0x68c <TWI_receive_16bit+0x74>
	}
	
	if (TWI_address(0) != 0){
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     634:	88 23       	and	r24, r24
     636:	29 f0       	breq	.+10     	; 0x642 <TWI_receive_16bit+0x2a>
		return TWSR & 0xF8;
     638:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     63c:	88 7f       	andi	r24, 0xF8	; 248
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	25 c0       	rjmp	.+74     	; 0x68c <TWI_receive_16bit+0x74>
	}

	if (TWI_send(registro) != 0){
     642:	8c 2f       	mov	r24, r28
     644:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     648:	88 23       	and	r24, r24
     64a:	29 f0       	breq	.+10     	; 0x656 <TWI_receive_16bit+0x3e>
		return TWSR & 0xF8;
     64c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     650:	88 7f       	andi	r24, 0xF8	; 248
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	1b c0       	rjmp	.+54     	; 0x68c <TWI_receive_16bit+0x74>
	}

	if (TWI_start()!= 0){
     656:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     65a:	88 23       	and	r24, r24
     65c:	29 f0       	breq	.+10     	; 0x668 <TWI_receive_16bit+0x50>
		return TWSR & 0xF8;
     65e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     662:	88 7f       	andi	r24, 0xF8	; 248
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	12 c0       	rjmp	.+36     	; 0x68c <TWI_receive_16bit+0x74>
	}
	
	if (TWI_address(1) != 0){
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     66e:	88 23       	and	r24, r24
     670:	29 f0       	breq	.+10     	; 0x67c <TWI_receive_16bit+0x64>
		return TWSR & 0xF8;
     672:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     676:	88 7f       	andi	r24, 0xF8	; 248
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	08 c0       	rjmp	.+16     	; 0x68c <TWI_receive_16bit+0x74>
	}


	uint16_t data = 0;
	data = TWI_receive_ack()<<8;
     67c:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
	data = TWI_receive_nack();
     680:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
		return TWSR & 0xF8;
	}
}

void TWI_stop(){
	TWCR =	(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     684:	94 e9       	ldi	r25, 0x94	; 148
     686:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	uint16_t data = 0;
	data = TWI_receive_ack()<<8;
	data = TWI_receive_nack();
	TWI_stop();
	return data;
     68a:	90 e0       	ldi	r25, 0x00	; 0
}
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <select_sensitivity_gyro>:
	
	return register_value;
}

uint8_t select_sensitivity_gyro(uint8_t sensitivity){
	switch (sensitivity){
     690:	82 30       	cpi	r24, 0x02	; 2
     692:	c1 f0       	breq	.+48     	; 0x6c4 <select_sensitivity_gyro+0x34>
     694:	18 f4       	brcc	.+6      	; 0x69c <select_sensitivity_gyro+0xc>
     696:	81 30       	cpi	r24, 0x01	; 1
     698:	31 f0       	breq	.+12     	; 0x6a6 <select_sensitivity_gyro+0x16>
     69a:	44 c0       	rjmp	.+136    	; 0x724 <select_sensitivity_gyro+0x94>
     69c:	83 30       	cpi	r24, 0x03	; 3
     69e:	11 f1       	breq	.+68     	; 0x6e4 <select_sensitivity_gyro+0x54>
     6a0:	84 30       	cpi	r24, 0x04	; 4
     6a2:	81 f1       	breq	.+96     	; 0x704 <select_sensitivity_gyro+0x74>
     6a4:	3f c0       	rjmp	.+126    	; 0x724 <select_sensitivity_gyro+0x94>
		//Full scale: 250 deg/s
		case 1: sensitivity_gyro = 131.0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	a3 e0       	ldi	r26, 0x03	; 3
     6ac:	b3 e4       	ldi	r27, 0x43	; 67
     6ae:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <sensitivity_gyro>
     6b2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <sensitivity_gyro+0x1>
     6b6:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <sensitivity_gyro+0x2>
     6ba:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <sensitivity_gyro+0x3>
				sensitivity_gyro_register = 0;
     6be:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <sensitivity_gyro_register>
				break;
     6c2:	40 c0       	rjmp	.+128    	; 0x744 <select_sensitivity_gyro+0xb4>
		//Full scale: 500 deg/s
		case 2: sensitivity_gyro = 65.5;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	a3 e8       	ldi	r26, 0x83	; 131
     6ca:	b2 e4       	ldi	r27, 0x42	; 66
     6cc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <sensitivity_gyro>
     6d0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <sensitivity_gyro+0x1>
     6d4:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <sensitivity_gyro+0x2>
     6d8:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <sensitivity_gyro+0x3>
				sensitivity_gyro_register = 0b00001000;
     6dc:	88 e0       	ldi	r24, 0x08	; 8
     6de:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <sensitivity_gyro_register>
				break;
     6e2:	30 c0       	rjmp	.+96     	; 0x744 <select_sensitivity_gyro+0xb4>
		//Full scale: 1000 deg/s
		case 3: sensitivity_gyro = 32.8;
     6e4:	83 e3       	ldi	r24, 0x33	; 51
     6e6:	93 e3       	ldi	r25, 0x33	; 51
     6e8:	a3 e0       	ldi	r26, 0x03	; 3
     6ea:	b2 e4       	ldi	r27, 0x42	; 66
     6ec:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <sensitivity_gyro>
     6f0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <sensitivity_gyro+0x1>
     6f4:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <sensitivity_gyro+0x2>
     6f8:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <sensitivity_gyro+0x3>
				sensitivity_gyro_register = 0b00010000;
     6fc:	80 e1       	ldi	r24, 0x10	; 16
     6fe:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <sensitivity_gyro_register>
				break;
     702:	20 c0       	rjmp	.+64     	; 0x744 <select_sensitivity_gyro+0xb4>
		//Full scale: 2000 deg/s
		case 4: sensitivity_gyro = 16.4;
     704:	83 e3       	ldi	r24, 0x33	; 51
     706:	93 e3       	ldi	r25, 0x33	; 51
     708:	a3 e8       	ldi	r26, 0x83	; 131
     70a:	b1 e4       	ldi	r27, 0x41	; 65
     70c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <sensitivity_gyro>
     710:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <sensitivity_gyro+0x1>
     714:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <sensitivity_gyro+0x2>
     718:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <sensitivity_gyro+0x3>
				sensitivity_gyro_register = 0b00011000;
     71c:	88 e1       	ldi	r24, 0x18	; 24
     71e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <sensitivity_gyro_register>
				break;
     722:	10 c0       	rjmp	.+32     	; 0x744 <select_sensitivity_gyro+0xb4>
		default:
				USART_Transmit(sensitivity_gyro);
     724:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <sensitivity_gyro>
     728:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <sensitivity_gyro+0x1>
     72c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <sensitivity_gyro+0x2>
     730:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <sensitivity_gyro+0x3>
     734:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     738:	86 2f       	mov	r24, r22
     73a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
				USART_Transmit('\n');
     73e:	8a e0       	ldi	r24, 0x0A	; 10
     740:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	}
	return (uint8_t) sensitivity_gyro;
     744:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <sensitivity_gyro>
     748:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <sensitivity_gyro+0x1>
     74c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <sensitivity_gyro+0x2>
     750:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <sensitivity_gyro+0x3>
     754:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     758:	86 2f       	mov	r24, r22
}
     75a:	08 95       	ret

0000075c <select_sensitivity_acc>:

uint8_t select_sensitivity_acc(uint8_t sensitivity){
	switch (sensitivity){
     75c:	82 30       	cpi	r24, 0x02	; 2
     75e:	91 f0       	breq	.+36     	; 0x784 <select_sensitivity_acc+0x28>
     760:	18 f4       	brcc	.+6      	; 0x768 <select_sensitivity_acc+0xc>
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	31 f0       	breq	.+12     	; 0x772 <select_sensitivity_acc+0x16>
     766:	2c c0       	rjmp	.+88     	; 0x7c0 <select_sensitivity_acc+0x64>
     768:	83 30       	cpi	r24, 0x03	; 3
     76a:	b1 f0       	breq	.+44     	; 0x798 <select_sensitivity_acc+0x3c>
     76c:	84 30       	cpi	r24, 0x04	; 4
     76e:	f1 f0       	breq	.+60     	; 0x7ac <select_sensitivity_acc+0x50>
     770:	27 c0       	rjmp	.+78     	; 0x7c0 <select_sensitivity_acc+0x64>
		//Full scale: 2 g
		case 1: sensitivity_acc = 16384;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e4       	ldi	r25, 0x40	; 64
     776:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <sensitivity_acc+0x1>
     77a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sensitivity_acc>
				sensitivity_acc_register = 0;
     77e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <sensitivity_acc_register>
				break;
     782:	25 c0       	rjmp	.+74     	; 0x7ce <select_sensitivity_acc+0x72>
		//Full scale: 4 g
		case 2: sensitivity_acc = 8192;
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e2       	ldi	r25, 0x20	; 32
     788:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <sensitivity_acc+0x1>
     78c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sensitivity_acc>
				sensitivity_acc_register = 0b00001000;
     790:	88 e0       	ldi	r24, 0x08	; 8
     792:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <sensitivity_acc_register>
				break;
     796:	1b c0       	rjmp	.+54     	; 0x7ce <select_sensitivity_acc+0x72>
		//Full scale: 8 g
		case 3: sensitivity_acc = 4096;
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e1       	ldi	r25, 0x10	; 16
     79c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <sensitivity_acc+0x1>
     7a0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sensitivity_acc>
				sensitivity_acc_register = 0b00010000;
     7a4:	80 e1       	ldi	r24, 0x10	; 16
     7a6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <sensitivity_acc_register>
				break;
     7aa:	11 c0       	rjmp	.+34     	; 0x7ce <select_sensitivity_acc+0x72>
		//Full scale: 16 g
		case 4: sensitivity_acc = 2048;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	98 e0       	ldi	r25, 0x08	; 8
     7b0:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <sensitivity_acc+0x1>
     7b4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <sensitivity_acc>
				sensitivity_acc_register = 0b00011000;
     7b8:	88 e1       	ldi	r24, 0x18	; 24
     7ba:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <sensitivity_acc_register>
				break;
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <select_sensitivity_acc+0x72>
		default:
				USART_Transmit(sensitivity_acc);
     7c0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sensitivity_acc>
     7c4:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
				USART_Transmit('\n');
     7c8:	8a e0       	ldi	r24, 0x0A	; 10
     7ca:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	}
	return (uint8_t) sensitivity_acc;
}
     7ce:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <sensitivity_acc>
     7d2:	08 95       	ret

000007d4 <read_acceleration>:

int8_t read_acceleration(uint8_t calibrate_acc){
     7d4:	cf 93       	push	r28
     7d6:	c8 2f       	mov	r28, r24
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     7d8:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     7dc:	81 11       	cpse	r24, r1
     7de:	95 c0       	rjmp	.+298    	; 0x90a <read_acceleration+0x136>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     7e0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     7e4:	81 11       	cpse	r24, r1
     7e6:	93 c0       	rjmp	.+294    	; 0x90e <read_acceleration+0x13a>
		return -1;
	}

	if (TWI_send(0x3B) != 0){
     7e8:	8b e3       	ldi	r24, 0x3B	; 59
     7ea:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     7ee:	81 11       	cpse	r24, r1
     7f0:	90 c0       	rjmp	.+288    	; 0x912 <read_acceleration+0x13e>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     7f2:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     7f6:	81 11       	cpse	r24, r1
     7f8:	8e c0       	rjmp	.+284    	; 0x916 <read_acceleration+0x142>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     800:	81 11       	cpse	r24, r1
     802:	8b c0       	rjmp	.+278    	; 0x91a <read_acceleration+0x146>
	acceleration.acceleration_y = TWI_receive_ack() << 8;
	acceleration.acceleration_y = acceleration.acceleration_y | TWI_receive_ack();
	acceleration.acceleration_z = TWI_receive_ack() << 8;
	acceleration.acceleration_z = acceleration.acceleration_z | TWI_receive_nack();*/

	acceleration_x = TWI_receive_ack() << 8;
     804:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	98 2f       	mov	r25, r24
     80c:	88 27       	eor	r24, r24
     80e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <acceleration_x+0x1>
     812:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <acceleration_x>
	acceleration_x = acceleration_x | TWI_receive_ack();
     816:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     81a:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <acceleration_x>
     81e:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <acceleration_x+0x1>
     822:	28 2b       	or	r18, r24
     824:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <acceleration_x+0x1>
     828:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <acceleration_x>
	acceleration_y = TWI_receive_ack() << 8;
     82c:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	98 2f       	mov	r25, r24
     834:	88 27       	eor	r24, r24
     836:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <acceleration_y+0x1>
     83a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <acceleration_y>
	acceleration_y = acceleration_y | TWI_receive_ack();
     83e:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     842:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <acceleration_y>
     846:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <acceleration_y+0x1>
     84a:	28 2b       	or	r18, r24
     84c:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <acceleration_y+0x1>
     850:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <acceleration_y>
	acceleration_z = TWI_receive_ack() << 8;
     854:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	98 2f       	mov	r25, r24
     85c:	88 27       	eor	r24, r24
     85e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <acceleration_z+0x1>
     862:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <acceleration_z>
	acceleration_z = acceleration_z | TWI_receive_nack();
     866:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
     86a:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <acceleration_z>
     86e:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <acceleration_z+0x1>
     872:	28 2b       	or	r18, r24
     874:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <acceleration_z+0x1>
     878:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <acceleration_z>
	TWI_stop();
     87c:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_stop>
	
	if (calibrate_acc == 1)
     880:	c1 30       	cpi	r28, 0x01	; 1
     882:	09 f0       	breq	.+2      	; 0x886 <read_acceleration+0xb2>
     884:	4c c0       	rjmp	.+152    	; 0x91e <read_acceleration+0x14a>
	{

		acceleration_x = acceleration_x - x_offset_acc;
     886:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <acceleration_x>
     88a:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <acceleration_x+0x1>
     88e:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <x_offset_acc>
     892:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <x_offset_acc+0x1>
     896:	82 1b       	sub	r24, r18
     898:	93 0b       	sbc	r25, r19
     89a:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <acceleration_x+0x1>
     89e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <acceleration_x>
		
		acceleration_y = acceleration_y - y_offset_acc;
     8a2:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <acceleration_y>
     8a6:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <acceleration_y+0x1>
     8aa:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <y_offset_acc>
     8ae:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <y_offset_acc+0x1>
     8b2:	82 1b       	sub	r24, r18
     8b4:	93 0b       	sbc	r25, r19
     8b6:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <acceleration_y+0x1>
     8ba:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <acceleration_y>

		
		if (acceleration_z > z_offset_acc)
     8be:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <acceleration_z>
     8c2:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <acceleration_z+0x1>
     8c6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     8ca:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     8ce:	82 17       	cp	r24, r18
     8d0:	93 07       	cpc	r25, r19
     8d2:	6c f4       	brge	.+26     	; 0x8ee <read_acceleration+0x11a>
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
     8d4:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <acceleration_z>
     8d8:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <acceleration_z+0x1>
     8dc:	30 52       	subi	r19, 0x20	; 32
     8de:	82 0f       	add	r24, r18
     8e0:	93 1f       	adc	r25, r19
     8e2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <acceleration_z+0x1>
     8e6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <acceleration_z>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	19 c0       	rjmp	.+50     	; 0x920 <read_acceleration+0x14c>
		
		if (acceleration_z > z_offset_acc)
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
			}else{
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
     8ee:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <acceleration_z>
     8f2:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <acceleration_z+0x1>
     8f6:	30 5e       	subi	r19, 0xE0	; 224
     8f8:	a9 01       	movw	r20, r18
     8fa:	48 1b       	sub	r20, r24
     8fc:	59 0b       	sbc	r21, r25
     8fe:	50 93 8f 01 	sts	0x018F, r21	; 0x80018f <acceleration_z+0x1>
     902:	40 93 8e 01 	sts	0x018E, r20	; 0x80018e <acceleration_z>
		}
		
	}
	
	return 0;
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	0b c0       	rjmp	.+22     	; 0x920 <read_acceleration+0x14c>
}

int8_t read_acceleration(uint8_t calibrate_acc){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	09 c0       	rjmp	.+18     	; 0x920 <read_acceleration+0x14c>
	}
	
	if (TWI_address(0) != 0){
		return -1;
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	07 c0       	rjmp	.+14     	; 0x920 <read_acceleration+0x14c>
	}

	if (TWI_send(0x3B) != 0){
		return -1;
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	05 c0       	rjmp	.+10     	; 0x920 <read_acceleration+0x14c>
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	03 c0       	rjmp	.+6      	; 0x920 <read_acceleration+0x14c>
	}
	
	if (TWI_address(1) != 0){
		return -1;
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	01 c0       	rjmp	.+2      	; 0x920 <read_acceleration+0x14c>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     91e:	80 e0       	ldi	r24, 0x00	; 0
}
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <read_gyroscope>:

int8_t read_gyroscope(uint8_t calibrate_gyro){
     924:	cf 93       	push	r28
     926:	c8 2f       	mov	r28, r24
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     928:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     92c:	81 11       	cpse	r24, r1
     92e:	7e c0       	rjmp	.+252    	; 0xa2c <read_gyroscope+0x108>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     930:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     934:	81 11       	cpse	r24, r1
     936:	7c c0       	rjmp	.+248    	; 0xa30 <read_gyroscope+0x10c>
		return -1;
	}

	if (TWI_send(0x43) != 0){
     938:	83 e4       	ldi	r24, 0x43	; 67
     93a:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_send>
     93e:	81 11       	cpse	r24, r1
     940:	79 c0       	rjmp	.+242    	; 0xa34 <read_gyroscope+0x110>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     942:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_start>
     946:	81 11       	cpse	r24, r1
     948:	77 c0       	rjmp	.+238    	; 0xa38 <read_gyroscope+0x114>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <TWI_address>
     950:	81 11       	cpse	r24, r1
     952:	74 c0       	rjmp	.+232    	; 0xa3c <read_gyroscope+0x118>
	gyroscope.gyroscope_y = TWI_receive_ack() << 8;
	gyroscope.gyroscope_y = gyroscope.gyroscope_y | TWI_receive_ack();
	gyroscope.gyroscope_z = TWI_receive_ack() << 8;
	gyroscope.gyroscope_z = gyroscope.gyroscope_z | TWI_receive_nack();*/

	gyroscope_x = TWI_receive_ack() << 8;
     954:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	98 2f       	mov	r25, r24
     95c:	88 27       	eor	r24, r24
     95e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <gyroscope_x+0x1>
     962:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gyroscope_x>
	gyroscope_x = gyroscope_x | TWI_receive_ack();
     966:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     96a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <gyroscope_x>
     96e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <gyroscope_x+0x1>
     972:	28 2b       	or	r18, r24
     974:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <gyroscope_x+0x1>
     978:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <gyroscope_x>
	gyroscope_y = TWI_receive_ack() << 8;
     97c:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	98 2f       	mov	r25, r24
     984:	88 27       	eor	r24, r24
     986:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <gyroscope_y+0x1>
     98a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <gyroscope_y>
	gyroscope_y = gyroscope_y | TWI_receive_ack();
     98e:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     992:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <gyroscope_y>
     996:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <gyroscope_y+0x1>
     99a:	28 2b       	or	r18, r24
     99c:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <gyroscope_y+0x1>
     9a0:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <gyroscope_y>
	gyroscope_z = TWI_receive_ack() << 8;
     9a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <TWI_receive_ack>
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	98 2f       	mov	r25, r24
     9ac:	88 27       	eor	r24, r24
     9ae:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <gyroscope_z+0x1>
     9b2:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <gyroscope_z>
	gyroscope_z = gyroscope_z | TWI_receive_nack();
     9b6:	0e 94 82 02 	call	0x504	; 0x504 <TWI_receive_nack>
     9ba:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <gyroscope_z>
     9be:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <gyroscope_z+0x1>
     9c2:	28 2b       	or	r18, r24
     9c4:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <gyroscope_z+0x1>
     9c8:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <gyroscope_z>
	
		if (calibrate_gyro == 1)
     9cc:	c1 30       	cpi	r28, 0x01	; 1
     9ce:	51 f5       	brne	.+84     	; 0xa24 <read_gyroscope+0x100>
		{
			gyroscope_x = gyroscope_x - x_offset_gyro;
     9d0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyroscope_x>
     9d4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <gyroscope_x+0x1>
     9d8:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <x_offset_gyro>
     9dc:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <x_offset_gyro+0x1>
     9e0:	82 1b       	sub	r24, r18
     9e2:	93 0b       	sbc	r25, r19
     9e4:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <gyroscope_x+0x1>
     9e8:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <gyroscope_x>
			gyroscope_y = gyroscope_y - y_offset_gyro;
     9ec:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <gyroscope_y>
     9f0:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <gyroscope_y+0x1>
     9f4:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <y_offset_gyro>
     9f8:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <y_offset_gyro+0x1>
     9fc:	82 1b       	sub	r24, r18
     9fe:	93 0b       	sbc	r25, r19
     a00:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <gyroscope_y+0x1>
     a04:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <gyroscope_y>
			gyroscope_z = gyroscope_z - z_offset_gyro;	
     a08:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <gyroscope_z>
     a0c:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <gyroscope_z+0x1>
     a10:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <z_offset_gyro>
     a14:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <z_offset_gyro+0x1>
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <gyroscope_z+0x1>
     a20:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <gyroscope_z>
		}

	
	TWI_stop();
     a24:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_stop>
	
	return 0;
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <read_gyroscope+0x11a>
}

int8_t read_gyroscope(uint8_t calibrate_gyro){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	07 c0       	rjmp	.+14     	; 0xa3e <read_gyroscope+0x11a>
	}
	
	if (TWI_address(0) != 0){
		return -1;
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <read_gyroscope+0x11a>
	}

	if (TWI_send(0x43) != 0){
		return -1;
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <read_gyroscope+0x11a>
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <read_gyroscope+0x11a>
	}
	
	if (TWI_address(1) != 0){
		return -1;
     a3c:	8f ef       	ldi	r24, 0xFF	; 255

	
	TWI_stop();
	
	return 0;
}
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <IMU_Init>:
int16_t z_offset_acc = 0;

int8_t IMU_Init(){
	uint8_t register_value;
	
	select_sensitivity_gyro(2);
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	0e 94 48 03 	call	0x690	; 0x690 <select_sensitivity_gyro>
	select_sensitivity_acc(2);
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	0e 94 ae 03 	call	0x75c	; 0x75c <select_sensitivity_acc>
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
     a4e:	62 e0       	ldi	r22, 0x02	; 2
     a50:	8a e1       	ldi	r24, 0x1A	; 26
     a52:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a56:	81 11       	cpse	r24, r1
     a58:	79 c0       	rjmp	.+242    	; 0xb4c <__stack+0x4d>
	{
		return -1;
	}
	register_value = sensitivity_gyro_register; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
     a5a:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <sensitivity_gyro_register>
     a5e:	8b e1       	ldi	r24, 0x1B	; 27
     a60:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a64:	81 11       	cpse	r24, r1
     a66:	74 c0       	rjmp	.+232    	; 0xb50 <__stack+0x51>
	{
		return -1;
	}
	register_value = sensitivity_acc_register; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
     a68:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <sensitivity_acc_register>
     a6c:	8c e1       	ldi	r24, 0x1C	; 28
     a6e:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a72:	81 11       	cpse	r24, r1
     a74:	6f c0       	rjmp	.+222    	; 0xb54 <__stack+0x55>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	83 e2       	ldi	r24, 0x23	; 35
     a7a:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a7e:	81 11       	cpse	r24, r1
     a80:	6b c0       	rjmp	.+214    	; 0xb58 <__stack+0x59>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	84 e2       	ldi	r24, 0x24	; 36
     a86:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a8a:	81 11       	cpse	r24, r1
     a8c:	67 c0       	rjmp	.+206    	; 0xb5c <__stack+0x5d>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	87 e3       	ldi	r24, 0x37	; 55
     a92:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     a96:	81 11       	cpse	r24, r1
     a98:	63 c0       	rjmp	.+198    	; 0xb60 <__stack+0x61>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	88 e3       	ldi	r24, 0x38	; 56
     a9e:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     aa2:	81 11       	cpse	r24, r1
     aa4:	5f c0       	rjmp	.+190    	; 0xb64 <__stack+0x65>
	{
		return -1;
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	8a e6       	ldi	r24, 0x6A	; 106
     aaa:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     aae:	81 11       	cpse	r24, r1
     ab0:	5b c0       	rjmp	.+182    	; 0xb68 <__stack+0x69>
	{
		return -1;
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	8b e6       	ldi	r24, 0x6B	; 107
     ab6:	0e 94 b1 02 	call	0x562	; 0x562 <TWI_send_16bit>
     aba:	81 11       	cpse	r24, r1
     abc:	57 c0       	rjmp	.+174    	; 0xb6c <__stack+0x6d>
	{
		return -1;
	}
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
     abe:	85 e7       	ldi	r24, 0x75	; 117
     ac0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_receive_8bit>
	
	if (register_value != 0x68)
     ac4:	88 36       	cpi	r24, 0x68	; 104
     ac6:	09 f0       	breq	.+2      	; 0xaca <IMU_Init+0x88>
     ac8:	53 c0       	rjmp	.+166    	; 0xb70 <__stack+0x71>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aca:	2f ef       	ldi	r18, 0xFF	; 255
     acc:	83 ec       	ldi	r24, 0xC3	; 195
     ace:	99 e0       	ldi	r25, 0x09	; 9
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	80 40       	sbci	r24, 0x00	; 0
     ad4:	90 40       	sbci	r25, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <IMU_Init+0x8e>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <IMU_Init+0x98>
     ada:	00 00       	nop
		return -2;
	}
	
	_delay_ms(200);
	
	read_acceleration(0);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <read_acceleration>
	x_offset_acc = acceleration_x;
     ae2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <acceleration_x>
     ae6:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <acceleration_x+0x1>
     aea:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <x_offset_acc+0x1>
     aee:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <x_offset_acc>
	y_offset_acc = acceleration_y;
     af2:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <acceleration_y>
     af6:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <acceleration_y+0x1>
     afa:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <y_offset_acc+0x1>
     afe:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <y_offset_acc>
	z_offset_acc = acceleration_z;
     b02:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <acceleration_z>
     b06:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <acceleration_z+0x1>
     b0a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
     b0e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
	
	read_gyroscope(0);
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	0e 94 92 04 	call	0x924	; 0x924 <read_gyroscope>
	x_offset_gyro = gyroscope_x;
     b18:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <gyroscope_x>
     b1c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <gyroscope_x+0x1>
     b20:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <x_offset_gyro+0x1>
     b24:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <x_offset_gyro>
	y_offset_gyro = gyroscope_y;
     b28:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <gyroscope_y>
     b2c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <gyroscope_y+0x1>
     b30:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <y_offset_gyro+0x1>
     b34:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <y_offset_gyro>
	z_offset_gyro = gyroscope_z;
     b38:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <gyroscope_z>
     b3c:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <gyroscope_z+0x1>
     b40:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <z_offset_gyro+0x1>
     b44:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <z_offset_gyro>
	
	return register_value;
     b48:	88 e6       	ldi	r24, 0x68	; 104
     b4a:	08 95       	ret
	select_sensitivity_acc(2);
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
	{
		return -1;
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	08 95       	ret
	}
	register_value = sensitivity_gyro_register; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
	{
		return -1;
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	08 95       	ret
	}
	register_value = sensitivity_acc_register; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
	{
		return -1;
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	08 95       	ret
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
	{
		return -1;
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	08 95       	ret
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
	{
		return -1;
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
	{
		return -1;
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
	{
		return -1;
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	08 95       	ret
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
	{
		return -1;
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	08 95       	ret
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
	{
		return -1;
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	08 95       	ret
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
	
	if (register_value != 0x68)
	{
		return -2;
     b70:	8e ef       	ldi	r24, 0xFE	; 254
	x_offset_gyro = gyroscope_x;
	y_offset_gyro = gyroscope_y;
	z_offset_gyro = gyroscope_z;
	
	return register_value;
}
     b72:	08 95       	ret

00000b74 <IMU_who_i_am>:
	TWI_stop();
	
	return 0;
}

uint8_t IMU_who_i_am(uint8_t print){
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	d8 2f       	mov	r29, r24
	uint8_t whoiam = TWI_receive_8bit(0x75);
     b7a:	85 e7       	ldi	r24, 0x75	; 117
     b7c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_receive_8bit>
     b80:	c8 2f       	mov	r28, r24
	
	if (print == 1)
     b82:	d1 30       	cpi	r29, 0x01	; 1
     b84:	29 f4       	brne	.+10     	; 0xb90 <IMU_who_i_am+0x1c>
	{
		USART_Transmit(whoiam);
     b86:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit('\n');
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	}
	
	return whoiam;
}
     b90:	8c 2f       	mov	r24, r28
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <temperature>:

int8_t temperature(uint8_t print){
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	d8 2f       	mov	r29, r24
	int8_t temperature_read = (((float) TWI_receive_16bit(0x3b))/340 + 36.53);
     b9e:	8b e3       	ldi	r24, 0x3B	; 59
     ba0:	0e 94 0c 03 	call	0x618	; 0x618 <TWI_receive_16bit>
     ba4:	bc 01       	movw	r22, r24
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a ea       	ldi	r20, 0xAA	; 170
     bb4:	53 e4       	ldi	r21, 0x43	; 67
     bb6:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     bba:	28 eb       	ldi	r18, 0xB8	; 184
     bbc:	3e e1       	ldi	r19, 0x1E	; 30
     bbe:	42 e1       	ldi	r20, 0x12	; 18
     bc0:	52 e4       	ldi	r21, 0x42	; 66
     bc2:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
     bc6:	0e 94 22 11 	call	0x2244	; 0x2244 <__fixsfsi>
     bca:	c6 2f       	mov	r28, r22
	
	if (print == 1)
     bcc:	d1 30       	cpi	r29, 0x01	; 1
     bce:	31 f4       	brne	.+12     	; 0xbdc <temperature+0x44>
	{
		USART_Transmit(temperature_read);
     bd0:	86 2f       	mov	r24, r22
     bd2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit('\n');
     bd6:	8a e0       	ldi	r24, 0x0A	; 10
     bd8:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	}
	
	return temperature_read;
}
     bdc:	8c 2f       	mov	r24, r28
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <computed_acceleration>:

void computed_acceleration(uint8_t print){
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	c8 2f       	mov	r28, r24
	accx = ((float) acceleration_x / (float)sensitivity_acc) * 98.1;
     bf4:	00 91 90 01 	lds	r16, 0x0190	; 0x800190 <acceleration_x>
     bf8:	10 91 91 01 	lds	r17, 0x0191	; 0x800191 <acceleration_x+0x1>
     bfc:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <sensitivity_acc>
     c00:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <sensitivity_acc+0x1>
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
     c0c:	6b 01       	movw	r12, r22
     c0e:	7c 01       	movw	r14, r24
     c10:	b8 01       	movw	r22, r16
     c12:	11 0f       	add	r17, r17
     c14:	88 0b       	sbc	r24, r24
     c16:	99 0b       	sbc	r25, r25
     c18:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
     c1c:	a7 01       	movw	r20, r14
     c1e:	96 01       	movw	r18, r12
     c20:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     c24:	23 e3       	ldi	r18, 0x33	; 51
     c26:	33 e3       	ldi	r19, 0x33	; 51
     c28:	44 ec       	ldi	r20, 0xC4	; 196
     c2a:	52 e4       	ldi	r21, 0x42	; 66
     c2c:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     c30:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <accx>
     c34:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <accx+0x1>
     c38:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <accx+0x2>
     c3c:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <accx+0x3>
	accy = ((float) acceleration_y / (float)sensitivity_acc) * 98.1;
     c40:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <acceleration_y>
     c44:	70 91 7e 01 	lds	r23, 0x017E	; 0x80017e <acceleration_y+0x1>
     c48:	07 2e       	mov	r0, r23
     c4a:	00 0c       	add	r0, r0
     c4c:	88 0b       	sbc	r24, r24
     c4e:	99 0b       	sbc	r25, r25
     c50:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
     c54:	a7 01       	movw	r20, r14
     c56:	96 01       	movw	r18, r12
     c58:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     c5c:	23 e3       	ldi	r18, 0x33	; 51
     c5e:	33 e3       	ldi	r19, 0x33	; 51
     c60:	44 ec       	ldi	r20, 0xC4	; 196
     c62:	52 e4       	ldi	r21, 0x42	; 66
     c64:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     c68:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <accy>
     c6c:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <accy+0x1>
     c70:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <accy+0x2>
     c74:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <accy+0x3>
	accz = ((float) acceleration_z / (float)sensitivity_acc) * 98.1;
     c78:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <acceleration_z>
     c7c:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <acceleration_z+0x1>
     c80:	07 2e       	mov	r0, r23
     c82:	00 0c       	add	r0, r0
     c84:	88 0b       	sbc	r24, r24
     c86:	99 0b       	sbc	r25, r25
     c88:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
     c8c:	a7 01       	movw	r20, r14
     c8e:	96 01       	movw	r18, r12
     c90:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     c94:	23 e3       	ldi	r18, 0x33	; 51
     c96:	33 e3       	ldi	r19, 0x33	; 51
     c98:	44 ec       	ldi	r20, 0xC4	; 196
     c9a:	52 e4       	ldi	r21, 0x42	; 66
     c9c:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     ca0:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <accz>
     ca4:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <accz+0x1>
     ca8:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <accz+0x2>
     cac:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <accz+0x3>
	
	if (print == 1)
     cb0:	c1 30       	cpi	r28, 0x01	; 1
     cb2:	51 f5       	brne	.+84     	; 0xd08 <computed_acceleration+0x124>
	{
		USART_Transmit((uint8_t)accx);
     cb4:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <accx>
     cb8:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <accx+0x1>
     cbc:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <accx+0x2>
     cc0:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <accx+0x3>
     cc4:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     cc8:	86 2f       	mov	r24, r22
     cca:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit((uint8_t)accy);
     cce:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <accy>
     cd2:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <accy+0x1>
     cd6:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <accy+0x2>
     cda:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <accy+0x3>
     cde:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     ce2:	86 2f       	mov	r24, r22
     ce4:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit((uint8_t)accz);
     ce8:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <accz>
     cec:	70 91 94 01 	lds	r23, 0x0194	; 0x800194 <accz+0x1>
     cf0:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <accz+0x2>
     cf4:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <accz+0x3>
     cf8:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     cfc:	86 2f       	mov	r24, r22
     cfe:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit('\n');
     d02:	8a e0       	ldi	r24, 0x0A	; 10
     d04:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	}
}
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	08 95       	ret

00000d18 <computed_gyroscope>:

void computed_gyroscope(uint8_t print){
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	cf 93       	push	r28
     d22:	c8 2f       	mov	r28, r24
	gyrox = ((float) gyroscope_x / sensitivity_gyro);
     d24:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <gyroscope_x>
     d28:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <gyroscope_x+0x1>
     d2c:	c0 90 25 01 	lds	r12, 0x0125	; 0x800125 <sensitivity_gyro>
     d30:	d0 90 26 01 	lds	r13, 0x0126	; 0x800126 <sensitivity_gyro+0x1>
     d34:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <sensitivity_gyro+0x2>
     d38:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <sensitivity_gyro+0x3>
     d3c:	07 2e       	mov	r0, r23
     d3e:	00 0c       	add	r0, r0
     d40:	88 0b       	sbc	r24, r24
     d42:	99 0b       	sbc	r25, r25
     d44:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
     d48:	a7 01       	movw	r20, r14
     d4a:	96 01       	movw	r18, r12
     d4c:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     d50:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <gyrox>
     d54:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <gyrox+0x1>
     d58:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <gyrox+0x2>
     d5c:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <gyrox+0x3>
	gyroy = ((float) gyroscope_y / sensitivity_gyro);
     d60:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <gyroscope_y>
     d64:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <gyroscope_y+0x1>
     d68:	07 2e       	mov	r0, r23
     d6a:	00 0c       	add	r0, r0
     d6c:	88 0b       	sbc	r24, r24
     d6e:	99 0b       	sbc	r25, r25
     d70:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
     d74:	a7 01       	movw	r20, r14
     d76:	96 01       	movw	r18, r12
     d78:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     d7c:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <gyroy>
     d80:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <gyroy+0x1>
     d84:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <gyroy+0x2>
     d88:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <gyroy+0x3>
	gyroz = ((float) gyroscope_z / sensitivity_gyro);
     d8c:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <gyroscope_z>
     d90:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <gyroscope_z+0x1>
     d94:	07 2e       	mov	r0, r23
     d96:	00 0c       	add	r0, r0
     d98:	88 0b       	sbc	r24, r24
     d9a:	99 0b       	sbc	r25, r25
     d9c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
     da0:	a7 01       	movw	r20, r14
     da2:	96 01       	movw	r18, r12
     da4:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     da8:	60 93 75 01 	sts	0x0175, r22	; 0x800175 <gyroz>
     dac:	70 93 76 01 	sts	0x0176, r23	; 0x800176 <gyroz+0x1>
     db0:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <gyroz+0x2>
     db4:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <gyroz+0x3>
	
	if (print == 1)
     db8:	c1 30       	cpi	r28, 0x01	; 1
     dba:	51 f5       	brne	.+84     	; 0xe10 <computed_gyroscope+0xf8>
	{
		USART_Transmit((uint8_t)gyrox);
     dbc:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <gyrox>
     dc0:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <gyrox+0x1>
     dc4:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <gyrox+0x2>
     dc8:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <gyrox+0x3>
     dcc:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     dd0:	86 2f       	mov	r24, r22
     dd2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit((uint8_t)gyroy);
     dd6:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <gyroy>
     dda:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <gyroy+0x1>
     dde:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <gyroy+0x2>
     de2:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <gyroy+0x3>
     de6:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     dea:	86 2f       	mov	r24, r22
     dec:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit((uint8_t)gyroz);
     df0:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <gyroz>
     df4:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <gyroz+0x1>
     df8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <gyroz+0x2>
     dfc:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <gyroz+0x3>
     e00:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
     e04:	86 2f       	mov	r24, r22
     e06:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit('\n');
     e0a:	8a e0       	ldi	r24, 0x0A	; 10
     e0c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	}
}
     e10:	cf 91       	pop	r28
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	08 95       	ret

00000e1c <compute_angle_acc>:

void compute_angle_acc(uint8_t print){
     e1c:	4f 92       	push	r4
     e1e:	5f 92       	push	r5
     e20:	6f 92       	push	r6
     e22:	7f 92       	push	r7
     e24:	8f 92       	push	r8
     e26:	9f 92       	push	r9
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	2d 97       	sbiw	r28, 0x0d	; 13
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	8d 87       	std	Y+13, r24	; 0x0d
	
	Angle_X_Acc = (int8_t) (atan(accx/((float)sqrt(accy*accy+accz*accz)))*180.0/3.1415); //transform from radiants to degree
     e4a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <accx>
     e4e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <accx+0x1>
     e52:	a0 91 9d 01 	lds	r26, 0x019D	; 0x80019d <accx+0x2>
     e56:	b0 91 9e 01 	lds	r27, 0x019E	; 0x80019e <accx+0x3>
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	af 83       	std	Y+7, r26	; 0x07
     e60:	b8 87       	std	Y+8, r27	; 0x08
     e62:	c0 90 7f 01 	lds	r12, 0x017F	; 0x80017f <accy>
     e66:	d0 90 80 01 	lds	r13, 0x0180	; 0x800180 <accy+0x1>
     e6a:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <accy+0x2>
     e6e:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <accy+0x3>
     e72:	80 90 7f 01 	lds	r8, 0x017F	; 0x80017f <accy>
     e76:	90 90 80 01 	lds	r9, 0x0180	; 0x800180 <accy+0x1>
     e7a:	a0 90 81 01 	lds	r10, 0x0181	; 0x800181 <accy+0x2>
     e7e:	b0 90 82 01 	lds	r11, 0x0182	; 0x800182 <accy+0x3>
     e82:	40 90 93 01 	lds	r4, 0x0193	; 0x800193 <accz>
     e86:	50 90 94 01 	lds	r5, 0x0194	; 0x800194 <accz+0x1>
     e8a:	60 90 95 01 	lds	r6, 0x0195	; 0x800195 <accz+0x2>
     e8e:	70 90 96 01 	lds	r7, 0x0196	; 0x800196 <accz+0x3>
     e92:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <accz>
     e96:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <accz+0x1>
     e9a:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <accz+0x2>
     e9e:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <accz+0x3>
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	ab 83       	std	Y+3, r26	; 0x03
     ea8:	bc 83       	std	Y+4, r27	; 0x04
     eaa:	a5 01       	movw	r20, r10
     eac:	94 01       	movw	r18, r8
     eae:	c7 01       	movw	r24, r14
     eb0:	b6 01       	movw	r22, r12
     eb2:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     eb6:	69 87       	std	Y+9, r22	; 0x09
     eb8:	7a 87       	std	Y+10, r23	; 0x0a
     eba:	8b 87       	std	Y+11, r24	; 0x0b
     ebc:	9c 87       	std	Y+12, r25	; 0x0c
     ebe:	a5 01       	movw	r20, r10
     ec0:	94 01       	movw	r18, r8
     ec2:	c7 01       	movw	r24, r14
     ec4:	b6 01       	movw	r22, r12
     ec6:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     eca:	6b 01       	movw	r12, r22
     ecc:	7c 01       	movw	r14, r24
     ece:	29 81       	ldd	r18, Y+1	; 0x01
     ed0:	3a 81       	ldd	r19, Y+2	; 0x02
     ed2:	4b 81       	ldd	r20, Y+3	; 0x03
     ed4:	5c 81       	ldd	r21, Y+4	; 0x04
     ed6:	c3 01       	movw	r24, r6
     ed8:	b2 01       	movw	r22, r4
     eda:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	c7 01       	movw	r24, r14
     ee4:	b6 01       	movw	r22, r12
     ee6:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
     eea:	0e 94 88 12 	call	0x2510	; 0x2510 <sqrt>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	6d 81       	ldd	r22, Y+5	; 0x05
     ef4:	7e 81       	ldd	r23, Y+6	; 0x06
     ef6:	8f 81       	ldd	r24, Y+7	; 0x07
     ef8:	98 85       	ldd	r25, Y+8	; 0x08
     efa:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     efe:	0e 94 81 10 	call	0x2102	; 0x2102 <atan>
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	44 e3       	ldi	r20, 0x34	; 52
     f08:	53 e4       	ldi	r21, 0x43	; 67
     f0a:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     f0e:	26 e5       	ldi	r18, 0x56	; 86
     f10:	3e e0       	ldi	r19, 0x0E	; 14
     f12:	49 e4       	ldi	r20, 0x49	; 73
     f14:	50 e4       	ldi	r21, 0x40	; 64
     f16:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     f1a:	0e 94 22 11 	call	0x2244	; 0x2244 <__fixsfsi>
     f1e:	06 2e       	mov	r0, r22
     f20:	00 0c       	add	r0, r0
     f22:	77 0b       	sbc	r23, r23
     f24:	88 0b       	sbc	r24, r24
     f26:	99 0b       	sbc	r25, r25
     f28:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
     f2c:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <Angle_X_Acc>
     f30:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <Angle_X_Acc+0x1>
     f34:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <Angle_X_Acc+0x2>
     f38:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <Angle_X_Acc+0x3>
	Angle_Y_Acc = (int8_t) (atan(accy/((float)sqrt(accx*accx+accz*accz)))*180.0/3.1415); //transform from radiants to degree
     f3c:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <accy>
     f40:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <accy+0x1>
     f44:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <accy+0x2>
     f48:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <accy+0x3>
     f4c:	8d 83       	std	Y+5, r24	; 0x05
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	af 83       	std	Y+7, r26	; 0x07
     f52:	b8 87       	std	Y+8, r27	; 0x08
     f54:	c0 90 9b 01 	lds	r12, 0x019B	; 0x80019b <accx>
     f58:	d0 90 9c 01 	lds	r13, 0x019C	; 0x80019c <accx+0x1>
     f5c:	e0 90 9d 01 	lds	r14, 0x019D	; 0x80019d <accx+0x2>
     f60:	f0 90 9e 01 	lds	r15, 0x019E	; 0x80019e <accx+0x3>
     f64:	80 90 9b 01 	lds	r8, 0x019B	; 0x80019b <accx>
     f68:	90 90 9c 01 	lds	r9, 0x019C	; 0x80019c <accx+0x1>
     f6c:	a0 90 9d 01 	lds	r10, 0x019D	; 0x80019d <accx+0x2>
     f70:	b0 90 9e 01 	lds	r11, 0x019E	; 0x80019e <accx+0x3>
     f74:	40 90 93 01 	lds	r4, 0x0193	; 0x800193 <accz>
     f78:	50 90 94 01 	lds	r5, 0x0194	; 0x800194 <accz+0x1>
     f7c:	60 90 95 01 	lds	r6, 0x0195	; 0x800195 <accz+0x2>
     f80:	70 90 96 01 	lds	r7, 0x0196	; 0x800196 <accz+0x3>
     f84:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <accz>
     f88:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <accz+0x1>
     f8c:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <accz+0x2>
     f90:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <accz+0x3>
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	ab 83       	std	Y+3, r26	; 0x03
     f9a:	bc 83       	std	Y+4, r27	; 0x04
     f9c:	a5 01       	movw	r20, r10
     f9e:	94 01       	movw	r18, r8
     fa0:	c7 01       	movw	r24, r14
     fa2:	b6 01       	movw	r22, r12
     fa4:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     fa8:	69 87       	std	Y+9, r22	; 0x09
     faa:	7a 87       	std	Y+10, r23	; 0x0a
     fac:	8b 87       	std	Y+11, r24	; 0x0b
     fae:	9c 87       	std	Y+12, r25	; 0x0c
     fb0:	a5 01       	movw	r20, r10
     fb2:	94 01       	movw	r18, r8
     fb4:	c7 01       	movw	r24, r14
     fb6:	b6 01       	movw	r22, r12
     fb8:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     fbc:	6b 01       	movw	r12, r22
     fbe:	7c 01       	movw	r14, r24
     fc0:	29 81       	ldd	r18, Y+1	; 0x01
     fc2:	3a 81       	ldd	r19, Y+2	; 0x02
     fc4:	4b 81       	ldd	r20, Y+3	; 0x03
     fc6:	5c 81       	ldd	r21, Y+4	; 0x04
     fc8:	c3 01       	movw	r24, r6
     fca:	b2 01       	movw	r22, r4
     fcc:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
     fd0:	9b 01       	movw	r18, r22
     fd2:	ac 01       	movw	r20, r24
     fd4:	c7 01       	movw	r24, r14
     fd6:	b6 01       	movw	r22, r12
     fd8:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
     fdc:	0e 94 88 12 	call	0x2510	; 0x2510 <sqrt>
     fe0:	9b 01       	movw	r18, r22
     fe2:	ac 01       	movw	r20, r24
     fe4:	6d 81       	ldd	r22, Y+5	; 0x05
     fe6:	7e 81       	ldd	r23, Y+6	; 0x06
     fe8:	8f 81       	ldd	r24, Y+7	; 0x07
     fea:	98 85       	ldd	r25, Y+8	; 0x08
     fec:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
     ff0:	0e 94 81 10 	call	0x2102	; 0x2102 <atan>
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	44 e3       	ldi	r20, 0x34	; 52
     ffa:	53 e4       	ldi	r21, 0x43	; 67
     ffc:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1000:	26 e5       	ldi	r18, 0x56	; 86
    1002:	3e e0       	ldi	r19, 0x0E	; 14
    1004:	49 e4       	ldi	r20, 0x49	; 73
    1006:	50 e4       	ldi	r21, 0x40	; 64
    1008:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
    100c:	0e 94 22 11 	call	0x2244	; 0x2244 <__fixsfsi>
    1010:	06 2e       	mov	r0, r22
    1012:	00 0c       	add	r0, r0
    1014:	77 0b       	sbc	r23, r23
    1016:	88 0b       	sbc	r24, r24
    1018:	99 0b       	sbc	r25, r25
    101a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    101e:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <Angle_Y_Acc>
    1022:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <Angle_Y_Acc+0x1>
    1026:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <Angle_Y_Acc+0x2>
    102a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <Angle_Y_Acc+0x3>
	
	if (print == 1)
    102e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1030:	91 30       	cpi	r25, 0x01	; 1
    1032:	e9 f4       	brne	.+58     	; 0x106e <compute_angle_acc+0x252>
	{
		USART_Transmit((uint8_t)Angle_X_Acc);
    1034:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <Angle_X_Acc>
    1038:	70 91 84 01 	lds	r23, 0x0184	; 0x800184 <Angle_X_Acc+0x1>
    103c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Angle_X_Acc+0x2>
    1040:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <Angle_X_Acc+0x3>
    1044:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    1048:	86 2f       	mov	r24, r22
    104a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit((uint8_t)Angle_Y_Acc);
    104e:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <Angle_Y_Acc>
    1052:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <Angle_Y_Acc+0x1>
    1056:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <Angle_Y_Acc+0x2>
    105a:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <Angle_Y_Acc+0x3>
    105e:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    1062:	86 2f       	mov	r24, r22
    1064:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit('\n');
    1068:	8a e0       	ldi	r24, 0x0A	; 10
    106a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	}
}
    106e:	2d 96       	adiw	r28, 0x0d	; 13
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	8f 90       	pop	r8
    108e:	7f 90       	pop	r7
    1090:	6f 90       	pop	r6
    1092:	5f 90       	pop	r5
    1094:	4f 90       	pop	r4
    1096:	08 95       	ret

00001098 <compute_angle_gyro>:

void compute_angle_gyro(uint8_t print){
    1098:	8f 92       	push	r8
    109a:	9f 92       	push	r9
    109c:	af 92       	push	r10
    109e:	bf 92       	push	r11
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	cf 93       	push	r28
    10aa:	c8 2f       	mov	r28, r24
	
	//gyrox = ((float) gyroscope_x / 65);
	//gyroy = ((float) gyroscope_y / 65);
	//gyroz = ((float) gyroscope_z / 65);
	
	float delta_time = time_precision(last_sample_gyro, last_sample_gyro_mod); // check ths
    10ac:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <last_sample_gyro_mod>
    10b0:	70 91 72 01 	lds	r23, 0x0172	; 0x800172 <last_sample_gyro_mod+0x1>
    10b4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <last_sample_gyro>
    10b8:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <last_sample_gyro+0x1>
    10bc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <time_precision>
    10c0:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    10c4:	6b 01       	movw	r12, r22
    10c6:	7c 01       	movw	r14, r24
	
	Angle_X_Gyro = Angle_X_Gyro + (gyrox*((float)delta_time))/249000.0; //transform from radiants to degree
    10c8:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <gyrox>
    10cc:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <gyrox+0x1>
    10d0:	40 91 99 01 	lds	r20, 0x0199	; 0x800199 <gyrox+0x2>
    10d4:	50 91 9a 01 	lds	r21, 0x019A	; 0x80019a <gyrox+0x3>
    10d8:	80 90 40 01 	lds	r8, 0x0140	; 0x800140 <Angle_X_Gyro>
    10dc:	90 90 41 01 	lds	r9, 0x0141	; 0x800141 <Angle_X_Gyro+0x1>
    10e0:	a0 90 42 01 	lds	r10, 0x0142	; 0x800142 <Angle_X_Gyro+0x2>
    10e4:	b0 90 43 01 	lds	r11, 0x0143	; 0x800143 <Angle_X_Gyro+0x3>
    10e8:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	3a e2       	ldi	r19, 0x2A	; 42
    10f0:	43 e7       	ldi	r20, 0x73	; 115
    10f2:	58 e4       	ldi	r21, 0x48	; 72
    10f4:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
    10f8:	a5 01       	movw	r20, r10
    10fa:	94 01       	movw	r18, r8
    10fc:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    1100:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <Angle_X_Gyro>
    1104:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <Angle_X_Gyro+0x1>
    1108:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Angle_X_Gyro+0x2>
    110c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <Angle_X_Gyro+0x3>
	Angle_Y_Gyro = Angle_Y_Gyro + (gyroy*((float)delta_time))/249000.0;  //transform from radiants to degree
    1110:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <gyroy>
    1114:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <gyroy+0x1>
    1118:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <gyroy+0x2>
    111c:	50 91 a2 01 	lds	r21, 0x01A2	; 0x8001a2 <gyroy+0x3>
    1120:	80 90 3c 01 	lds	r8, 0x013C	; 0x80013c <Angle_Y_Gyro>
    1124:	90 90 3d 01 	lds	r9, 0x013D	; 0x80013d <Angle_Y_Gyro+0x1>
    1128:	a0 90 3e 01 	lds	r10, 0x013E	; 0x80013e <Angle_Y_Gyro+0x2>
    112c:	b0 90 3f 01 	lds	r11, 0x013F	; 0x80013f <Angle_Y_Gyro+0x3>
    1130:	c7 01       	movw	r24, r14
    1132:	b6 01       	movw	r22, r12
    1134:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3a e2       	ldi	r19, 0x2A	; 42
    113c:	43 e7       	ldi	r20, 0x73	; 115
    113e:	58 e4       	ldi	r21, 0x48	; 72
    1140:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
    1144:	a5 01       	movw	r20, r10
    1146:	94 01       	movw	r18, r8
    1148:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    114c:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <Angle_Y_Gyro>
    1150:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <Angle_Y_Gyro+0x1>
    1154:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Angle_Y_Gyro+0x2>
    1158:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Angle_Y_Gyro+0x3>

	last_sample_gyro = system_tick_MG_p;
    115c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <system_tick_MG_p>
    1160:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <system_tick_MG_p+0x1>
    1164:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <last_sample_gyro+0x1>
    1168:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <last_sample_gyro>
	last_sample_gyro_mod = system_tick_MG_p_mod;
    116c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <system_tick_MG_p_mod>
    1170:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <system_tick_MG_p_mod+0x1>
    1174:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <last_sample_gyro_mod+0x1>
    1178:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <last_sample_gyro_mod>
	
	if (print == 1)
    117c:	c1 30       	cpi	r28, 0x01	; 1
    117e:	01 f5       	brne	.+64     	; 0x11c0 <compute_angle_gyro+0x128>
	{
		USART_Transmit((uint8_t)-Angle_Y_Gyro);
    1180:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Angle_Y_Gyro>
    1184:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <Angle_Y_Gyro+0x1>
    1188:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <Angle_Y_Gyro+0x2>
    118c:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <Angle_Y_Gyro+0x3>
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	90 58       	subi	r25, 0x80	; 128
    1196:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    119a:	86 2f       	mov	r24, r22
    119c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit((uint8_t)Angle_X_Gyro);
    11a0:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <Angle_X_Gyro>
    11a4:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <Angle_X_Gyro+0x1>
    11a8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Angle_X_Gyro+0x2>
    11ac:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <Angle_X_Gyro+0x3>
    11b0:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    11b4:	86 2f       	mov	r24, r22
    11b6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit('\n');
    11ba:	8a e0       	ldi	r24, 0x0A	; 10
    11bc:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	}
}
    11c0:	cf 91       	pop	r28
    11c2:	ff 90       	pop	r15
    11c4:	ef 90       	pop	r14
    11c6:	df 90       	pop	r13
    11c8:	cf 90       	pop	r12
    11ca:	bf 90       	pop	r11
    11cc:	af 90       	pop	r10
    11ce:	9f 90       	pop	r9
    11d0:	8f 90       	pop	r8
    11d2:	08 95       	ret

000011d4 <angle_filtered>:
volatile int8_t AngleX;
volatile int8_t AngleY;

float acc_contribution = 0.1;

void angle_filtered(uint8_t print){
    11d4:	4f 92       	push	r4
    11d6:	5f 92       	push	r5
    11d8:	6f 92       	push	r6
    11da:	7f 92       	push	r7
    11dc:	8f 92       	push	r8
    11de:	9f 92       	push	r9
    11e0:	af 92       	push	r10
    11e2:	bf 92       	push	r11
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <angle_filtered+0x1e>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <angle_filtered+0x20>
    11f4:	1f 92       	push	r1
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	8d 83       	std	Y+5, r24	; 0x05
	AngleX = acc_contribution*Angle_X_Acc - (1-acc_contribution)*Angle_Y_Gyro; //Right math, wrong variable names - to correct in future version
    11fc:	c0 90 1f 01 	lds	r12, 0x011F	; 0x80011f <acc_contribution>
    1200:	d0 90 20 01 	lds	r13, 0x0120	; 0x800120 <acc_contribution+0x1>
    1204:	e0 90 21 01 	lds	r14, 0x0121	; 0x800121 <acc_contribution+0x2>
    1208:	f0 90 22 01 	lds	r15, 0x0122	; 0x800122 <acc_contribution+0x3>
    120c:	40 90 83 01 	lds	r4, 0x0183	; 0x800183 <Angle_X_Acc>
    1210:	50 90 84 01 	lds	r5, 0x0184	; 0x800184 <Angle_X_Acc+0x1>
    1214:	60 90 85 01 	lds	r6, 0x0185	; 0x800185 <Angle_X_Acc+0x2>
    1218:	70 90 86 01 	lds	r7, 0x0186	; 0x800186 <Angle_X_Acc+0x3>
    121c:	a7 01       	movw	r20, r14
    121e:	96 01       	movw	r18, r12
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	80 e8       	ldi	r24, 0x80	; 128
    1226:	9f e3       	ldi	r25, 0x3F	; 63
    1228:	0e 94 14 10 	call	0x2028	; 0x2028 <__subsf3>
    122c:	69 83       	std	Y+1, r22	; 0x01
    122e:	7a 83       	std	Y+2, r23	; 0x02
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	80 90 3c 01 	lds	r8, 0x013C	; 0x80013c <Angle_Y_Gyro>
    1238:	90 90 3d 01 	lds	r9, 0x013D	; 0x80013d <Angle_Y_Gyro+0x1>
    123c:	a0 90 3e 01 	lds	r10, 0x013E	; 0x80013e <Angle_Y_Gyro+0x2>
    1240:	b0 90 3f 01 	lds	r11, 0x013F	; 0x80013f <Angle_Y_Gyro+0x3>
    1244:	a3 01       	movw	r20, r6
    1246:	92 01       	movw	r18, r4
    1248:	c7 01       	movw	r24, r14
    124a:	b6 01       	movw	r22, r12
    124c:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1250:	2b 01       	movw	r4, r22
    1252:	3c 01       	movw	r6, r24
    1254:	a5 01       	movw	r20, r10
    1256:	94 01       	movw	r18, r8
    1258:	69 81       	ldd	r22, Y+1	; 0x01
    125a:	7a 81       	ldd	r23, Y+2	; 0x02
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1264:	9b 01       	movw	r18, r22
    1266:	ac 01       	movw	r20, r24
    1268:	c3 01       	movw	r24, r6
    126a:	b2 01       	movw	r22, r4
    126c:	0e 94 14 10 	call	0x2028	; 0x2028 <__subsf3>
    1270:	0e 94 22 11 	call	0x2244	; 0x2244 <__fixsfsi>
    1274:	60 93 87 01 	sts	0x0187, r22	; 0x800187 <AngleX>
	AngleY = acc_contribution*Angle_Y_Acc + (1-acc_contribution)*Angle_X_Gyro; //Right math, wrong variable names - to correct in future version
    1278:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <Angle_Y_Acc>
    127c:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <Angle_Y_Acc+0x1>
    1280:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <Angle_Y_Acc+0x2>
    1284:	50 91 8b 01 	lds	r21, 0x018B	; 0x80018b <Angle_Y_Acc+0x3>
    1288:	40 90 40 01 	lds	r4, 0x0140	; 0x800140 <Angle_X_Gyro>
    128c:	50 90 41 01 	lds	r5, 0x0141	; 0x800141 <Angle_X_Gyro+0x1>
    1290:	60 90 42 01 	lds	r6, 0x0142	; 0x800142 <Angle_X_Gyro+0x2>
    1294:	70 90 43 01 	lds	r7, 0x0143	; 0x800143 <Angle_X_Gyro+0x3>
    1298:	c7 01       	movw	r24, r14
    129a:	b6 01       	movw	r22, r12
    129c:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    12a0:	6b 01       	movw	r12, r22
    12a2:	7c 01       	movw	r14, r24
    12a4:	a3 01       	movw	r20, r6
    12a6:	92 01       	movw	r18, r4
    12a8:	69 81       	ldd	r22, Y+1	; 0x01
    12aa:	7a 81       	ldd	r23, Y+2	; 0x02
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	c7 01       	movw	r24, r14
    12ba:	b6 01       	movw	r22, r12
    12bc:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    12c0:	0e 94 22 11 	call	0x2244	; 0x2244 <__fixsfsi>
    12c4:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <AngleY>

	if (print == 1)
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	59 f4       	brne	.+22     	; 0x12e4 <angle_filtered+0x110>
	{
		USART_Transmit((uint8_t)AngleX);
    12ce:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <AngleX>
    12d2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit((uint8_t)AngleY);
    12d6:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <AngleY>
    12da:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
		USART_Transmit('\n');
    12de:	8a e0       	ldi	r24, 0x0A	; 10
    12e0:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	}
	
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	bf 90       	pop	r11
    12fc:	af 90       	pop	r10
    12fe:	9f 90       	pop	r9
    1300:	8f 90       	pop	r8
    1302:	7f 90       	pop	r7
    1304:	6f 90       	pop	r6
    1306:	5f 90       	pop	r5
    1308:	4f 90       	pop	r4
    130a:	08 95       	ret

0000130c <main>:
volatile uint8_t ISR_USART_Receive = 0;


int main(void)
{
	DDRD = 0b00000000; //Makes PORTD as Input
    130c:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00001111; //Internal Pull Up enabled
    130e:	8f e0       	ldi	r24, 0x0F	; 15
    1310:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0b11111111;
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	84 b9       	out	0x04, r24	; 4


	timer_init();
    1316:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <timer_init>
	
	TWI_init();
    131a:	0e 94 c0 01 	call	0x380	; 0x380 <TWI_init>
	USART_Init(57600);
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	91 ee       	ldi	r25, 0xE1	; 225
    1322:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <USART_Init>
	
	USART_Transmit(IMU_Init());
    1326:	0e 94 21 05 	call	0xa42	; 0xa42 <IMU_Init>
    132a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
	
	interrupt_init();
    132e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <interrupt_init>
	
	sei(); //cli(); countermeasure
    1332:	78 94       	sei
	while (1)
	{
		aux1 = 50; //for development purpose only
		if (aux1 > 25) //taking some noise into account
		{
			is_started = 1;
    1334:	11 e0       	ldi	r17, 0x01	; 1
	sei(); //cli(); countermeasure
	
	
	while (1)
	{
		aux1 = 50; //for development purpose only
    1336:	c2 e3       	ldi	r28, 0x32	; 50
		if (aux1 > 25) //taking some noise into account
		{
			is_started = 1;
    1338:	d1 2f       	mov	r29, r17
	sei(); //cli(); countermeasure
	
	
	while (1)
	{
		aux1 = 50; //for development purpose only
    133a:	c0 93 68 01 	sts	0x0168, r28	; 0x800168 <aux1>
		if (aux1 > 25) //taking some noise into account
    133e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <aux1>
    1342:	8a 31       	cpi	r24, 0x1A	; 26
    1344:	18 f0       	brcs	.+6      	; 0x134c <main+0x40>
		{
			is_started = 1;
    1346:	d0 93 5f 01 	sts	0x015F, r29	; 0x80015f <is_started>
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <main+0x44>
			}else{
			is_started = 0;
    134c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <is_started>
		}
		
		if (is_started == 1)
    1350:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <is_started>
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	89 f7       	brne	.-30     	; 0x133a <main+0x2e>
		{
			read_acceleration(1); //refresh acc reading - arg for offset
    1358:	81 2f       	mov	r24, r17
    135a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <read_acceleration>
			read_gyroscope(1); //refresh gyro reading - arg for offset
    135e:	81 2f       	mov	r24, r17
    1360:	0e 94 92 04 	call	0x924	; 0x924 <read_gyroscope>
			
			computed_acceleration(0); //compute acc reading
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <computed_acceleration>
			computed_gyroscope(0); //compute gyro reading
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	0e 94 8c 06 	call	0xd18	; 0xd18 <computed_gyroscope>
			
			compute_angle_acc(0); //compute angle by acc information
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 0e 07 	call	0xe1c	; 0xe1c <compute_angle_acc>
			compute_angle_gyro(0); //compute angle by gyro information
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	0e 94 4c 08 	call	0x1098	; 0x1098 <compute_angle_gyro>
			
			angle_filtered(0); //compute angle filtered btw acc and gyro
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <angle_filtered>
			
			USART_Transmit(throttle);
    1382:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <throttle>
    1386:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
			USART_Transmit('\n');
    138a:	8a e0       	ldi	r24, 0x0A	; 10
    138c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>

			update_PIDs(); //compute new motor speed values with PID controllers
    1390:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <update_PIDs>
			update_motors(); //update motor speeds
    1394:	0e 94 95 0c 	call	0x192a	; 0x192a <update_motors>
    1398:	d0 cf       	rjmp	.-96     	; 0x133a <main+0x2e>

0000139a <PID_Pitch>:
volatile uint8_t motor3 = 0;
volatile uint8_t motor4 = 0;

uint8_t PID[3];

void PID_Pitch(){
    139a:	4f 92       	push	r4
    139c:	5f 92       	push	r5
    139e:	6f 92       	push	r6
    13a0:	7f 92       	push	r7
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29

	error_pitch = map_values(AngleX, 0, 90, 0, 100) - pitch;
    13b6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <AngleX>
    13ba:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <pitch>
    13be:	34 e6       	ldi	r19, 0x64	; 100
    13c0:	83 02       	muls	r24, r19
    13c2:	c0 01       	movw	r24, r0
    13c4:	11 24       	eor	r1, r1
    13c6:	6a e5       	ldi	r22, 0x5A	; 90
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__divmodhi4>
    13ce:	c6 2f       	mov	r28, r22
    13d0:	c2 1b       	sub	r28, r18
    13d2:	c0 93 a7 01 	sts	0x01A7, r28	; 0x8001a7 <error_pitch>

	/*Next the proportional value of the PID is just a proportional constant
	*multiplied by the error*/

	pid_p = k_pitch[0]*error_pitch;
    13d6:	0c e2       	ldi	r16, 0x2C	; 44
    13d8:	11 e0       	ldi	r17, 0x01	; 1
    13da:	f8 01       	movw	r30, r16
    13dc:	b0 80       	ld	r11, Z
    13de:	cb 9d       	mul	r28, r11
    13e0:	b0 2c       	mov	r11, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	b0 92 ad 01 	sts	0x01AD, r11	; 0x8001ad <pid_p>
	
	delta_time_PID = system_tick_MG + 0.0000041*(float)TCNT0 - last_sample_pitch;
    13e8:	e0 90 b1 01 	lds	r14, 0x01B1	; 0x8001b1 <system_tick_MG>
    13ec:	f0 90 b2 01 	lds	r15, 0x01B2	; 0x8001b2 <system_tick_MG+0x1>
    13f0:	66 b5       	in	r22, 0x26	; 38
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    13fc:	2b eb       	ldi	r18, 0xBB	; 187
    13fe:	32 e9       	ldi	r19, 0x92	; 146
    1400:	49 e8       	ldi	r20, 0x89	; 137
    1402:	56 e3       	ldi	r21, 0x36	; 54
    1404:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1408:	2b 01       	movw	r4, r22
    140a:	3c 01       	movw	r6, r24
    140c:	b7 01       	movw	r22, r14
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1416:	9b 01       	movw	r18, r22
    1418:	ac 01       	movw	r20, r24
    141a:	c3 01       	movw	r24, r6
    141c:	b2 01       	movw	r22, r4
    141e:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    1422:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <last_sample_pitch>
    1426:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <last_sample_pitch+0x1>
    142a:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <last_sample_pitch+0x2>
    142e:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <last_sample_pitch+0x3>
    1432:	0e 94 14 10 	call	0x2028	; 0x2028 <__subsf3>
    1436:	6b 01       	movw	r12, r22
    1438:	7c 01       	movw	r14, r24
    143a:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <delta_time_PID>
    143e:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <delta_time_PID+0x1>
    1442:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <delta_time_PID+0x2>
    1446:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <delta_time_PID+0x3>

	pid_i = pid_i+(k_pitch[1]*error_pitch)*delta_time_PID;
    144a:	d0 e0       	ldi	r29, 0x00	; 0
    144c:	f8 01       	movw	r30, r16
    144e:	81 81       	ldd	r24, Z+1	; 0x01
    1450:	8c 9f       	mul	r24, r28
    1452:	b0 01       	movw	r22, r0
    1454:	8d 9f       	mul	r24, r29
    1456:	70 0d       	add	r23, r0
    1458:	11 24       	eor	r1, r1
    145a:	07 2e       	mov	r0, r23
    145c:	00 0c       	add	r0, r0
    145e:	88 0b       	sbc	r24, r24
    1460:	99 0b       	sbc	r25, r25
    1462:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    1466:	a7 01       	movw	r20, r14
    1468:	96 01       	movw	r18, r12
    146a:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    146e:	2b 01       	movw	r4, r22
    1470:	3c 01       	movw	r6, r24
    1472:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <pid_i>
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    1480:	9b 01       	movw	r18, r22
    1482:	ac 01       	movw	r20, r24
    1484:	c3 01       	movw	r24, r6
    1486:	b2 01       	movw	r22, r4
    1488:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    148c:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    1490:	a6 2e       	mov	r10, r22
    1492:	60 93 a9 01 	sts	0x01A9, r22	; 0x8001a9 <pid_i>

	pid_d = k_pitch[2]*((error_pitch - error_pitch_previous)/delta_time_PID);
    1496:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <error_pitch_previous>
    149a:	be 01       	movw	r22, r28
    149c:	68 1b       	sub	r22, r24
    149e:	71 09       	sbc	r23, r1
    14a0:	07 2e       	mov	r0, r23
    14a2:	00 0c       	add	r0, r0
    14a4:	88 0b       	sbc	r24, r24
    14a6:	99 0b       	sbc	r25, r25
    14a8:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    14ac:	a7 01       	movw	r20, r14
    14ae:	96 01       	movw	r18, r12
    14b0:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
    14b4:	6b 01       	movw	r12, r22
    14b6:	7c 01       	movw	r14, r24
    14b8:	f8 01       	movw	r30, r16
    14ba:	62 81       	ldd	r22, Z+2	; 0x02
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    14c6:	9b 01       	movw	r18, r22
    14c8:	ac 01       	movw	r20, r24
    14ca:	c7 01       	movw	r24, r14
    14cc:	b6 01       	movw	r22, r12
    14ce:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    14d2:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    14d6:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <pid_d>

	/*The final PID values is the sum of each of this 3 parts*/
	PID[0] = pid_p + pid_i + pid_d;
    14da:	6a 0d       	add	r22, r10
    14dc:	b6 0e       	add	r11, r22
    14de:	b0 92 a3 01 	sts	0x01A3, r11	; 0x8001a3 <PID>
	
	last_sample_pitch = system_tick_MG + 0.0000041*(float)TCNT0;
    14e2:	c0 91 b1 01 	lds	r28, 0x01B1	; 0x8001b1 <system_tick_MG>
    14e6:	d0 91 b2 01 	lds	r29, 0x01B2	; 0x8001b2 <system_tick_MG+0x1>
    14ea:	66 b5       	in	r22, 0x26	; 38
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    14f6:	2b eb       	ldi	r18, 0xBB	; 187
    14f8:	32 e9       	ldi	r19, 0x92	; 146
    14fa:	49 e8       	ldi	r20, 0x89	; 137
    14fc:	56 e3       	ldi	r21, 0x36	; 54
    14fe:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1502:	6b 01       	movw	r12, r22
    1504:	7c 01       	movw	r14, r24
    1506:	be 01       	movw	r22, r28
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1510:	9b 01       	movw	r18, r22
    1512:	ac 01       	movw	r20, r24
    1514:	c7 01       	movw	r24, r14
    1516:	b6 01       	movw	r22, r12
    1518:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    151c:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <last_sample_pitch>
    1520:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <last_sample_pitch+0x1>
    1524:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <last_sample_pitch+0x2>
    1528:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <last_sample_pitch+0x3>

}
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	bf 90       	pop	r11
    153e:	af 90       	pop	r10
    1540:	7f 90       	pop	r7
    1542:	6f 90       	pop	r6
    1544:	5f 90       	pop	r5
    1546:	4f 90       	pop	r4
    1548:	08 95       	ret

0000154a <PID_Roll>:

void PID_Roll(){
    154a:	4f 92       	push	r4
    154c:	5f 92       	push	r5
    154e:	6f 92       	push	r6
    1550:	7f 92       	push	r7
    1552:	af 92       	push	r10
    1554:	bf 92       	push	r11
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29

	error_roll = map_values(AngleY, 0, 90, 0, 100) - roll;
    1566:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <AngleY>
    156a:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <roll>
    156e:	34 e6       	ldi	r19, 0x64	; 100
    1570:	83 02       	muls	r24, r19
    1572:	c0 01       	movw	r24, r0
    1574:	11 24       	eor	r1, r1
    1576:	6a e5       	ldi	r22, 0x5A	; 90
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__divmodhi4>
    157e:	c6 2f       	mov	r28, r22
    1580:	c2 1b       	sub	r28, r18
    1582:	c0 93 ae 01 	sts	0x01AE, r28	; 0x8001ae <error_roll>

	/*Next the proportional value of the PID is just a proportional constant
	*multiplied by the error*/

	pid_p = k_roll[0]*error_roll;
    1586:	09 e2       	ldi	r16, 0x29	; 41
    1588:	11 e0       	ldi	r17, 0x01	; 1
    158a:	f8 01       	movw	r30, r16
    158c:	b0 80       	ld	r11, Z
    158e:	cb 9d       	mul	r28, r11
    1590:	b0 2c       	mov	r11, r0
    1592:	11 24       	eor	r1, r1
    1594:	b0 92 ad 01 	sts	0x01AD, r11	; 0x8001ad <pid_p>
	
	delta_time_PID = system_tick_MG + 0.0000041*(float)TCNT0 - last_sample_roll;
    1598:	e0 90 b1 01 	lds	r14, 0x01B1	; 0x8001b1 <system_tick_MG>
    159c:	f0 90 b2 01 	lds	r15, 0x01B2	; 0x8001b2 <system_tick_MG+0x1>
    15a0:	66 b5       	in	r22, 0x26	; 38
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    15ac:	2b eb       	ldi	r18, 0xBB	; 187
    15ae:	32 e9       	ldi	r19, 0x92	; 146
    15b0:	49 e8       	ldi	r20, 0x89	; 137
    15b2:	56 e3       	ldi	r21, 0x36	; 54
    15b4:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    15b8:	2b 01       	movw	r4, r22
    15ba:	3c 01       	movw	r6, r24
    15bc:	b7 01       	movw	r22, r14
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	c3 01       	movw	r24, r6
    15cc:	b2 01       	movw	r22, r4
    15ce:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    15d2:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <last_sample_roll>
    15d6:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <last_sample_roll+0x1>
    15da:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <last_sample_roll+0x2>
    15de:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <last_sample_roll+0x3>
    15e2:	0e 94 14 10 	call	0x2028	; 0x2028 <__subsf3>
    15e6:	6b 01       	movw	r12, r22
    15e8:	7c 01       	movw	r14, r24
    15ea:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <delta_time_PID>
    15ee:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <delta_time_PID+0x1>
    15f2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <delta_time_PID+0x2>
    15f6:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <delta_time_PID+0x3>

	pid_i = pid_i+(k_roll[1]*error_roll)*delta_time_PID;
    15fa:	d0 e0       	ldi	r29, 0x00	; 0
    15fc:	f8 01       	movw	r30, r16
    15fe:	81 81       	ldd	r24, Z+1	; 0x01
    1600:	8c 9f       	mul	r24, r28
    1602:	b0 01       	movw	r22, r0
    1604:	8d 9f       	mul	r24, r29
    1606:	70 0d       	add	r23, r0
    1608:	11 24       	eor	r1, r1
    160a:	07 2e       	mov	r0, r23
    160c:	00 0c       	add	r0, r0
    160e:	88 0b       	sbc	r24, r24
    1610:	99 0b       	sbc	r25, r25
    1612:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    1616:	a7 01       	movw	r20, r14
    1618:	96 01       	movw	r18, r12
    161a:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    161e:	2b 01       	movw	r4, r22
    1620:	3c 01       	movw	r6, r24
    1622:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <pid_i>
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	c3 01       	movw	r24, r6
    1636:	b2 01       	movw	r22, r4
    1638:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    163c:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    1640:	a6 2e       	mov	r10, r22
    1642:	60 93 a9 01 	sts	0x01A9, r22	; 0x8001a9 <pid_i>

	pid_d = k_roll[2]*((error_roll - error_roll_previous)/delta_time_PID);
    1646:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <error_roll_previous>
    164a:	be 01       	movw	r22, r28
    164c:	68 1b       	sub	r22, r24
    164e:	71 09       	sbc	r23, r1
    1650:	07 2e       	mov	r0, r23
    1652:	00 0c       	add	r0, r0
    1654:	88 0b       	sbc	r24, r24
    1656:	99 0b       	sbc	r25, r25
    1658:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    165c:	a7 01       	movw	r20, r14
    165e:	96 01       	movw	r18, r12
    1660:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
    1664:	6b 01       	movw	r12, r22
    1666:	7c 01       	movw	r14, r24
    1668:	f8 01       	movw	r30, r16
    166a:	62 81       	ldd	r22, Z+2	; 0x02
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    1676:	9b 01       	movw	r18, r22
    1678:	ac 01       	movw	r20, r24
    167a:	c7 01       	movw	r24, r14
    167c:	b6 01       	movw	r22, r12
    167e:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1682:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    1686:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <pid_d>

	/*The final PID values is the sum of each of this 3 parts*/
	PID[1] = pid_p + pid_i + pid_d;
    168a:	6a 0d       	add	r22, r10
    168c:	b6 0e       	add	r11, r22
    168e:	b0 92 a4 01 	sts	0x01A4, r11	; 0x8001a4 <PID+0x1>
	
	last_sample_roll = system_tick_MG + 0.0000041*(float)TCNT0;
    1692:	c0 91 b1 01 	lds	r28, 0x01B1	; 0x8001b1 <system_tick_MG>
    1696:	d0 91 b2 01 	lds	r29, 0x01B2	; 0x8001b2 <system_tick_MG+0x1>
    169a:	66 b5       	in	r22, 0x26	; 38
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    16a6:	2b eb       	ldi	r18, 0xBB	; 187
    16a8:	32 e9       	ldi	r19, 0x92	; 146
    16aa:	49 e8       	ldi	r20, 0x89	; 137
    16ac:	56 e3       	ldi	r21, 0x36	; 54
    16ae:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    16b2:	6b 01       	movw	r12, r22
    16b4:	7c 01       	movw	r14, r24
    16b6:	be 01       	movw	r22, r28
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    16c0:	9b 01       	movw	r18, r22
    16c2:	ac 01       	movw	r20, r24
    16c4:	c7 01       	movw	r24, r14
    16c6:	b6 01       	movw	r22, r12
    16c8:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    16cc:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <last_sample_roll>
    16d0:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <last_sample_roll+0x1>
    16d4:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <last_sample_roll+0x2>
    16d8:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <last_sample_roll+0x3>

}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
    16ec:	bf 90       	pop	r11
    16ee:	af 90       	pop	r10
    16f0:	7f 90       	pop	r7
    16f2:	6f 90       	pop	r6
    16f4:	5f 90       	pop	r5
    16f6:	4f 90       	pop	r4
    16f8:	08 95       	ret

000016fa <PID_Yaw>:

void PID_Yaw(){
    16fa:	4f 92       	push	r4
    16fc:	5f 92       	push	r5
    16fe:	6f 92       	push	r6
    1700:	7f 92       	push	r7
    1702:	af 92       	push	r10
    1704:	bf 92       	push	r11
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29

	error_yaw = map_values(gyroz, 0, 90, 0, 100) - yaw;
    1716:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <gyroz>
    171a:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <gyroz+0x1>
    171e:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <gyroz+0x2>
    1722:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <gyroz+0x3>
    1726:	d0 91 69 01 	lds	r29, 0x0169	; 0x800169 <yaw>
    172a:	0e 94 22 11 	call	0x2244	; 0x2244 <__fixsfsi>
    172e:	24 e6       	ldi	r18, 0x64	; 100
    1730:	62 02       	muls	r22, r18
    1732:	c0 01       	movw	r24, r0
    1734:	11 24       	eor	r1, r1
    1736:	6a e5       	ldi	r22, 0x5A	; 90
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__divmodhi4>
    173e:	c6 2f       	mov	r28, r22
    1740:	cd 1b       	sub	r28, r29
    1742:	c0 93 ab 01 	sts	0x01AB, r28	; 0x8001ab <error_yaw>

	/*Next the proportional value of the PID is just a proportional constant
	*multiplied by the error*/

	pid_p = k_yaw[0]*error_yaw;
    1746:	0b e5       	ldi	r16, 0x5B	; 91
    1748:	11 e0       	ldi	r17, 0x01	; 1
    174a:	f8 01       	movw	r30, r16
    174c:	b0 80       	ld	r11, Z
    174e:	cb 9d       	mul	r28, r11
    1750:	b0 2c       	mov	r11, r0
    1752:	11 24       	eor	r1, r1
    1754:	b0 92 ad 01 	sts	0x01AD, r11	; 0x8001ad <pid_p>
	
	delta_time_PID = system_tick_MG + 0.0000041*(float)TCNT0 - last_sample_yaw;
    1758:	e0 90 b1 01 	lds	r14, 0x01B1	; 0x8001b1 <system_tick_MG>
    175c:	f0 90 b2 01 	lds	r15, 0x01B2	; 0x8001b2 <system_tick_MG+0x1>
    1760:	66 b5       	in	r22, 0x26	; 38
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    176c:	2b eb       	ldi	r18, 0xBB	; 187
    176e:	32 e9       	ldi	r19, 0x92	; 146
    1770:	49 e8       	ldi	r20, 0x89	; 137
    1772:	56 e3       	ldi	r21, 0x36	; 54
    1774:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1778:	2b 01       	movw	r4, r22
    177a:	3c 01       	movw	r6, r24
    177c:	b7 01       	movw	r22, r14
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
    178a:	c3 01       	movw	r24, r6
    178c:	b2 01       	movw	r22, r4
    178e:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    1792:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <last_sample_yaw>
    1796:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <last_sample_yaw+0x1>
    179a:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <last_sample_yaw+0x2>
    179e:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <last_sample_yaw+0x3>
    17a2:	0e 94 14 10 	call	0x2028	; 0x2028 <__subsf3>
    17a6:	6b 01       	movw	r12, r22
    17a8:	7c 01       	movw	r14, r24
    17aa:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <delta_time_PID>
    17ae:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <delta_time_PID+0x1>
    17b2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <delta_time_PID+0x2>
    17b6:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <delta_time_PID+0x3>

	pid_i = pid_i+(k_yaw[1]*error_yaw)*delta_time_PID;
    17ba:	d0 e0       	ldi	r29, 0x00	; 0
    17bc:	f8 01       	movw	r30, r16
    17be:	81 81       	ldd	r24, Z+1	; 0x01
    17c0:	8c 9f       	mul	r24, r28
    17c2:	b0 01       	movw	r22, r0
    17c4:	8d 9f       	mul	r24, r29
    17c6:	70 0d       	add	r23, r0
    17c8:	11 24       	eor	r1, r1
    17ca:	07 2e       	mov	r0, r23
    17cc:	00 0c       	add	r0, r0
    17ce:	88 0b       	sbc	r24, r24
    17d0:	99 0b       	sbc	r25, r25
    17d2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    17d6:	a7 01       	movw	r20, r14
    17d8:	96 01       	movw	r18, r12
    17da:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    17de:	2b 01       	movw	r4, r22
    17e0:	3c 01       	movw	r6, r24
    17e2:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <pid_i>
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    17f0:	9b 01       	movw	r18, r22
    17f2:	ac 01       	movw	r20, r24
    17f4:	c3 01       	movw	r24, r6
    17f6:	b2 01       	movw	r22, r4
    17f8:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    17fc:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    1800:	a6 2e       	mov	r10, r22
    1802:	60 93 a9 01 	sts	0x01A9, r22	; 0x8001a9 <pid_i>

	pid_d = k_yaw[2]*((error_yaw - error_yaw_previous)/delta_time_PID);
    1806:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <error_yaw_previous>
    180a:	be 01       	movw	r22, r28
    180c:	68 1b       	sub	r22, r24
    180e:	71 09       	sbc	r23, r1
    1810:	07 2e       	mov	r0, r23
    1812:	00 0c       	add	r0, r0
    1814:	88 0b       	sbc	r24, r24
    1816:	99 0b       	sbc	r25, r25
    1818:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    181c:	a7 01       	movw	r20, r14
    181e:	96 01       	movw	r18, r12
    1820:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
    1824:	6b 01       	movw	r12, r22
    1826:	7c 01       	movw	r14, r24
    1828:	f8 01       	movw	r30, r16
    182a:	62 81       	ldd	r22, Z+2	; 0x02
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__floatsisf>
    1836:	9b 01       	movw	r18, r22
    1838:	ac 01       	movw	r20, r24
    183a:	c7 01       	movw	r24, r14
    183c:	b6 01       	movw	r22, r12
    183e:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1842:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    1846:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <pid_d>

	/*The final PID values is the sum of each of this 3 parts*/
	PID[2] = pid_p + pid_i + pid_d;
    184a:	6a 0d       	add	r22, r10
    184c:	b6 0e       	add	r11, r22
    184e:	b0 92 a5 01 	sts	0x01A5, r11	; 0x8001a5 <PID+0x2>
	
	last_sample_yaw = system_tick_MG + 0.0000041*(float)TCNT0;
    1852:	c0 91 b1 01 	lds	r28, 0x01B1	; 0x8001b1 <system_tick_MG>
    1856:	d0 91 b2 01 	lds	r29, 0x01B2	; 0x8001b2 <system_tick_MG+0x1>
    185a:	66 b5       	in	r22, 0x26	; 38
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1866:	2b eb       	ldi	r18, 0xBB	; 187
    1868:	32 e9       	ldi	r19, 0x92	; 146
    186a:	49 e8       	ldi	r20, 0x89	; 137
    186c:	56 e3       	ldi	r21, 0x36	; 54
    186e:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1872:	6b 01       	movw	r12, r22
    1874:	7c 01       	movw	r14, r24
    1876:	be 01       	movw	r22, r28
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1880:	9b 01       	movw	r18, r22
    1882:	ac 01       	movw	r20, r24
    1884:	c7 01       	movw	r24, r14
    1886:	b6 01       	movw	r22, r12
    1888:	0e 94 15 10 	call	0x202a	; 0x202a <__addsf3>
    188c:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <last_sample_yaw>
    1890:	70 93 50 01 	sts	0x0150, r23	; 0x800150 <last_sample_yaw+0x1>
    1894:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <last_sample_yaw+0x2>
    1898:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <last_sample_yaw+0x3>

}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	bf 90       	pop	r11
    18ae:	af 90       	pop	r10
    18b0:	7f 90       	pop	r7
    18b2:	6f 90       	pop	r6
    18b4:	5f 90       	pop	r5
    18b6:	4f 90       	pop	r4
    18b8:	08 95       	ret

000018ba <update_PIDs>:

void update_PIDs(){
	if (throttle > 5)
    18ba:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <throttle>
    18be:	86 30       	cpi	r24, 0x06	; 6
    18c0:	50 f1       	brcs	.+84     	; 0x1916 <update_PIDs+0x5c>
	{
		PID_Pitch();
    18c2:	0e 94 cd 09 	call	0x139a	; 0x139a <PID_Pitch>
		PID_Roll();
    18c6:	0e 94 a5 0a 	call	0x154a	; 0x154a <PID_Roll>
		PID_Yaw();
    18ca:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <PID_Yaw>
		
		motor1 = throttle + PID[0] - PID[1] + PID[2];
    18ce:	e3 ea       	ldi	r30, 0xA3	; 163
    18d0:	f1 e0       	ldi	r31, 0x01	; 1
    18d2:	30 81       	ld	r19, Z
    18d4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <throttle>
    18d8:	21 81       	ldd	r18, Z+1	; 0x01
    18da:	92 81       	ldd	r25, Z+2	; 0x02
    18dc:	83 0f       	add	r24, r19
    18de:	89 0f       	add	r24, r25
    18e0:	82 1b       	sub	r24, r18
    18e2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <motor1>
		motor2 = throttle + PID[0] + PID[1] - PID[2];
    18e6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <throttle>
    18ea:	43 2f       	mov	r20, r19
    18ec:	42 0f       	add	r20, r18
    18ee:	84 0f       	add	r24, r20
    18f0:	89 1b       	sub	r24, r25
    18f2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <motor2>
		motor3 = throttle - PID[0] + PID[1] + PID[2];
    18f6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <throttle>
    18fa:	42 2f       	mov	r20, r18
    18fc:	49 0f       	add	r20, r25
    18fe:	84 0f       	add	r24, r20
    1900:	83 1b       	sub	r24, r19
    1902:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <motor3>
		motor4 = throttle - PID[0] - PID[1] - PID[2];
    1906:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <throttle>
    190a:	83 1b       	sub	r24, r19
    190c:	82 1b       	sub	r24, r18
    190e:	89 1b       	sub	r24, r25
    1910:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <motor4>
    1914:	08 95       	ret
		}else{
		motor1 = 5;
    1916:	85 e0       	ldi	r24, 0x05	; 5
    1918:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <motor1>
		motor2 = 5;
    191c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <motor2>
		motor3 = 5;
    1920:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <motor3>
		motor4 = 5;
    1924:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <motor4>
    1928:	08 95       	ret

0000192a <update_motors>:
	}
}

void update_motors(){
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    192e:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <motor3>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    1932:	45 36       	cpi	r20, 0x65	; 101
    1934:	1c f4       	brge	.+6      	; 0x193c <update_motors+0x12>
	{
		return max;
		}else{
		if(value < min){
    1936:	45 30       	cpi	r20, 0x05	; 5
    1938:	24 f4       	brge	.+8      	; 0x1942 <update_motors+0x18>
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <update_motors+0x16>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    193c:	44 e6       	ldi	r20, 0x64	; 100
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <update_motors+0x18>
		}else{
		if(value < min){
			return min;
    1940:	45 e0       	ldi	r20, 0x05	; 5
	}
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    1942:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <motor1>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    1946:	65 36       	cpi	r22, 0x65	; 101
    1948:	1c f4       	brge	.+6      	; 0x1950 <update_motors+0x26>
	{
		return max;
		}else{
		if(value < min){
    194a:	65 30       	cpi	r22, 0x05	; 5
    194c:	24 f4       	brge	.+8      	; 0x1956 <update_motors+0x2c>
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <update_motors+0x2a>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    1950:	64 e6       	ldi	r22, 0x64	; 100
    1952:	01 c0       	rjmp	.+2      	; 0x1956 <update_motors+0x2c>
		}else{
		if(value < min){
			return min;
    1954:	65 e0       	ldi	r22, 0x05	; 5
	}
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    1956:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <motor2>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    195a:	85 36       	cpi	r24, 0x65	; 101
    195c:	1c f4       	brge	.+6      	; 0x1964 <update_motors+0x3a>
	{
		return max;
		}else{
		if(value < min){
    195e:	85 30       	cpi	r24, 0x05	; 5
    1960:	24 f4       	brge	.+8      	; 0x196a <update_motors+0x40>
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <update_motors+0x3e>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    1964:	84 e6       	ldi	r24, 0x64	; 100
    1966:	01 c0       	rjmp	.+2      	; 0x196a <update_motors+0x40>
		}else{
		if(value < min){
			return min;
    1968:	85 e0       	ldi	r24, 0x05	; 5
	}
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    196a:	01 e0       	ldi	r16, 0x01	; 1
    196c:	10 e0       	ldi	r17, 0x00	; 0
    196e:	24 ef       	ldi	r18, 0xF4	; 244
    1970:	31 e0       	ldi	r19, 0x01	; 1
    1972:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <timer1_16bit_PWM_ABC>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
    1976:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <motor4>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    197a:	85 36       	cpi	r24, 0x65	; 101
    197c:	1c f4       	brge	.+6      	; 0x1984 <update_motors+0x5a>
	{
		return max;
		}else{
		if(value < min){
    197e:	85 30       	cpi	r24, 0x05	; 5
    1980:	24 f4       	brge	.+8      	; 0x198a <update_motors+0x60>
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <update_motors+0x5e>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    1984:	84 e6       	ldi	r24, 0x64	; 100
    1986:	01 c0       	rjmp	.+2      	; 0x198a <update_motors+0x60>
		}else{
		if(value < min){
			return min;
    1988:	85 e0       	ldi	r24, 0x05	; 5
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	64 ef       	ldi	r22, 0xF4	; 244
    1990:	71 e0       	ldi	r23, 0x01	; 1
    1992:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <timer3_16bit_PWM_A>
}
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	08 95       	ret

0000199c <Int_6_En>:
	PCMSK0 = reg;
	PCIFR = 1;
}

void Pin_Change_Disen(){
	PCICR = (0 << PCIE0);
    199c:	8f b7       	in	r24, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	e6 9a       	sbi	0x1c, 6	; 28
    19a2:	ee 9a       	sbi	0x1d, 6	; 29
    19a4:	8f bf       	out	0x3f, r24	; 63
    19a6:	08 95       	ret

000019a8 <Interrupt_Init_Rising_INT6>:
    19a8:	cf 93       	push	r28
    19aa:	cf b7       	in	r28, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	8c b3       	in	r24, 0x1c	; 28
    19b0:	8c bb       	out	0x1c, r24	; 28
    19b2:	ea e6       	ldi	r30, 0x6A	; 106
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	80 63       	ori	r24, 0x30	; 48
    19ba:	80 83       	st	Z, r24
    19bc:	0e 94 ce 0c 	call	0x199c	; 0x199c <Int_6_En>
    19c0:	cf bf       	out	0x3f, r28	; 63
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <Interrupt_Init_Falling_INT6>:
    19c6:	cf 93       	push	r28
    19c8:	cf b7       	in	r28, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	e6 9a       	sbi	0x1c, 6	; 28
    19ce:	ea e6       	ldi	r30, 0x6A	; 106
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 7e       	andi	r24, 0xEF	; 239
    19d6:	80 83       	st	Z, r24
    19d8:	0e 94 ce 0c 	call	0x199c	; 0x199c <Int_6_En>
    19dc:	cf bf       	out	0x3f, r28	; 63
    19de:	cf 91       	pop	r28
    19e0:	08 95       	ret

000019e2 <__vector_7>:
}




ISR(INT6_vect){
    19e2:	1f 92       	push	r1
    19e4:	0f 92       	push	r0
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	0f 92       	push	r0
    19ea:	11 24       	eor	r1, r1
    19ec:	8f 92       	push	r8
    19ee:	9f 92       	push	r9
    19f0:	af 92       	push	r10
    19f2:	bf 92       	push	r11
    19f4:	cf 92       	push	r12
    19f6:	df 92       	push	r13
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	2f 93       	push	r18
    19fe:	3f 93       	push	r19
    1a00:	4f 93       	push	r20
    1a02:	5f 93       	push	r21
    1a04:	6f 93       	push	r22
    1a06:	7f 93       	push	r23
    1a08:	8f 93       	push	r24
    1a0a:	9f 93       	push	r25
    1a0c:	af 93       	push	r26
    1a0e:	bf 93       	push	r27
    1a10:	ef 93       	push	r30
    1a12:	ff 93       	push	r31
	if (flag_rx  == 0)
    1a14:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <flag_rx>
    1a18:	81 11       	cpse	r24, r1
    1a1a:	22 c0       	rjmp	.+68     	; 0x1a60 <__vector_7+0x7e>
	{		
		//period = time_precision(ch_1_rising, ch_1_rising_mod);
		period = 2*249;
    1a1c:	82 ef       	ldi	r24, 0xF2	; 242
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	a0 e0       	ldi	r26, 0x00	; 0
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <period>
    1a28:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <period+0x1>
    1a2c:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <period+0x2>
    1a30:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <period+0x3>
		
		ch_1_rising = system_tick_MG_p;
    1a34:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <system_tick_MG_p>
    1a38:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <system_tick_MG_p+0x1>
    1a3c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ch_1_rising+0x1>
    1a40:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ch_1_rising>
		ch_1_rising_mod = system_tick_MG_p_mod;
    1a44:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <system_tick_MG_p_mod>
    1a48:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <system_tick_MG_p_mod+0x1>
    1a4c:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <ch_1_rising_mod+0x1>
    1a50:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <ch_1_rising_mod>
		
		flag_rx = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <flag_rx>
		
		Interrupt_Init_Falling_INT6();
    1a5a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <Interrupt_Init_Falling_INT6>
    1a5e:	32 c0       	rjmp	.+100    	; 0x1ac4 <__vector_7+0xe2>
		
		}else{ 
		throttle = ((float)(time_precision(ch_1_rising, ch_1_rising_mod)-249)/(float)period)*100;
    1a60:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <ch_1_rising_mod>
    1a64:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <ch_1_rising_mod+0x1>
    1a68:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ch_1_rising>
    1a6c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ch_1_rising+0x1>
    1a70:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <time_precision>
    1a74:	c0 90 60 01 	lds	r12, 0x0160	; 0x800160 <period>
    1a78:	d0 90 61 01 	lds	r13, 0x0161	; 0x800161 <period+0x1>
    1a7c:	e0 90 62 01 	lds	r14, 0x0162	; 0x800162 <period+0x2>
    1a80:	f0 90 63 01 	lds	r15, 0x0163	; 0x800163 <period+0x3>
    1a84:	69 5f       	subi	r22, 0xF9	; 249
    1a86:	71 09       	sbc	r23, r1
    1a88:	81 09       	sbc	r24, r1
    1a8a:	91 09       	sbc	r25, r1
    1a8c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1a90:	4b 01       	movw	r8, r22
    1a92:	5c 01       	movw	r10, r24
    1a94:	c7 01       	movw	r24, r14
    1a96:	b6 01       	movw	r22, r12
    1a98:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__floatunsisf>
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	ac 01       	movw	r20, r24
    1aa0:	c5 01       	movw	r24, r10
    1aa2:	b4 01       	movw	r22, r8
    1aa4:	0e 94 b0 10 	call	0x2160	; 0x2160 <__divsf3>
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	48 ec       	ldi	r20, 0xC8	; 200
    1aae:	52 e4       	ldi	r21, 0x42	; 66
    1ab0:	0e 94 15 12 	call	0x242a	; 0x242a <__mulsf3>
    1ab4:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    1ab8:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <throttle>
		
		//USART_Transmit((uint8_t)((float)time_precision(ch_1_rising, ch_1_rising_mod)/24.9));
		
		//USART_Transmit('\n');
		
		flag_rx = 0;
    1abc:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <flag_rx>

		Interrupt_Init_Rising_INT6();
    1ac0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Interrupt_Init_Rising_INT6>

	}

}
    1ac4:	ff 91       	pop	r31
    1ac6:	ef 91       	pop	r30
    1ac8:	bf 91       	pop	r27
    1aca:	af 91       	pop	r26
    1acc:	9f 91       	pop	r25
    1ace:	8f 91       	pop	r24
    1ad0:	7f 91       	pop	r23
    1ad2:	6f 91       	pop	r22
    1ad4:	5f 91       	pop	r21
    1ad6:	4f 91       	pop	r20
    1ad8:	3f 91       	pop	r19
    1ada:	2f 91       	pop	r18
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	bf 90       	pop	r11
    1ae6:	af 90       	pop	r10
    1ae8:	9f 90       	pop	r9
    1aea:	8f 90       	pop	r8
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	0f 90       	pop	r0
    1af2:	1f 90       	pop	r1
    1af4:	18 95       	reti

00001af6 <__vector_9>:

ISR(PCINT0_vect){
    1af6:	1f 92       	push	r1
    1af8:	0f 92       	push	r0
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	0f 92       	push	r0
    1afe:	11 24       	eor	r1, r1
		break;
		
		case 128: //pcint7 changed
		break;
	}*/
}
    1b00:	0f 90       	pop	r0
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	0f 90       	pop	r0
    1b06:	1f 90       	pop	r1
    1b08:	18 95       	reti

00001b0a <interrupt_init>:

void interrupt_init(){
	Interrupt_Init_Rising_INT6();
    1b0a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Interrupt_Init_Rising_INT6>
    1b0e:	08 95       	ret

00001b10 <timer_8bit_setCLK>:
void timer_16bit_INT_init_3_TOP(){
	TIMSK3 |= (1 << ICIE3);
}

void timer_16bit_INT_init_3_BOTTOM(){
	TIMSK3 |= (1 << TOIE3);
    1b10:	80 34       	cpi	r24, 0x40	; 64
    1b12:	91 05       	cpc	r25, r1
    1b14:	d1 f0       	breq	.+52     	; 0x1b4a <timer_8bit_setCLK+0x3a>
    1b16:	30 f4       	brcc	.+12     	; 0x1b24 <timer_8bit_setCLK+0x14>
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f0       	breq	.+26     	; 0x1b36 <timer_8bit_setCLK+0x26>
    1b1c:	88 30       	cpi	r24, 0x08	; 8
    1b1e:	91 05       	cpc	r25, r1
    1b20:	81 f0       	breq	.+32     	; 0x1b42 <timer_8bit_setCLK+0x32>
    1b22:	1f c0       	rjmp	.+62     	; 0x1b62 <timer_8bit_setCLK+0x52>
    1b24:	81 15       	cp	r24, r1
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	92 07       	cpc	r25, r18
    1b2a:	99 f0       	breq	.+38     	; 0x1b52 <timer_8bit_setCLK+0x42>
    1b2c:	81 15       	cp	r24, r1
    1b2e:	24 e0       	ldi	r18, 0x04	; 4
    1b30:	92 07       	cpc	r25, r18
    1b32:	99 f0       	breq	.+38     	; 0x1b5a <timer_8bit_setCLK+0x4a>
    1b34:	16 c0       	rjmp	.+44     	; 0x1b62 <timer_8bit_setCLK+0x52>
    1b36:	85 b5       	in	r24, 0x25	; 37
    1b38:	81 60       	ori	r24, 0x01	; 1
    1b3a:	85 bd       	out	0x25, r24	; 37
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	08 95       	ret
    1b42:	25 b5       	in	r18, 0x25	; 37
    1b44:	22 60       	ori	r18, 0x02	; 2
    1b46:	25 bd       	out	0x25, r18	; 37
    1b48:	08 95       	ret
    1b4a:	25 b5       	in	r18, 0x25	; 37
    1b4c:	23 60       	ori	r18, 0x03	; 3
    1b4e:	25 bd       	out	0x25, r18	; 37
    1b50:	08 95       	ret
    1b52:	25 b5       	in	r18, 0x25	; 37
    1b54:	24 60       	ori	r18, 0x04	; 4
    1b56:	25 bd       	out	0x25, r18	; 37
    1b58:	08 95       	ret
    1b5a:	25 b5       	in	r18, 0x25	; 37
    1b5c:	26 60       	ori	r18, 0x06	; 6
    1b5e:	25 bd       	out	0x25, r18	; 37
    1b60:	08 95       	ret
    1b62:	85 b5       	in	r24, 0x25	; 37
    1b64:	81 60       	ori	r24, 0x01	; 1
    1b66:	85 bd       	out	0x25, r24	; 37
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	08 95       	ret

00001b6e <timer_8bit_CTC_init>:
    1b6e:	cf 93       	push	r28
    1b70:	c8 2f       	mov	r28, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	22 e0       	ldi	r18, 0x02	; 2
    1b76:	24 bd       	out	0x24, r18	; 36
    1b78:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <timer_8bit_setCLK>
    1b7c:	c7 bd       	out	0x27, r28	; 39
    1b7e:	cf 91       	pop	r28
    1b80:	08 95       	ret

00001b82 <timer_8bit_INT_init_COMPA>:
    1b82:	ee e6       	ldi	r30, 0x6E	; 110
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	82 60       	ori	r24, 0x02	; 2
    1b8a:	80 83       	st	Z, r24
    1b8c:	08 95       	ret

00001b8e <__vector_21>:
    1b8e:	1f 92       	push	r1
    1b90:	0f 92       	push	r0
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	0f 92       	push	r0
    1b96:	11 24       	eor	r1, r1
    1b98:	2f 93       	push	r18
    1b9a:	8f 93       	push	r24
    1b9c:	9f 93       	push	r25
    1b9e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <system_tick_MG>
    1ba2:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <system_tick_MG+0x1>
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <system_tick_MG+0x1>
    1bac:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <system_tick_MG>
    1bb0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <system_tick_MG_p>
    1bb4:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <system_tick_MG_p+0x1>
    1bb8:	87 50       	subi	r24, 0x07	; 7
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <system_tick_MG_p+0x1>
    1bc0:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <system_tick_MG_p>
    1bc4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <system_tick_MG_p>
    1bc8:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <system_tick_MG_p+0x1>
    1bcc:	86 30       	cpi	r24, 0x06	; 6
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	48 f0       	brcs	.+18     	; 0x1be4 <__vector_21+0x56>
    1bd2:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <system_tick_MG_p_mod>
    1bd6:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <system_tick_MG_p_mod+0x1>
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <system_tick_MG_p_mod+0x1>
    1be0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <system_tick_MG_p_mod>
    1be4:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <system_tick_MG>
    1be8:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <system_tick_MG+0x1>
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	49 f4       	brne	.+18     	; 0x1c02 <__vector_21+0x74>
    1bf0:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <system_tick_MG_mod>
    1bf4:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <system_tick_MG_mod+0x1>
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <system_tick_MG_mod+0x1>
    1bfe:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <system_tick_MG_mod>
    1c02:	88 b1       	in	r24, 0x08	; 8
    1c04:	80 38       	cpi	r24, 0x80	; 128
    1c06:	11 f4       	brne	.+4      	; 0x1c0c <__vector_21+0x7e>
    1c08:	18 b8       	out	0x08, r1	; 8
    1c0a:	05 c0       	rjmp	.+10     	; 0x1c16 <__vector_21+0x88>
    1c0c:	88 b1       	in	r24, 0x08	; 8
    1c0e:	81 11       	cpse	r24, r1
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <__vector_21+0x88>
    1c12:	80 e8       	ldi	r24, 0x80	; 128
    1c14:	88 b9       	out	0x08, r24	; 8
    1c16:	9f 91       	pop	r25
    1c18:	8f 91       	pop	r24
    1c1a:	2f 91       	pop	r18
    1c1c:	0f 90       	pop	r0
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	0f 90       	pop	r0
    1c22:	1f 90       	pop	r1
    1c24:	18 95       	reti

00001c26 <time_precision>:
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	ec 01       	movw	r28, r24
    1c2c:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <system_tick_MG_p_mod>
    1c30:	30 91 6e 01 	lds	r19, 0x016E	; 0x80016e <system_tick_MG_p_mod+0x1>
    1c34:	e6 b5       	in	r30, 0x26	; 38
    1c36:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <system_tick_MG_p>
    1c3a:	50 91 70 01 	lds	r21, 0x0170	; 0x800170 <system_tick_MG_p+0x1>
    1c3e:	26 1b       	sub	r18, r22
    1c40:	37 0b       	sbc	r19, r23
    1c42:	af ef       	ldi	r26, 0xFF	; 255
    1c44:	bf ef       	ldi	r27, 0xFF	; 255
    1c46:	0e 94 17 13 	call	0x262e	; 0x262e <__umulhisi3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8c 1b       	sub	r24, r28
    1c50:	9d 0b       	sbc	r25, r29
    1c52:	a1 09       	sbc	r26, r1
    1c54:	b1 09       	sbc	r27, r1
    1c56:	4e 0f       	add	r20, r30
    1c58:	51 1d       	adc	r21, r1
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	64 0f       	add	r22, r20
    1c60:	75 1f       	adc	r23, r21
    1c62:	81 1d       	adc	r24, r1
    1c64:	91 1d       	adc	r25, r1
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	08 95       	ret

00001c6c <timer1_16bit_PWM_initABC>:
    1c6c:	84 b1       	in	r24, 0x04	; 4
    1c6e:	80 6e       	ori	r24, 0xE0	; 224
    1c70:	84 b9       	out	0x04, r24	; 4
    1c72:	e0 e8       	ldi	r30, 0x80	; 128
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	88 6a       	ori	r24, 0xA8	; 168
    1c7a:	80 83       	st	Z, r24
    1c7c:	80 e1       	ldi	r24, 0x10	; 16
    1c7e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1c82:	08 95       	ret

00001c84 <timer_1_setCLK>:
    1c84:	80 34       	cpi	r24, 0x40	; 64
    1c86:	91 05       	cpc	r25, r1
    1c88:	f1 f0       	breq	.+60     	; 0x1cc6 <timer_1_setCLK+0x42>
    1c8a:	30 f4       	brcc	.+12     	; 0x1c98 <timer_1_setCLK+0x14>
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f0       	breq	.+26     	; 0x1caa <timer_1_setCLK+0x26>
    1c90:	88 30       	cpi	r24, 0x08	; 8
    1c92:	91 05       	cpc	r25, r1
    1c94:	91 f0       	breq	.+36     	; 0x1cba <timer_1_setCLK+0x36>
    1c96:	29 c0       	rjmp	.+82     	; 0x1cea <timer_1_setCLK+0x66>
    1c98:	81 15       	cp	r24, r1
    1c9a:	21 e0       	ldi	r18, 0x01	; 1
    1c9c:	92 07       	cpc	r25, r18
    1c9e:	c9 f0       	breq	.+50     	; 0x1cd2 <timer_1_setCLK+0x4e>
    1ca0:	81 15       	cp	r24, r1
    1ca2:	24 e0       	ldi	r18, 0x04	; 4
    1ca4:	92 07       	cpc	r25, r18
    1ca6:	d9 f0       	breq	.+54     	; 0x1cde <timer_1_setCLK+0x5a>
    1ca8:	20 c0       	rjmp	.+64     	; 0x1cea <timer_1_setCLK+0x66>
    1caa:	e1 e8       	ldi	r30, 0x81	; 129
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	81 60       	ori	r24, 0x01	; 1
    1cb2:	80 83       	st	Z, r24
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	08 95       	ret
    1cba:	e1 e8       	ldi	r30, 0x81	; 129
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	20 81       	ld	r18, Z
    1cc0:	22 60       	ori	r18, 0x02	; 2
    1cc2:	20 83       	st	Z, r18
    1cc4:	08 95       	ret
    1cc6:	e1 e8       	ldi	r30, 0x81	; 129
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	20 81       	ld	r18, Z
    1ccc:	23 60       	ori	r18, 0x03	; 3
    1cce:	20 83       	st	Z, r18
    1cd0:	08 95       	ret
    1cd2:	e1 e8       	ldi	r30, 0x81	; 129
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	20 81       	ld	r18, Z
    1cd8:	24 60       	ori	r18, 0x04	; 4
    1cda:	20 83       	st	Z, r18
    1cdc:	08 95       	ret
    1cde:	e1 e8       	ldi	r30, 0x81	; 129
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	20 81       	ld	r18, Z
    1ce4:	26 60       	ori	r18, 0x06	; 6
    1ce6:	20 83       	st	Z, r18
    1ce8:	08 95       	ret
    1cea:	e1 e8       	ldi	r30, 0x81	; 129
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	81 60       	ori	r24, 0x01	; 1
    1cf2:	80 83       	st	Z, r24
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	08 95       	ret

00001cfa <timer1_16bit_PWM_ABC>:
    1cfa:	8f 92       	push	r8
    1cfc:	9f 92       	push	r9
    1cfe:	af 92       	push	r10
    1d00:	bf 92       	push	r11
    1d02:	df 92       	push	r13
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	d8 2e       	mov	r13, r24
    1d12:	e6 2e       	mov	r14, r22
    1d14:	f4 2e       	mov	r15, r20
    1d16:	e9 01       	movw	r28, r18
    1d18:	c8 01       	movw	r24, r16
    1d1a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <timer_1_setCLK>
    1d1e:	cc 0f       	add	r28, r28
    1d20:	dd 1f       	adc	r29, r29
    1d22:	9c 01       	movw	r18, r24
    1d24:	c2 9f       	mul	r28, r18
    1d26:	c0 01       	movw	r24, r0
    1d28:	c3 9f       	mul	r28, r19
    1d2a:	90 0d       	add	r25, r0
    1d2c:	d2 9f       	mul	r29, r18
    1d2e:	90 0d       	add	r25, r0
    1d30:	11 24       	eor	r1, r1
    1d32:	9c 01       	movw	r18, r24
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	74 e2       	ldi	r23, 0x24	; 36
    1d3c:	84 ef       	ldi	r24, 0xF4	; 244
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__udivmodsi4>
    1d44:	49 01       	movw	r8, r18
    1d46:	5a 01       	movw	r10, r20
    1d48:	36 95       	lsr	r19
    1d4a:	27 95       	ror	r18
    1d4c:	36 95       	lsr	r19
    1d4e:	27 95       	ror	r18
    1d50:	ab e7       	ldi	r26, 0x7B	; 123
    1d52:	b4 e1       	ldi	r27, 0x14	; 20
    1d54:	0e 94 17 13 	call	0x262e	; 0x262e <__umulhisi3>
    1d58:	96 95       	lsr	r25
    1d5a:	87 95       	ror	r24
    1d5c:	d8 9e       	mul	r13, r24
    1d5e:	b0 01       	movw	r22, r0
    1d60:	d9 9e       	mul	r13, r25
    1d62:	70 0d       	add	r23, r0
    1d64:	11 24       	eor	r1, r1
    1d66:	e8 9e       	mul	r14, r24
    1d68:	a0 01       	movw	r20, r0
    1d6a:	e9 9e       	mul	r14, r25
    1d6c:	50 0d       	add	r21, r0
    1d6e:	11 24       	eor	r1, r1
    1d70:	f8 9e       	mul	r15, r24
    1d72:	90 01       	movw	r18, r0
    1d74:	f9 9e       	mul	r15, r25
    1d76:	30 0d       	add	r19, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	8f b7       	in	r24, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	90 92 87 00 	sts	0x0087, r9	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1d82:	80 92 86 00 	sts	0x0086, r8	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1d86:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1d8a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1d8e:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1d92:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1d96:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
    1d9a:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
    1d9e:	8f bf       	out	0x3f, r24	; 63
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	8f 90       	pop	r8
    1db6:	08 95       	ret

00001db8 <__vector_20>:
    1db8:	1f 92       	push	r1
    1dba:	0f 92       	push	r0
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	0f 92       	push	r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f 90       	pop	r0
    1dc8:	1f 90       	pop	r1
    1dca:	18 95       	reti

00001dcc <__vector_16>:
    1dcc:	1f 92       	push	r1
    1dce:	0f 92       	push	r0
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	0f 92       	push	r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	0f 90       	pop	r0
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	0f 90       	pop	r0
    1ddc:	1f 90       	pop	r1
    1dde:	18 95       	reti

00001de0 <timer3_16bit_PWM_initA>:
    1de0:	80 e4       	ldi	r24, 0x40	; 64
    1de2:	87 b9       	out	0x07, r24	; 7
    1de4:	e0 e9       	ldi	r30, 0x90	; 144
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	80 68       	ori	r24, 0x80	; 128
    1dec:	80 83       	st	Z, r24
    1dee:	e1 e9       	ldi	r30, 0x91	; 145
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	80 61       	ori	r24, 0x10	; 16
    1df6:	80 83       	st	Z, r24
    1df8:	08 95       	ret

00001dfa <timer_init>:
    1dfa:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <timer1_16bit_PWM_initABC>
    1dfe:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <timer3_16bit_PWM_initA>
    1e02:	60 e4       	ldi	r22, 0x40	; 64
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	89 ef       	ldi	r24, 0xF9	; 249
    1e08:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <timer_8bit_CTC_init>
    1e0c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <timer_8bit_INT_init_COMPA>
    1e10:	08 95       	ret

00001e12 <timer_3_setCLK>:
    1e12:	80 34       	cpi	r24, 0x40	; 64
    1e14:	91 05       	cpc	r25, r1
    1e16:	f1 f0       	breq	.+60     	; 0x1e54 <timer_3_setCLK+0x42>
    1e18:	30 f4       	brcc	.+12     	; 0x1e26 <timer_3_setCLK+0x14>
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f0       	breq	.+26     	; 0x1e38 <timer_3_setCLK+0x26>
    1e1e:	88 30       	cpi	r24, 0x08	; 8
    1e20:	91 05       	cpc	r25, r1
    1e22:	91 f0       	breq	.+36     	; 0x1e48 <timer_3_setCLK+0x36>
    1e24:	29 c0       	rjmp	.+82     	; 0x1e78 <timer_3_setCLK+0x66>
    1e26:	81 15       	cp	r24, r1
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	92 07       	cpc	r25, r18
    1e2c:	c9 f0       	breq	.+50     	; 0x1e60 <timer_3_setCLK+0x4e>
    1e2e:	81 15       	cp	r24, r1
    1e30:	24 e0       	ldi	r18, 0x04	; 4
    1e32:	92 07       	cpc	r25, r18
    1e34:	d9 f0       	breq	.+54     	; 0x1e6c <timer_3_setCLK+0x5a>
    1e36:	20 c0       	rjmp	.+64     	; 0x1e78 <timer_3_setCLK+0x66>
    1e38:	e1 e9       	ldi	r30, 0x91	; 145
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	81 60       	ori	r24, 0x01	; 1
    1e40:	80 83       	st	Z, r24
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	08 95       	ret
    1e48:	e1 e9       	ldi	r30, 0x91	; 145
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	20 81       	ld	r18, Z
    1e4e:	22 60       	ori	r18, 0x02	; 2
    1e50:	20 83       	st	Z, r18
    1e52:	08 95       	ret
    1e54:	e1 e9       	ldi	r30, 0x91	; 145
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	20 81       	ld	r18, Z
    1e5a:	23 60       	ori	r18, 0x03	; 3
    1e5c:	20 83       	st	Z, r18
    1e5e:	08 95       	ret
    1e60:	e1 e9       	ldi	r30, 0x91	; 145
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	20 81       	ld	r18, Z
    1e66:	24 60       	ori	r18, 0x04	; 4
    1e68:	20 83       	st	Z, r18
    1e6a:	08 95       	ret
    1e6c:	e1 e9       	ldi	r30, 0x91	; 145
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	20 81       	ld	r18, Z
    1e72:	26 60       	ori	r18, 0x06	; 6
    1e74:	20 83       	st	Z, r18
    1e76:	08 95       	ret
    1e78:	e1 e9       	ldi	r30, 0x91	; 145
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	81 60       	ori	r24, 0x01	; 1
    1e80:	80 83       	st	Z, r24
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	08 95       	ret

00001e88 <timer3_16bit_PWM_A>:
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	18 2f       	mov	r17, r24
    1e98:	eb 01       	movw	r28, r22
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <timer_3_setCLK>
    1ea0:	cc 0f       	add	r28, r28
    1ea2:	dd 1f       	adc	r29, r29
    1ea4:	9c 01       	movw	r18, r24
    1ea6:	c2 9f       	mul	r28, r18
    1ea8:	c0 01       	movw	r24, r0
    1eaa:	c3 9f       	mul	r28, r19
    1eac:	90 0d       	add	r25, r0
    1eae:	d2 9f       	mul	r29, r18
    1eb0:	90 0d       	add	r25, r0
    1eb2:	11 24       	eor	r1, r1
    1eb4:	9c 01       	movw	r18, r24
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	74 e2       	ldi	r23, 0x24	; 36
    1ebe:	84 ef       	ldi	r24, 0xF4	; 244
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__udivmodsi4>
    1ec6:	69 01       	movw	r12, r18
    1ec8:	7a 01       	movw	r14, r20
    1eca:	36 95       	lsr	r19
    1ecc:	27 95       	ror	r18
    1ece:	36 95       	lsr	r19
    1ed0:	27 95       	ror	r18
    1ed2:	ab e7       	ldi	r26, 0x7B	; 123
    1ed4:	b4 e1       	ldi	r27, 0x14	; 20
    1ed6:	0e 94 17 13 	call	0x262e	; 0x262e <__umulhisi3>
    1eda:	96 95       	lsr	r25
    1edc:	87 95       	ror	r24
    1ede:	18 9f       	mul	r17, r24
    1ee0:	90 01       	movw	r18, r0
    1ee2:	19 9f       	mul	r17, r25
    1ee4:	30 0d       	add	r19, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	8f b7       	in	r24, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	d0 92 97 00 	sts	0x0097, r13	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
    1ef0:	c0 92 96 00 	sts	0x0096, r12	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
    1ef4:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1ef8:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1efc:	8f bf       	out	0x3f, r24	; 63
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	df 90       	pop	r13
    1f0a:	cf 90       	pop	r12
    1f0c:	08 95       	ret

00001f0e <__vector_35>:
}

ISR(TIMER3_OVF_vect){
    1f0e:	1f 92       	push	r1
    1f10:	0f 92       	push	r0
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
	
}
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <__vector_31>:

ISR(TIMER3_CAPT_vect){
    1f22:	1f 92       	push	r1
    1f24:	0f 92       	push	r0
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	0f 92       	push	r0
    1f2a:	11 24       	eor	r1, r1
	//system_tick_MG++;
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <USART_Init>:
    1f36:	a0 e0       	ldi	r26, 0x00	; 0
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	aa 1f       	adc	r26, r26
    1f40:	bb 1f       	adc	r27, r27
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	aa 1f       	adc	r26, r26
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	9c 01       	movw	r18, r24
    1f4c:	ad 01       	movw	r20, r26
    1f4e:	22 0f       	add	r18, r18
    1f50:	33 1f       	adc	r19, r19
    1f52:	44 1f       	adc	r20, r20
    1f54:	55 1f       	adc	r21, r21
    1f56:	22 0f       	add	r18, r18
    1f58:	33 1f       	adc	r19, r19
    1f5a:	44 1f       	adc	r20, r20
    1f5c:	55 1f       	adc	r21, r21
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	74 e2       	ldi	r23, 0x24	; 36
    1f62:	84 ef       	ldi	r24, 0xF4	; 244
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__udivmodsi4>
    1f6a:	21 50       	subi	r18, 0x01	; 1
    1f6c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1f70:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1f74:	e9 ec       	ldi	r30, 0xC9	; 201
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 e8       	ldi	r24, 0x80	; 128
    1f7a:	80 83       	st	Z, r24
    1f7c:	86 e0       	ldi	r24, 0x06	; 6
    1f7e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    1f82:	80 81       	ld	r24, Z
    1f84:	88 61       	ori	r24, 0x18	; 24
    1f86:	80 83       	st	Z, r24
    1f88:	08 95       	ret

00001f8a <USART_Transmit>:
    1f8a:	e8 ec       	ldi	r30, 0xC8	; 200
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	90 81       	ld	r25, Z
    1f90:	95 ff       	sbrs	r25, 5
    1f92:	fd cf       	rjmp	.-6      	; 0x1f8e <USART_Transmit+0x4>
    1f94:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1f98:	08 95       	ret

00001f9a <USART_String>:
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	66 23       	and	r22, r22
    1fa4:	51 f0       	breq	.+20     	; 0x1fba <USART_String+0x20>
    1fa6:	8c 01       	movw	r16, r24
    1fa8:	ec 01       	movw	r28, r24
    1faa:	06 0f       	add	r16, r22
    1fac:	11 1d       	adc	r17, r1
    1fae:	89 91       	ld	r24, Y+
    1fb0:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
    1fb4:	c0 17       	cp	r28, r16
    1fb6:	d1 07       	cpc	r29, r17
    1fb8:	d1 f7       	brne	.-12     	; 0x1fae <USART_String+0x14>
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <__vector_25>:
    1fc4:	1f 92       	push	r1
    1fc6:	0f 92       	push	r0
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	0f 92       	push	r0
    1fcc:	11 24       	eor	r1, r1
    1fce:	2f 93       	push	r18
    1fd0:	3f 93       	push	r19
    1fd2:	4f 93       	push	r20
    1fd4:	5f 93       	push	r21
    1fd6:	6f 93       	push	r22
    1fd8:	7f 93       	push	r23
    1fda:	8f 93       	push	r24
    1fdc:	9f 93       	push	r25
    1fde:	af 93       	push	r26
    1fe0:	bf 93       	push	r27
    1fe2:	ef 93       	push	r30
    1fe4:	ff 93       	push	r31
    1fe6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1fea:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ISR_USART_Receive>
    1fee:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ISR_USART_Receive>
    1ff2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
    1ff6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ISR_USART_Receive>
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 8c 00 	call	0x118	; 0x118 <selected_value>
    2000:	8a e0       	ldi	r24, 0x0A	; 10
    2002:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <USART_Transmit>
    2006:	ff 91       	pop	r31
    2008:	ef 91       	pop	r30
    200a:	bf 91       	pop	r27
    200c:	af 91       	pop	r26
    200e:	9f 91       	pop	r25
    2010:	8f 91       	pop	r24
    2012:	7f 91       	pop	r23
    2014:	6f 91       	pop	r22
    2016:	5f 91       	pop	r21
    2018:	4f 91       	pop	r20
    201a:	3f 91       	pop	r19
    201c:	2f 91       	pop	r18
    201e:	0f 90       	pop	r0
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	0f 90       	pop	r0
    2024:	1f 90       	pop	r1
    2026:	18 95       	reti

00002028 <__subsf3>:
    2028:	50 58       	subi	r21, 0x80	; 128

0000202a <__addsf3>:
    202a:	bb 27       	eor	r27, r27
    202c:	aa 27       	eor	r26, r26
    202e:	0e 94 2c 10 	call	0x2058	; 0x2058 <__addsf3x>
    2032:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__fp_round>
    2036:	0e 94 c5 11 	call	0x238a	; 0x238a <__fp_pscA>
    203a:	38 f0       	brcs	.+14     	; 0x204a <__addsf3+0x20>
    203c:	0e 94 cc 11 	call	0x2398	; 0x2398 <__fp_pscB>
    2040:	20 f0       	brcs	.+8      	; 0x204a <__addsf3+0x20>
    2042:	39 f4       	brne	.+14     	; 0x2052 <__addsf3+0x28>
    2044:	9f 3f       	cpi	r25, 0xFF	; 255
    2046:	19 f4       	brne	.+6      	; 0x204e <__addsf3+0x24>
    2048:	26 f4       	brtc	.+8      	; 0x2052 <__addsf3+0x28>
    204a:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_nan>
    204e:	0e f4       	brtc	.+2      	; 0x2052 <__addsf3+0x28>
    2050:	e0 95       	com	r30
    2052:	e7 fb       	bst	r30, 7
    2054:	0c 94 95 11 	jmp	0x232a	; 0x232a <__fp_inf>

00002058 <__addsf3x>:
    2058:	e9 2f       	mov	r30, r25
    205a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__fp_split3>
    205e:	58 f3       	brcs	.-42     	; 0x2036 <__addsf3+0xc>
    2060:	ba 17       	cp	r27, r26
    2062:	62 07       	cpc	r22, r18
    2064:	73 07       	cpc	r23, r19
    2066:	84 07       	cpc	r24, r20
    2068:	95 07       	cpc	r25, r21
    206a:	20 f0       	brcs	.+8      	; 0x2074 <__addsf3x+0x1c>
    206c:	79 f4       	brne	.+30     	; 0x208c <__addsf3x+0x34>
    206e:	a6 f5       	brtc	.+104    	; 0x20d8 <__addsf3x+0x80>
    2070:	0c 94 06 12 	jmp	0x240c	; 0x240c <__fp_zero>
    2074:	0e f4       	brtc	.+2      	; 0x2078 <__addsf3x+0x20>
    2076:	e0 95       	com	r30
    2078:	0b 2e       	mov	r0, r27
    207a:	ba 2f       	mov	r27, r26
    207c:	a0 2d       	mov	r26, r0
    207e:	0b 01       	movw	r0, r22
    2080:	b9 01       	movw	r22, r18
    2082:	90 01       	movw	r18, r0
    2084:	0c 01       	movw	r0, r24
    2086:	ca 01       	movw	r24, r20
    2088:	a0 01       	movw	r20, r0
    208a:	11 24       	eor	r1, r1
    208c:	ff 27       	eor	r31, r31
    208e:	59 1b       	sub	r21, r25
    2090:	99 f0       	breq	.+38     	; 0x20b8 <__addsf3x+0x60>
    2092:	59 3f       	cpi	r21, 0xF9	; 249
    2094:	50 f4       	brcc	.+20     	; 0x20aa <__addsf3x+0x52>
    2096:	50 3e       	cpi	r21, 0xE0	; 224
    2098:	68 f1       	brcs	.+90     	; 0x20f4 <__addsf3x+0x9c>
    209a:	1a 16       	cp	r1, r26
    209c:	f0 40       	sbci	r31, 0x00	; 0
    209e:	a2 2f       	mov	r26, r18
    20a0:	23 2f       	mov	r18, r19
    20a2:	34 2f       	mov	r19, r20
    20a4:	44 27       	eor	r20, r20
    20a6:	58 5f       	subi	r21, 0xF8	; 248
    20a8:	f3 cf       	rjmp	.-26     	; 0x2090 <__addsf3x+0x38>
    20aa:	46 95       	lsr	r20
    20ac:	37 95       	ror	r19
    20ae:	27 95       	ror	r18
    20b0:	a7 95       	ror	r26
    20b2:	f0 40       	sbci	r31, 0x00	; 0
    20b4:	53 95       	inc	r21
    20b6:	c9 f7       	brne	.-14     	; 0x20aa <__addsf3x+0x52>
    20b8:	7e f4       	brtc	.+30     	; 0x20d8 <__addsf3x+0x80>
    20ba:	1f 16       	cp	r1, r31
    20bc:	ba 0b       	sbc	r27, r26
    20be:	62 0b       	sbc	r22, r18
    20c0:	73 0b       	sbc	r23, r19
    20c2:	84 0b       	sbc	r24, r20
    20c4:	ba f0       	brmi	.+46     	; 0x20f4 <__addsf3x+0x9c>
    20c6:	91 50       	subi	r25, 0x01	; 1
    20c8:	a1 f0       	breq	.+40     	; 0x20f2 <__addsf3x+0x9a>
    20ca:	ff 0f       	add	r31, r31
    20cc:	bb 1f       	adc	r27, r27
    20ce:	66 1f       	adc	r22, r22
    20d0:	77 1f       	adc	r23, r23
    20d2:	88 1f       	adc	r24, r24
    20d4:	c2 f7       	brpl	.-16     	; 0x20c6 <__addsf3x+0x6e>
    20d6:	0e c0       	rjmp	.+28     	; 0x20f4 <__addsf3x+0x9c>
    20d8:	ba 0f       	add	r27, r26
    20da:	62 1f       	adc	r22, r18
    20dc:	73 1f       	adc	r23, r19
    20de:	84 1f       	adc	r24, r20
    20e0:	48 f4       	brcc	.+18     	; 0x20f4 <__addsf3x+0x9c>
    20e2:	87 95       	ror	r24
    20e4:	77 95       	ror	r23
    20e6:	67 95       	ror	r22
    20e8:	b7 95       	ror	r27
    20ea:	f7 95       	ror	r31
    20ec:	9e 3f       	cpi	r25, 0xFE	; 254
    20ee:	08 f0       	brcs	.+2      	; 0x20f2 <__addsf3x+0x9a>
    20f0:	b0 cf       	rjmp	.-160    	; 0x2052 <__addsf3+0x28>
    20f2:	93 95       	inc	r25
    20f4:	88 0f       	add	r24, r24
    20f6:	08 f0       	brcs	.+2      	; 0x20fa <__addsf3x+0xa2>
    20f8:	99 27       	eor	r25, r25
    20fa:	ee 0f       	add	r30, r30
    20fc:	97 95       	ror	r25
    20fe:	87 95       	ror	r24
    2100:	08 95       	ret

00002102 <atan>:
    2102:	df 93       	push	r29
    2104:	dd 27       	eor	r29, r29
    2106:	b9 2f       	mov	r27, r25
    2108:	bf 77       	andi	r27, 0x7F	; 127
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	16 16       	cp	r1, r22
    2110:	17 06       	cpc	r1, r23
    2112:	48 07       	cpc	r20, r24
    2114:	5b 07       	cpc	r21, r27
    2116:	18 f4       	brcc	.+6      	; 0x211e <atan+0x1c>
    2118:	d9 2f       	mov	r29, r25
    211a:	0e 94 0d 12 	call	0x241a	; 0x241a <inverse>
    211e:	9f 93       	push	r25
    2120:	8f 93       	push	r24
    2122:	7f 93       	push	r23
    2124:	6f 93       	push	r22
    2126:	0e 94 c8 12 	call	0x2590	; 0x2590 <square>
    212a:	ec ea       	ldi	r30, 0xAC	; 172
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	0e 94 9e 11 	call	0x233c	; 0x233c <__fp_powser>
    2132:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fp_round>
    2136:	2f 91       	pop	r18
    2138:	3f 91       	pop	r19
    213a:	4f 91       	pop	r20
    213c:	5f 91       	pop	r21
    213e:	0e 94 28 12 	call	0x2450	; 0x2450 <__mulsf3x>
    2142:	dd 23       	and	r29, r29
    2144:	51 f0       	breq	.+20     	; 0x215a <atan+0x58>
    2146:	90 58       	subi	r25, 0x80	; 128
    2148:	a2 ea       	ldi	r26, 0xA2	; 162
    214a:	2a ed       	ldi	r18, 0xDA	; 218
    214c:	3f e0       	ldi	r19, 0x0F	; 15
    214e:	49 ec       	ldi	r20, 0xC9	; 201
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	d0 78       	andi	r29, 0x80	; 128
    2154:	5d 27       	eor	r21, r29
    2156:	0e 94 2c 10 	call	0x2058	; 0x2058 <__addsf3x>
    215a:	df 91       	pop	r29
    215c:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__fp_round>

00002160 <__divsf3>:
    2160:	0e 94 c4 10 	call	0x2188	; 0x2188 <__divsf3x>
    2164:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__fp_round>
    2168:	0e 94 cc 11 	call	0x2398	; 0x2398 <__fp_pscB>
    216c:	58 f0       	brcs	.+22     	; 0x2184 <__divsf3+0x24>
    216e:	0e 94 c5 11 	call	0x238a	; 0x238a <__fp_pscA>
    2172:	40 f0       	brcs	.+16     	; 0x2184 <__divsf3+0x24>
    2174:	29 f4       	brne	.+10     	; 0x2180 <__divsf3+0x20>
    2176:	5f 3f       	cpi	r21, 0xFF	; 255
    2178:	29 f0       	breq	.+10     	; 0x2184 <__divsf3+0x24>
    217a:	0c 94 95 11 	jmp	0x232a	; 0x232a <__fp_inf>
    217e:	51 11       	cpse	r21, r1
    2180:	0c 94 07 12 	jmp	0x240e	; 0x240e <__fp_szero>
    2184:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_nan>

00002188 <__divsf3x>:
    2188:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__fp_split3>
    218c:	68 f3       	brcs	.-38     	; 0x2168 <__divsf3+0x8>

0000218e <__divsf3_pse>:
    218e:	99 23       	and	r25, r25
    2190:	b1 f3       	breq	.-20     	; 0x217e <__divsf3+0x1e>
    2192:	55 23       	and	r21, r21
    2194:	91 f3       	breq	.-28     	; 0x217a <__divsf3+0x1a>
    2196:	95 1b       	sub	r25, r21
    2198:	55 0b       	sbc	r21, r21
    219a:	bb 27       	eor	r27, r27
    219c:	aa 27       	eor	r26, r26
    219e:	62 17       	cp	r22, r18
    21a0:	73 07       	cpc	r23, r19
    21a2:	84 07       	cpc	r24, r20
    21a4:	38 f0       	brcs	.+14     	; 0x21b4 <__divsf3_pse+0x26>
    21a6:	9f 5f       	subi	r25, 0xFF	; 255
    21a8:	5f 4f       	sbci	r21, 0xFF	; 255
    21aa:	22 0f       	add	r18, r18
    21ac:	33 1f       	adc	r19, r19
    21ae:	44 1f       	adc	r20, r20
    21b0:	aa 1f       	adc	r26, r26
    21b2:	a9 f3       	breq	.-22     	; 0x219e <__divsf3_pse+0x10>
    21b4:	35 d0       	rcall	.+106    	; 0x2220 <__divsf3_pse+0x92>
    21b6:	0e 2e       	mov	r0, r30
    21b8:	3a f0       	brmi	.+14     	; 0x21c8 <__divsf3_pse+0x3a>
    21ba:	e0 e8       	ldi	r30, 0x80	; 128
    21bc:	32 d0       	rcall	.+100    	; 0x2222 <__divsf3_pse+0x94>
    21be:	91 50       	subi	r25, 0x01	; 1
    21c0:	50 40       	sbci	r21, 0x00	; 0
    21c2:	e6 95       	lsr	r30
    21c4:	00 1c       	adc	r0, r0
    21c6:	ca f7       	brpl	.-14     	; 0x21ba <__divsf3_pse+0x2c>
    21c8:	2b d0       	rcall	.+86     	; 0x2220 <__divsf3_pse+0x92>
    21ca:	fe 2f       	mov	r31, r30
    21cc:	29 d0       	rcall	.+82     	; 0x2220 <__divsf3_pse+0x92>
    21ce:	66 0f       	add	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	88 1f       	adc	r24, r24
    21d4:	bb 1f       	adc	r27, r27
    21d6:	26 17       	cp	r18, r22
    21d8:	37 07       	cpc	r19, r23
    21da:	48 07       	cpc	r20, r24
    21dc:	ab 07       	cpc	r26, r27
    21de:	b0 e8       	ldi	r27, 0x80	; 128
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <__divsf3_pse+0x56>
    21e2:	bb 0b       	sbc	r27, r27
    21e4:	80 2d       	mov	r24, r0
    21e6:	bf 01       	movw	r22, r30
    21e8:	ff 27       	eor	r31, r31
    21ea:	93 58       	subi	r25, 0x83	; 131
    21ec:	5f 4f       	sbci	r21, 0xFF	; 255
    21ee:	3a f0       	brmi	.+14     	; 0x21fe <__divsf3_pse+0x70>
    21f0:	9e 3f       	cpi	r25, 0xFE	; 254
    21f2:	51 05       	cpc	r21, r1
    21f4:	78 f0       	brcs	.+30     	; 0x2214 <__divsf3_pse+0x86>
    21f6:	0c 94 95 11 	jmp	0x232a	; 0x232a <__fp_inf>
    21fa:	0c 94 07 12 	jmp	0x240e	; 0x240e <__fp_szero>
    21fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2200:	e4 f3       	brlt	.-8      	; 0x21fa <__divsf3_pse+0x6c>
    2202:	98 3e       	cpi	r25, 0xE8	; 232
    2204:	d4 f3       	brlt	.-12     	; 0x21fa <__divsf3_pse+0x6c>
    2206:	86 95       	lsr	r24
    2208:	77 95       	ror	r23
    220a:	67 95       	ror	r22
    220c:	b7 95       	ror	r27
    220e:	f7 95       	ror	r31
    2210:	9f 5f       	subi	r25, 0xFF	; 255
    2212:	c9 f7       	brne	.-14     	; 0x2206 <__divsf3_pse+0x78>
    2214:	88 0f       	add	r24, r24
    2216:	91 1d       	adc	r25, r1
    2218:	96 95       	lsr	r25
    221a:	87 95       	ror	r24
    221c:	97 f9       	bld	r25, 7
    221e:	08 95       	ret
    2220:	e1 e0       	ldi	r30, 0x01	; 1
    2222:	66 0f       	add	r22, r22
    2224:	77 1f       	adc	r23, r23
    2226:	88 1f       	adc	r24, r24
    2228:	bb 1f       	adc	r27, r27
    222a:	62 17       	cp	r22, r18
    222c:	73 07       	cpc	r23, r19
    222e:	84 07       	cpc	r24, r20
    2230:	ba 07       	cpc	r27, r26
    2232:	20 f0       	brcs	.+8      	; 0x223c <__divsf3_pse+0xae>
    2234:	62 1b       	sub	r22, r18
    2236:	73 0b       	sbc	r23, r19
    2238:	84 0b       	sbc	r24, r20
    223a:	ba 0b       	sbc	r27, r26
    223c:	ee 1f       	adc	r30, r30
    223e:	88 f7       	brcc	.-30     	; 0x2222 <__divsf3_pse+0x94>
    2240:	e0 95       	com	r30
    2242:	08 95       	ret

00002244 <__fixsfsi>:
    2244:	0e 94 29 11 	call	0x2252	; 0x2252 <__fixunssfsi>
    2248:	68 94       	set
    224a:	b1 11       	cpse	r27, r1
    224c:	0c 94 07 12 	jmp	0x240e	; 0x240e <__fp_szero>
    2250:	08 95       	ret

00002252 <__fixunssfsi>:
    2252:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__fp_splitA>
    2256:	88 f0       	brcs	.+34     	; 0x227a <__fixunssfsi+0x28>
    2258:	9f 57       	subi	r25, 0x7F	; 127
    225a:	98 f0       	brcs	.+38     	; 0x2282 <__fixunssfsi+0x30>
    225c:	b9 2f       	mov	r27, r25
    225e:	99 27       	eor	r25, r25
    2260:	b7 51       	subi	r27, 0x17	; 23
    2262:	b0 f0       	brcs	.+44     	; 0x2290 <__fixunssfsi+0x3e>
    2264:	e1 f0       	breq	.+56     	; 0x229e <__fixunssfsi+0x4c>
    2266:	66 0f       	add	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	88 1f       	adc	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	1a f0       	brmi	.+6      	; 0x2276 <__fixunssfsi+0x24>
    2270:	ba 95       	dec	r27
    2272:	c9 f7       	brne	.-14     	; 0x2266 <__fixunssfsi+0x14>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <__fixunssfsi+0x4c>
    2276:	b1 30       	cpi	r27, 0x01	; 1
    2278:	91 f0       	breq	.+36     	; 0x229e <__fixunssfsi+0x4c>
    227a:	0e 94 06 12 	call	0x240c	; 0x240c <__fp_zero>
    227e:	b1 e0       	ldi	r27, 0x01	; 1
    2280:	08 95       	ret
    2282:	0c 94 06 12 	jmp	0x240c	; 0x240c <__fp_zero>
    2286:	67 2f       	mov	r22, r23
    2288:	78 2f       	mov	r23, r24
    228a:	88 27       	eor	r24, r24
    228c:	b8 5f       	subi	r27, 0xF8	; 248
    228e:	39 f0       	breq	.+14     	; 0x229e <__fixunssfsi+0x4c>
    2290:	b9 3f       	cpi	r27, 0xF9	; 249
    2292:	cc f3       	brlt	.-14     	; 0x2286 <__fixunssfsi+0x34>
    2294:	86 95       	lsr	r24
    2296:	77 95       	ror	r23
    2298:	67 95       	ror	r22
    229a:	b3 95       	inc	r27
    229c:	d9 f7       	brne	.-10     	; 0x2294 <__fixunssfsi+0x42>
    229e:	3e f4       	brtc	.+14     	; 0x22ae <__fixunssfsi+0x5c>
    22a0:	90 95       	com	r25
    22a2:	80 95       	com	r24
    22a4:	70 95       	com	r23
    22a6:	61 95       	neg	r22
    22a8:	7f 4f       	sbci	r23, 0xFF	; 255
    22aa:	8f 4f       	sbci	r24, 0xFF	; 255
    22ac:	9f 4f       	sbci	r25, 0xFF	; 255
    22ae:	08 95       	ret

000022b0 <__floatunsisf>:
    22b0:	e8 94       	clt
    22b2:	09 c0       	rjmp	.+18     	; 0x22c6 <__floatsisf+0x12>

000022b4 <__floatsisf>:
    22b4:	97 fb       	bst	r25, 7
    22b6:	3e f4       	brtc	.+14     	; 0x22c6 <__floatsisf+0x12>
    22b8:	90 95       	com	r25
    22ba:	80 95       	com	r24
    22bc:	70 95       	com	r23
    22be:	61 95       	neg	r22
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	8f 4f       	sbci	r24, 0xFF	; 255
    22c4:	9f 4f       	sbci	r25, 0xFF	; 255
    22c6:	99 23       	and	r25, r25
    22c8:	a9 f0       	breq	.+42     	; 0x22f4 <__floatsisf+0x40>
    22ca:	f9 2f       	mov	r31, r25
    22cc:	96 e9       	ldi	r25, 0x96	; 150
    22ce:	bb 27       	eor	r27, r27
    22d0:	93 95       	inc	r25
    22d2:	f6 95       	lsr	r31
    22d4:	87 95       	ror	r24
    22d6:	77 95       	ror	r23
    22d8:	67 95       	ror	r22
    22da:	b7 95       	ror	r27
    22dc:	f1 11       	cpse	r31, r1
    22de:	f8 cf       	rjmp	.-16     	; 0x22d0 <__floatsisf+0x1c>
    22e0:	fa f4       	brpl	.+62     	; 0x2320 <__floatsisf+0x6c>
    22e2:	bb 0f       	add	r27, r27
    22e4:	11 f4       	brne	.+4      	; 0x22ea <__floatsisf+0x36>
    22e6:	60 ff       	sbrs	r22, 0
    22e8:	1b c0       	rjmp	.+54     	; 0x2320 <__floatsisf+0x6c>
    22ea:	6f 5f       	subi	r22, 0xFF	; 255
    22ec:	7f 4f       	sbci	r23, 0xFF	; 255
    22ee:	8f 4f       	sbci	r24, 0xFF	; 255
    22f0:	9f 4f       	sbci	r25, 0xFF	; 255
    22f2:	16 c0       	rjmp	.+44     	; 0x2320 <__floatsisf+0x6c>
    22f4:	88 23       	and	r24, r24
    22f6:	11 f0       	breq	.+4      	; 0x22fc <__floatsisf+0x48>
    22f8:	96 e9       	ldi	r25, 0x96	; 150
    22fa:	11 c0       	rjmp	.+34     	; 0x231e <__floatsisf+0x6a>
    22fc:	77 23       	and	r23, r23
    22fe:	21 f0       	breq	.+8      	; 0x2308 <__floatsisf+0x54>
    2300:	9e e8       	ldi	r25, 0x8E	; 142
    2302:	87 2f       	mov	r24, r23
    2304:	76 2f       	mov	r23, r22
    2306:	05 c0       	rjmp	.+10     	; 0x2312 <__floatsisf+0x5e>
    2308:	66 23       	and	r22, r22
    230a:	71 f0       	breq	.+28     	; 0x2328 <__floatsisf+0x74>
    230c:	96 e8       	ldi	r25, 0x86	; 134
    230e:	86 2f       	mov	r24, r22
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	2a f0       	brmi	.+10     	; 0x2320 <__floatsisf+0x6c>
    2316:	9a 95       	dec	r25
    2318:	66 0f       	add	r22, r22
    231a:	77 1f       	adc	r23, r23
    231c:	88 1f       	adc	r24, r24
    231e:	da f7       	brpl	.-10     	; 0x2316 <__floatsisf+0x62>
    2320:	88 0f       	add	r24, r24
    2322:	96 95       	lsr	r25
    2324:	87 95       	ror	r24
    2326:	97 f9       	bld	r25, 7
    2328:	08 95       	ret

0000232a <__fp_inf>:
    232a:	97 f9       	bld	r25, 7
    232c:	9f 67       	ori	r25, 0x7F	; 127
    232e:	80 e8       	ldi	r24, 0x80	; 128
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	08 95       	ret

00002336 <__fp_nan>:
    2336:	9f ef       	ldi	r25, 0xFF	; 255
    2338:	80 ec       	ldi	r24, 0xC0	; 192
    233a:	08 95       	ret

0000233c <__fp_powser>:
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	1f 93       	push	r17
    2342:	0f 93       	push	r16
    2344:	ff 92       	push	r15
    2346:	ef 92       	push	r14
    2348:	df 92       	push	r13
    234a:	7b 01       	movw	r14, r22
    234c:	8c 01       	movw	r16, r24
    234e:	68 94       	set
    2350:	06 c0       	rjmp	.+12     	; 0x235e <__fp_powser+0x22>
    2352:	da 2e       	mov	r13, r26
    2354:	ef 01       	movw	r28, r30
    2356:	0e 94 28 12 	call	0x2450	; 0x2450 <__mulsf3x>
    235a:	fe 01       	movw	r30, r28
    235c:	e8 94       	clt
    235e:	a5 91       	lpm	r26, Z+
    2360:	25 91       	lpm	r18, Z+
    2362:	35 91       	lpm	r19, Z+
    2364:	45 91       	lpm	r20, Z+
    2366:	55 91       	lpm	r21, Z+
    2368:	a6 f3       	brts	.-24     	; 0x2352 <__fp_powser+0x16>
    236a:	ef 01       	movw	r28, r30
    236c:	0e 94 2c 10 	call	0x2058	; 0x2058 <__addsf3x>
    2370:	fe 01       	movw	r30, r28
    2372:	97 01       	movw	r18, r14
    2374:	a8 01       	movw	r20, r16
    2376:	da 94       	dec	r13
    2378:	69 f7       	brne	.-38     	; 0x2354 <__fp_powser+0x18>
    237a:	df 90       	pop	r13
    237c:	ef 90       	pop	r14
    237e:	ff 90       	pop	r15
    2380:	0f 91       	pop	r16
    2382:	1f 91       	pop	r17
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <__fp_pscA>:
    238a:	00 24       	eor	r0, r0
    238c:	0a 94       	dec	r0
    238e:	16 16       	cp	r1, r22
    2390:	17 06       	cpc	r1, r23
    2392:	18 06       	cpc	r1, r24
    2394:	09 06       	cpc	r0, r25
    2396:	08 95       	ret

00002398 <__fp_pscB>:
    2398:	00 24       	eor	r0, r0
    239a:	0a 94       	dec	r0
    239c:	12 16       	cp	r1, r18
    239e:	13 06       	cpc	r1, r19
    23a0:	14 06       	cpc	r1, r20
    23a2:	05 06       	cpc	r0, r21
    23a4:	08 95       	ret

000023a6 <__fp_round>:
    23a6:	09 2e       	mov	r0, r25
    23a8:	03 94       	inc	r0
    23aa:	00 0c       	add	r0, r0
    23ac:	11 f4       	brne	.+4      	; 0x23b2 <__fp_round+0xc>
    23ae:	88 23       	and	r24, r24
    23b0:	52 f0       	brmi	.+20     	; 0x23c6 <__fp_round+0x20>
    23b2:	bb 0f       	add	r27, r27
    23b4:	40 f4       	brcc	.+16     	; 0x23c6 <__fp_round+0x20>
    23b6:	bf 2b       	or	r27, r31
    23b8:	11 f4       	brne	.+4      	; 0x23be <__fp_round+0x18>
    23ba:	60 ff       	sbrs	r22, 0
    23bc:	04 c0       	rjmp	.+8      	; 0x23c6 <__fp_round+0x20>
    23be:	6f 5f       	subi	r22, 0xFF	; 255
    23c0:	7f 4f       	sbci	r23, 0xFF	; 255
    23c2:	8f 4f       	sbci	r24, 0xFF	; 255
    23c4:	9f 4f       	sbci	r25, 0xFF	; 255
    23c6:	08 95       	ret

000023c8 <__fp_split3>:
    23c8:	57 fd       	sbrc	r21, 7
    23ca:	90 58       	subi	r25, 0x80	; 128
    23cc:	44 0f       	add	r20, r20
    23ce:	55 1f       	adc	r21, r21
    23d0:	59 f0       	breq	.+22     	; 0x23e8 <__fp_splitA+0x10>
    23d2:	5f 3f       	cpi	r21, 0xFF	; 255
    23d4:	71 f0       	breq	.+28     	; 0x23f2 <__fp_splitA+0x1a>
    23d6:	47 95       	ror	r20

000023d8 <__fp_splitA>:
    23d8:	88 0f       	add	r24, r24
    23da:	97 fb       	bst	r25, 7
    23dc:	99 1f       	adc	r25, r25
    23de:	61 f0       	breq	.+24     	; 0x23f8 <__fp_splitA+0x20>
    23e0:	9f 3f       	cpi	r25, 0xFF	; 255
    23e2:	79 f0       	breq	.+30     	; 0x2402 <__fp_splitA+0x2a>
    23e4:	87 95       	ror	r24
    23e6:	08 95       	ret
    23e8:	12 16       	cp	r1, r18
    23ea:	13 06       	cpc	r1, r19
    23ec:	14 06       	cpc	r1, r20
    23ee:	55 1f       	adc	r21, r21
    23f0:	f2 cf       	rjmp	.-28     	; 0x23d6 <__fp_split3+0xe>
    23f2:	46 95       	lsr	r20
    23f4:	f1 df       	rcall	.-30     	; 0x23d8 <__fp_splitA>
    23f6:	08 c0       	rjmp	.+16     	; 0x2408 <__fp_splitA+0x30>
    23f8:	16 16       	cp	r1, r22
    23fa:	17 06       	cpc	r1, r23
    23fc:	18 06       	cpc	r1, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	f1 cf       	rjmp	.-30     	; 0x23e4 <__fp_splitA+0xc>
    2402:	86 95       	lsr	r24
    2404:	71 05       	cpc	r23, r1
    2406:	61 05       	cpc	r22, r1
    2408:	08 94       	sec
    240a:	08 95       	ret

0000240c <__fp_zero>:
    240c:	e8 94       	clt

0000240e <__fp_szero>:
    240e:	bb 27       	eor	r27, r27
    2410:	66 27       	eor	r22, r22
    2412:	77 27       	eor	r23, r23
    2414:	cb 01       	movw	r24, r22
    2416:	97 f9       	bld	r25, 7
    2418:	08 95       	ret

0000241a <inverse>:
    241a:	9b 01       	movw	r18, r22
    241c:	ac 01       	movw	r20, r24
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	80 e8       	ldi	r24, 0x80	; 128
    2424:	9f e3       	ldi	r25, 0x3F	; 63
    2426:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__divsf3>

0000242a <__mulsf3>:
    242a:	0e 94 28 12 	call	0x2450	; 0x2450 <__mulsf3x>
    242e:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__fp_round>
    2432:	0e 94 c5 11 	call	0x238a	; 0x238a <__fp_pscA>
    2436:	38 f0       	brcs	.+14     	; 0x2446 <__mulsf3+0x1c>
    2438:	0e 94 cc 11 	call	0x2398	; 0x2398 <__fp_pscB>
    243c:	20 f0       	brcs	.+8      	; 0x2446 <__mulsf3+0x1c>
    243e:	95 23       	and	r25, r21
    2440:	11 f0       	breq	.+4      	; 0x2446 <__mulsf3+0x1c>
    2442:	0c 94 95 11 	jmp	0x232a	; 0x232a <__fp_inf>
    2446:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_nan>
    244a:	11 24       	eor	r1, r1
    244c:	0c 94 07 12 	jmp	0x240e	; 0x240e <__fp_szero>

00002450 <__mulsf3x>:
    2450:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__fp_split3>
    2454:	70 f3       	brcs	.-36     	; 0x2432 <__mulsf3+0x8>

00002456 <__mulsf3_pse>:
    2456:	95 9f       	mul	r25, r21
    2458:	c1 f3       	breq	.-16     	; 0x244a <__mulsf3+0x20>
    245a:	95 0f       	add	r25, r21
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	55 1f       	adc	r21, r21
    2460:	62 9f       	mul	r22, r18
    2462:	f0 01       	movw	r30, r0
    2464:	72 9f       	mul	r23, r18
    2466:	bb 27       	eor	r27, r27
    2468:	f0 0d       	add	r31, r0
    246a:	b1 1d       	adc	r27, r1
    246c:	63 9f       	mul	r22, r19
    246e:	aa 27       	eor	r26, r26
    2470:	f0 0d       	add	r31, r0
    2472:	b1 1d       	adc	r27, r1
    2474:	aa 1f       	adc	r26, r26
    2476:	64 9f       	mul	r22, r20
    2478:	66 27       	eor	r22, r22
    247a:	b0 0d       	add	r27, r0
    247c:	a1 1d       	adc	r26, r1
    247e:	66 1f       	adc	r22, r22
    2480:	82 9f       	mul	r24, r18
    2482:	22 27       	eor	r18, r18
    2484:	b0 0d       	add	r27, r0
    2486:	a1 1d       	adc	r26, r1
    2488:	62 1f       	adc	r22, r18
    248a:	73 9f       	mul	r23, r19
    248c:	b0 0d       	add	r27, r0
    248e:	a1 1d       	adc	r26, r1
    2490:	62 1f       	adc	r22, r18
    2492:	83 9f       	mul	r24, r19
    2494:	a0 0d       	add	r26, r0
    2496:	61 1d       	adc	r22, r1
    2498:	22 1f       	adc	r18, r18
    249a:	74 9f       	mul	r23, r20
    249c:	33 27       	eor	r19, r19
    249e:	a0 0d       	add	r26, r0
    24a0:	61 1d       	adc	r22, r1
    24a2:	23 1f       	adc	r18, r19
    24a4:	84 9f       	mul	r24, r20
    24a6:	60 0d       	add	r22, r0
    24a8:	21 1d       	adc	r18, r1
    24aa:	82 2f       	mov	r24, r18
    24ac:	76 2f       	mov	r23, r22
    24ae:	6a 2f       	mov	r22, r26
    24b0:	11 24       	eor	r1, r1
    24b2:	9f 57       	subi	r25, 0x7F	; 127
    24b4:	50 40       	sbci	r21, 0x00	; 0
    24b6:	9a f0       	brmi	.+38     	; 0x24de <__mulsf3_pse+0x88>
    24b8:	f1 f0       	breq	.+60     	; 0x24f6 <__mulsf3_pse+0xa0>
    24ba:	88 23       	and	r24, r24
    24bc:	4a f0       	brmi	.+18     	; 0x24d0 <__mulsf3_pse+0x7a>
    24be:	ee 0f       	add	r30, r30
    24c0:	ff 1f       	adc	r31, r31
    24c2:	bb 1f       	adc	r27, r27
    24c4:	66 1f       	adc	r22, r22
    24c6:	77 1f       	adc	r23, r23
    24c8:	88 1f       	adc	r24, r24
    24ca:	91 50       	subi	r25, 0x01	; 1
    24cc:	50 40       	sbci	r21, 0x00	; 0
    24ce:	a9 f7       	brne	.-22     	; 0x24ba <__mulsf3_pse+0x64>
    24d0:	9e 3f       	cpi	r25, 0xFE	; 254
    24d2:	51 05       	cpc	r21, r1
    24d4:	80 f0       	brcs	.+32     	; 0x24f6 <__mulsf3_pse+0xa0>
    24d6:	0c 94 95 11 	jmp	0x232a	; 0x232a <__fp_inf>
    24da:	0c 94 07 12 	jmp	0x240e	; 0x240e <__fp_szero>
    24de:	5f 3f       	cpi	r21, 0xFF	; 255
    24e0:	e4 f3       	brlt	.-8      	; 0x24da <__mulsf3_pse+0x84>
    24e2:	98 3e       	cpi	r25, 0xE8	; 232
    24e4:	d4 f3       	brlt	.-12     	; 0x24da <__mulsf3_pse+0x84>
    24e6:	86 95       	lsr	r24
    24e8:	77 95       	ror	r23
    24ea:	67 95       	ror	r22
    24ec:	b7 95       	ror	r27
    24ee:	f7 95       	ror	r31
    24f0:	e7 95       	ror	r30
    24f2:	9f 5f       	subi	r25, 0xFF	; 255
    24f4:	c1 f7       	brne	.-16     	; 0x24e6 <__mulsf3_pse+0x90>
    24f6:	fe 2b       	or	r31, r30
    24f8:	88 0f       	add	r24, r24
    24fa:	91 1d       	adc	r25, r1
    24fc:	96 95       	lsr	r25
    24fe:	87 95       	ror	r24
    2500:	97 f9       	bld	r25, 7
    2502:	08 95       	ret
    2504:	19 f4       	brne	.+6      	; 0x250c <__mulsf3_pse+0xb6>
    2506:	16 f4       	brtc	.+4      	; 0x250c <__mulsf3_pse+0xb6>
    2508:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_nan>
    250c:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__fp_mpack>

00002510 <sqrt>:
    2510:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__fp_splitA>
    2514:	b8 f3       	brcs	.-18     	; 0x2504 <__mulsf3_pse+0xae>
    2516:	99 23       	and	r25, r25
    2518:	c9 f3       	breq	.-14     	; 0x250c <__mulsf3_pse+0xb6>
    251a:	b6 f3       	brts	.-20     	; 0x2508 <__mulsf3_pse+0xb2>
    251c:	9f 57       	subi	r25, 0x7F	; 127
    251e:	55 0b       	sbc	r21, r21
    2520:	87 ff       	sbrs	r24, 7
    2522:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fp_norm2>
    2526:	00 24       	eor	r0, r0
    2528:	a0 e6       	ldi	r26, 0x60	; 96
    252a:	40 ea       	ldi	r20, 0xA0	; 160
    252c:	90 01       	movw	r18, r0
    252e:	80 58       	subi	r24, 0x80	; 128
    2530:	56 95       	lsr	r21
    2532:	97 95       	ror	r25
    2534:	28 f4       	brcc	.+10     	; 0x2540 <sqrt+0x30>
    2536:	80 5c       	subi	r24, 0xC0	; 192
    2538:	66 0f       	add	r22, r22
    253a:	77 1f       	adc	r23, r23
    253c:	88 1f       	adc	r24, r24
    253e:	20 f0       	brcs	.+8      	; 0x2548 <sqrt+0x38>
    2540:	26 17       	cp	r18, r22
    2542:	37 07       	cpc	r19, r23
    2544:	48 07       	cpc	r20, r24
    2546:	30 f4       	brcc	.+12     	; 0x2554 <sqrt+0x44>
    2548:	62 1b       	sub	r22, r18
    254a:	73 0b       	sbc	r23, r19
    254c:	84 0b       	sbc	r24, r20
    254e:	20 29       	or	r18, r0
    2550:	31 29       	or	r19, r1
    2552:	4a 2b       	or	r20, r26
    2554:	a6 95       	lsr	r26
    2556:	17 94       	ror	r1
    2558:	07 94       	ror	r0
    255a:	20 25       	eor	r18, r0
    255c:	31 25       	eor	r19, r1
    255e:	4a 27       	eor	r20, r26
    2560:	58 f7       	brcc	.-42     	; 0x2538 <sqrt+0x28>
    2562:	66 0f       	add	r22, r22
    2564:	77 1f       	adc	r23, r23
    2566:	88 1f       	adc	r24, r24
    2568:	20 f0       	brcs	.+8      	; 0x2572 <sqrt+0x62>
    256a:	26 17       	cp	r18, r22
    256c:	37 07       	cpc	r19, r23
    256e:	48 07       	cpc	r20, r24
    2570:	30 f4       	brcc	.+12     	; 0x257e <sqrt+0x6e>
    2572:	62 0b       	sbc	r22, r18
    2574:	73 0b       	sbc	r23, r19
    2576:	84 0b       	sbc	r24, r20
    2578:	20 0d       	add	r18, r0
    257a:	31 1d       	adc	r19, r1
    257c:	41 1d       	adc	r20, r1
    257e:	a0 95       	com	r26
    2580:	81 f7       	brne	.-32     	; 0x2562 <sqrt+0x52>
    2582:	b9 01       	movw	r22, r18
    2584:	84 2f       	mov	r24, r20
    2586:	91 58       	subi	r25, 0x81	; 129
    2588:	88 0f       	add	r24, r24
    258a:	96 95       	lsr	r25
    258c:	87 95       	ror	r24
    258e:	08 95       	ret

00002590 <square>:
    2590:	9b 01       	movw	r18, r22
    2592:	ac 01       	movw	r20, r24
    2594:	0c 94 15 12 	jmp	0x242a	; 0x242a <__mulsf3>

00002598 <__fp_mpack>:
    2598:	9f 3f       	cpi	r25, 0xFF	; 255
    259a:	31 f0       	breq	.+12     	; 0x25a8 <__fp_mpack_finite+0xc>

0000259c <__fp_mpack_finite>:
    259c:	91 50       	subi	r25, 0x01	; 1
    259e:	20 f4       	brcc	.+8      	; 0x25a8 <__fp_mpack_finite+0xc>
    25a0:	87 95       	ror	r24
    25a2:	77 95       	ror	r23
    25a4:	67 95       	ror	r22
    25a6:	b7 95       	ror	r27
    25a8:	88 0f       	add	r24, r24
    25aa:	91 1d       	adc	r25, r1
    25ac:	96 95       	lsr	r25
    25ae:	87 95       	ror	r24
    25b0:	97 f9       	bld	r25, 7
    25b2:	08 95       	ret

000025b4 <__fp_norm2>:
    25b4:	91 50       	subi	r25, 0x01	; 1
    25b6:	50 40       	sbci	r21, 0x00	; 0
    25b8:	66 0f       	add	r22, r22
    25ba:	77 1f       	adc	r23, r23
    25bc:	88 1f       	adc	r24, r24
    25be:	d2 f7       	brpl	.-12     	; 0x25b4 <__fp_norm2>
    25c0:	08 95       	ret

000025c2 <__divmodhi4>:
    25c2:	97 fb       	bst	r25, 7
    25c4:	07 2e       	mov	r0, r23
    25c6:	16 f4       	brtc	.+4      	; 0x25cc <__divmodhi4+0xa>
    25c8:	00 94       	com	r0
    25ca:	07 d0       	rcall	.+14     	; 0x25da <__divmodhi4_neg1>
    25cc:	77 fd       	sbrc	r23, 7
    25ce:	09 d0       	rcall	.+18     	; 0x25e2 <__divmodhi4_neg2>
    25d0:	0e 94 26 13 	call	0x264c	; 0x264c <__udivmodhi4>
    25d4:	07 fc       	sbrc	r0, 7
    25d6:	05 d0       	rcall	.+10     	; 0x25e2 <__divmodhi4_neg2>
    25d8:	3e f4       	brtc	.+14     	; 0x25e8 <__divmodhi4_exit>

000025da <__divmodhi4_neg1>:
    25da:	90 95       	com	r25
    25dc:	81 95       	neg	r24
    25de:	9f 4f       	sbci	r25, 0xFF	; 255
    25e0:	08 95       	ret

000025e2 <__divmodhi4_neg2>:
    25e2:	70 95       	com	r23
    25e4:	61 95       	neg	r22
    25e6:	7f 4f       	sbci	r23, 0xFF	; 255

000025e8 <__divmodhi4_exit>:
    25e8:	08 95       	ret

000025ea <__udivmodsi4>:
    25ea:	a1 e2       	ldi	r26, 0x21	; 33
    25ec:	1a 2e       	mov	r1, r26
    25ee:	aa 1b       	sub	r26, r26
    25f0:	bb 1b       	sub	r27, r27
    25f2:	fd 01       	movw	r30, r26
    25f4:	0d c0       	rjmp	.+26     	; 0x2610 <__udivmodsi4_ep>

000025f6 <__udivmodsi4_loop>:
    25f6:	aa 1f       	adc	r26, r26
    25f8:	bb 1f       	adc	r27, r27
    25fa:	ee 1f       	adc	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	a2 17       	cp	r26, r18
    2600:	b3 07       	cpc	r27, r19
    2602:	e4 07       	cpc	r30, r20
    2604:	f5 07       	cpc	r31, r21
    2606:	20 f0       	brcs	.+8      	; 0x2610 <__udivmodsi4_ep>
    2608:	a2 1b       	sub	r26, r18
    260a:	b3 0b       	sbc	r27, r19
    260c:	e4 0b       	sbc	r30, r20
    260e:	f5 0b       	sbc	r31, r21

00002610 <__udivmodsi4_ep>:
    2610:	66 1f       	adc	r22, r22
    2612:	77 1f       	adc	r23, r23
    2614:	88 1f       	adc	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	1a 94       	dec	r1
    261a:	69 f7       	brne	.-38     	; 0x25f6 <__udivmodsi4_loop>
    261c:	60 95       	com	r22
    261e:	70 95       	com	r23
    2620:	80 95       	com	r24
    2622:	90 95       	com	r25
    2624:	9b 01       	movw	r18, r22
    2626:	ac 01       	movw	r20, r24
    2628:	bd 01       	movw	r22, r26
    262a:	cf 01       	movw	r24, r30
    262c:	08 95       	ret

0000262e <__umulhisi3>:
    262e:	a2 9f       	mul	r26, r18
    2630:	b0 01       	movw	r22, r0
    2632:	b3 9f       	mul	r27, r19
    2634:	c0 01       	movw	r24, r0
    2636:	a3 9f       	mul	r26, r19
    2638:	70 0d       	add	r23, r0
    263a:	81 1d       	adc	r24, r1
    263c:	11 24       	eor	r1, r1
    263e:	91 1d       	adc	r25, r1
    2640:	b2 9f       	mul	r27, r18
    2642:	70 0d       	add	r23, r0
    2644:	81 1d       	adc	r24, r1
    2646:	11 24       	eor	r1, r1
    2648:	91 1d       	adc	r25, r1
    264a:	08 95       	ret

0000264c <__udivmodhi4>:
    264c:	aa 1b       	sub	r26, r26
    264e:	bb 1b       	sub	r27, r27
    2650:	51 e1       	ldi	r21, 0x11	; 17
    2652:	07 c0       	rjmp	.+14     	; 0x2662 <__udivmodhi4_ep>

00002654 <__udivmodhi4_loop>:
    2654:	aa 1f       	adc	r26, r26
    2656:	bb 1f       	adc	r27, r27
    2658:	a6 17       	cp	r26, r22
    265a:	b7 07       	cpc	r27, r23
    265c:	10 f0       	brcs	.+4      	; 0x2662 <__udivmodhi4_ep>
    265e:	a6 1b       	sub	r26, r22
    2660:	b7 0b       	sbc	r27, r23

00002662 <__udivmodhi4_ep>:
    2662:	88 1f       	adc	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	5a 95       	dec	r21
    2668:	a9 f7       	brne	.-22     	; 0x2654 <__udivmodhi4_loop>
    266a:	80 95       	com	r24
    266c:	90 95       	com	r25
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	08 95       	ret

00002674 <_exit>:
    2674:	f8 94       	cli

00002676 <__stop_program>:
    2676:	ff cf       	rjmp	.-2      	; 0x2676 <__stop_program>
